-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Sep 14, 2025 at 02:15 PM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `uniblog`
--

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE `categories` (
  `id` int(11) NOT NULL,
  `name` varchar(100) NOT NULL,
  `description` text DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`id`, `name`, `description`, `created_at`) VALUES
(1, 'PHP Programming', 'PHP Programming', '2025-09-13 10:16:17'),
(2, 'Python Programming', 'Python Programming', '2025-09-13 14:51:05'),
(3, 'Java Programming', 'Java Programming', '2025-09-13 14:51:28'),
(4, 'JavaScript Programming', 'JavaScript Programming', '2025-09-13 20:19:08'),
(5, 'C# Programming', 'C# Programming', '2025-09-13 20:24:40'),
(6, 'C++ Programming', 'C++ Programming', '2025-09-13 20:41:17'),
(7, 'C Programming', 'C Programming', '2025-09-13 20:49:00'),
(8, 'HTML Programming', 'HTML Programming', '2025-09-13 20:56:09'),
(9, 'CSS Programming', 'CSS Programming', '2025-09-13 21:05:09'),
(10, 'SQL', 'SQL', '2025-09-14 09:57:29'),
(11, 'React', 'React', '2025-09-14 10:04:38'),
(12, 'MySQL', 'MySQL', '2025-09-14 10:11:51');

-- --------------------------------------------------------

--
-- Table structure for table `comments`
--

CREATE TABLE `comments` (
  `id` int(11) NOT NULL,
  `post_id` int(11) DEFAULT NULL,
  `author_name` varchar(100) NOT NULL,
  `author_email` varchar(100) NOT NULL,
  `content` text NOT NULL,
  `status` enum('approved','pending','spam') NOT NULL DEFAULT 'pending',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` longtext NOT NULL,
  `excerpt` text DEFAULT NULL,
  `featured_image` varchar(255) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL,
  `author_id` int(11) DEFAULT NULL,
  `status` enum('published','draft') NOT NULL DEFAULT 'draft',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `updated_at` timestamp NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `title`, `content`, `excerpt`, `featured_image`, `category_id`, `author_id`, `status`, `created_at`, `updated_at`) VALUES
(1, 'PHP programming', '<h2>PHP Programming Lessons – Beginner to Advanced</h2>\r\n<p>Welcome to the PHP programming lesson series! In this series, we’ll learn PHP step by step — starting from the basics and moving toward advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n<ul>\r\n    <li>Variables and Data Types</li>\r\n    <li>Conditional Statements</li>\r\n    <li>Loops (for and while)</li>\r\n    <li>Functions</li>\r\n    <li>Basic Input and Output</li>\r\n    <li>Arrays</li>\r\n    <li>Associative Arrays</li>\r\n    <li>File Handling</li>\r\n    <li>Functions with Parameters</li>\r\n    <li>Classes and Objects (OOP)</li>\r\n    <li>Form Handling</li>\r\n    <li>Sessions and Cookies</li>\r\n    <li>Database (MySQL + PDO)</li>\r\n    <li>Security (Validation, Password Hashing, CSRF)</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>1. Variables and Data Types</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\n$name = \"Alice\";\r\n$age = 25;\r\n$isStudent = true;\r\n\r\necho \"$name is $age years old.\";\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>2. Conditional Statements</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\n$score = 80;\r\n\r\nif ($score >= 90) {\r\n    echo \"Excellent!\";\r\n} elseif ($score >= 60) {\r\n    echo \"Passed!\";\r\n} else {\r\n    echo \"Try again!\";\r\n}\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>3. Loops</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\n// For loop\r\nfor ($i = 1; $i &lt;= 5; $i++) {\r\n    echo \"Number: $i &lt;br&gt;\";\r\n}\r\n\r\n// While loop\r\n$count = 1;\r\nwhile ($count &lt;= 3) {\r\n    echo \"Count: $count &lt;br&gt;\";\r\n    $count++;\r\n}\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>4. Functions</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\nfunction greet($name) {\r\n    return \"Hello, $name!\";\r\n}\r\n\r\necho greet(\"Alice\");\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>5. Arrays</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\n$fruits = [\"Apple\", \"Banana\", \"Orange\"];\r\n\r\nforeach ($fruits as $fruit) {\r\n    echo $fruit . \"&lt;br&gt;\";\r\n}\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>6. Associative Arrays</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\n$user = [\r\n    \"name\" =&gt; \"Alice\",\r\n    \"age\" =&gt; 25,\r\n    \"email\" =&gt; \"alice@example.com\"\r\n];\r\n\r\necho $user[\"name\"] . \" is \" . $user[\"age\"] . \" years old.\";\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>7. File Handling</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\n// Write to file\r\nfile_put_contents(\"example.txt\", \"Learning PHP is fun!\");\r\n\r\n// Read file\r\n$content = file_get_contents(\"example.txt\");\r\necho $content;\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>8. Form Handling (GET/POST)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;!-- form.html --&gt;\r\n&lt;form method=\"post\" action=\"process.php\"&gt;\r\n    Name: &lt;input type=\"text\" name=\"name\"&gt;\r\n    &lt;input type=\"submit\" value=\"Submit\"&gt;\r\n&lt;/form&gt;\r\n\r\n&lt;!-- process.php --&gt;\r\n&lt;?php\r\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\r\n    $name = htmlspecialchars($_POST[\"name\"]);\r\n    echo \"Hello, $name!\";\r\n}\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>9. Sessions and Cookies</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\n// Start session\r\nsession_start();\r\n$_SESSION[\"username\"] = \"Alice\";\r\n\r\necho \"Session username: \" . $_SESSION[\"username\"];\r\n\r\n// Set cookie\r\nsetcookie(\"user\", \"Alice\", time()+3600, \"/\");\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>10. Database with PDO</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\n$dsn = \"mysql:host=localhost;dbname=testdb;charset=utf8mb4\";\r\n$user = \"root\";\r\n$pass = \"\";\r\n\r\ntry {\r\n    $pdo = new PDO($dsn, $user, $pass);\r\n    $pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\r\n\r\n    $stmt = $pdo-&gt;query(\"SELECT * FROM users\");\r\n    while ($row = $stmt-&gt;fetch(PDO::FETCH_ASSOC)) {\r\n        echo $row[\"name\"] . \"&lt;br&gt;\";\r\n    }\r\n} catch (PDOException $e) {\r\n    echo \"Error: \" . $e-&gt;getMessage();\r\n}\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>11. Classes and Objects</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\nclass User {\r\n    public $name;\r\n    public $email;\r\n\r\n    function __construct($name, $email) {\r\n        $this-&gt;name = $name;\r\n        $this-&gt;email = $email;\r\n    }\r\n\r\n    function display() {\r\n        echo $this-&gt;name . \" (\" . $this-&gt;email . \")\";\r\n    }\r\n}\r\n\r\n$user = new User(\"Alice\", \"alice@example.com\");\r\n$user-&gt;display();\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<h3>12. Security Basics</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-php\">&lt;?php\r\n// Password hashing\r\n$password = \"secret123\";\r\n$hash = password_hash($password, PASSWORD_DEFAULT);\r\n\r\nif (password_verify(\"secret123\", $hash)) {\r\n    echo \"Password is valid!\";\r\n}\r\n\r\n// Prevent XSS\r\n$userInput = \"&lt;script&gt;alert(\'hack\');&lt;/script&gt;\";\r\necho htmlspecialchars($userInput, ENT_QUOTES, \'UTF-8\');\r\n?&gt;</code></pre>\r\n</div>\r\n\r\n<hr>\r\n<p>By following these lessons, you’ll progress from PHP basics to advanced features like OOP, sessions, database interaction, and security practices. Keep practicing each example to build real projects step by step.</p>\r\n\r\n<!-- Prism.js script -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-php.min.js\"></script>\r\n\r\n<style>\r\n.code-container {\r\n    position: relative;\r\n    margin: 1em 0;\r\n    background: #1e1e1e;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n.code-container pre {\r\n    margin: 0;\r\n    padding: 1em;\r\n    overflow-x: auto;\r\n    font-family: \'Fira Code\', monospace;\r\n    font-size: 14px;\r\n}\r\n.copy-btn {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background: #007acc;\r\n    border: none;\r\n    color: white;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n}\r\n.copy-btn:hover {\r\n    background: #005f99;\r\n}\r\n</style>\r\n\r\n<script>\r\nfunction copyCode(button) {\r\n    const code = button.nextElementSibling.innerText;\r\n    navigator.clipboard.writeText(code).then(() => {\r\n        button.innerText = \"Copied!\";\r\n        setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n    });\r\n}\r\n</script>', 'PHP Programming Lessons – Beginner to Advanced', '1757775608_php.png', 1, 1, 'published', '2025-09-13 10:21:59', '2025-09-13 15:00:08'),
(2, 'Python Programming Lessons', '<h2>Python Programming Lessons – Beginner to Advanced</h2>\r\n<p>Welcome to the Python programming lesson series! In this series, we’ll learn Python step by step — starting from the basics and moving toward advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n<ul>\r\n    <li>Variables and Data Types</li>\r\n    <li>Conditional Statements</li>\r\n    <li>Loops (for and while)</li>\r\n    <li>Functions</li>\r\n    <li>Basic Input and Output</li>\r\n    <li>Lists</li>\r\n    <li>Dictionaries</li>\r\n    <li>File Handling</li>\r\n    <li>Functions with Parameters</li>\r\n    <li>Classes and Objects (OOP)</li>\r\n    <li>Error Handling (try/except)</li>\r\n    <li>Modules &amp; Packages</li>\r\n    <li>Database (SQLite + sqlite3)</li>\r\n    <li>Security (Validation, Password Hashing, Escaping)</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (keeps your existing dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>1. Variables and Data Types</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\">name = \"Alice\"\r\nage = 25\r\nis_student = True\r\npi = 3.14159\r\n\r\nprint(f\"{name} is {age} years old. Student? {is_student}\")\r\n</code></pre>\r\n</div>\r\n\r\n<h3>2. Conditional Statements</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\">score = 80\r\n\r\nif score &gt;= 90:\r\n    print(\"Excellent!\")\r\nelif score &gt;= 60:\r\n    print(\"Passed!\")\r\nelse:\r\n    print(\"Try again!\")\r\n</code></pre>\r\n</div>\r\n\r\n<h3>3. Loops (for / while)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\"># for loop\r\nfor i in range(1, 6):\r\n    print(\"Number:\", i)\r\n\r\n# while loop\r\ncount = 1\r\nwhile count &lt;= 3:\r\n    print(\"Count:\", count)\r\n    count += 1\r\n</code></pre>\r\n</div>\r\n\r\n<h3>4. Functions</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\">def greet(name: str) -&gt; str:\r\n    return f\"Hello, {name}!\"\r\n\r\nprint(greet(\"Alice\"))\r\n</code></pre>\r\n</div>\r\n\r\n<h3>5. Basic Input and Output</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\"># Using input() for simple CLI programs\r\nname = input(\"Enter your name: \").strip()\r\nprint(f\"Hello, {name}!\")\r\n</code></pre>\r\n</div>\r\n\r\n<h3>6. Lists</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\">fruits = [\"Apple\", \"Banana\", \"Orange\"]\r\n\r\nfor fruit in fruits:\r\n    print(fruit)\r\n\r\nfruits.append(\"Mango\")\r\nprint(\"After append:\", fruits)\r\n</code></pre>\r\n</div>\r\n\r\n<h3>7. Dictionaries</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\">user = {\r\n    \"name\": \"Alice\",\r\n    \"age\": 25,\r\n    \"email\": \"alice@example.com\"\r\n}\r\n\r\nprint(f\'{user[\"name\"]} is {user[\"age\"]} years old.\')\r\n</code></pre>\r\n</div>\r\n\r\n<h3>8. File Handling</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\"># Write to a file\r\nwith open(\"example.txt\", \"w\", encoding=\"utf-8\") as f:\r\n    f.write(\"Learning Python is fun!\")\r\n\r\n# Read from a file\r\nwith open(\"example.txt\", \"r\", encoding=\"utf-8\") as f:\r\n    content = f.read()\r\n    print(content)\r\n</code></pre>\r\n</div>\r\n\r\n<h3>9. Functions with Parameters (and defaults)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\">def power(base: float, exp: int = 2) -&gt; float:\r\n    \"\"\"Return base raised to exp (default: square).\"\"\"\r\n    return base ** exp\r\n\r\nprint(power(3))      # 9\r\nprint(power(2, 8))   # 256\r\n</code></pre>\r\n</div>\r\n\r\n<h3>10. Classes and Objects (OOP)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\">class User:\r\n    def __init__(self, name: str, email: str):\r\n        self.name = name\r\n        self.email = email\r\n\r\n    def display(self) -&gt; None:\r\n        print(f\"{self.name} ({self.email})\")\r\n\r\n    def __repr__(self) -&gt; str:\r\n        return f\"User(name={self.name!r}, email={self.email!r})\"\r\n\r\nuser = User(\"Alice\", \"alice@example.com\")\r\nuser.display()\r\nprint(user)  # uses __repr__\r\n</code></pre>\r\n</div>\r\n\r\n<h3>11. Error Handling (try / except / finally)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\">def safe_divide(a: float, b: float) -&gt; float | None:\r\n    try:\r\n        return a / b\r\n    except ZeroDivisionError:\r\n        print(\"Cannot divide by zero\")\r\n        return None\r\n    finally:\r\n        pass  # cleanup if needed\r\n\r\nprint(safe_divide(10, 2))\r\nprint(safe_divide(10, 0))\r\n</code></pre>\r\n</div>\r\n\r\n<h3>12. Modules &amp; Packages (import)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\"># math is a standard library module\r\nimport math\r\n\r\nprint(math.sqrt(16))\r\nprint(math.pi)\r\n</code></pre>\r\n</div>\r\n\r\n<h3>13. Database with SQLite (sqlite3)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\">import sqlite3\r\n\r\nconn = sqlite3.connect(\"example.db\")\r\nconn.execute(\"\"\"\r\nCREATE TABLE IF NOT EXISTS users (\r\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n    name TEXT NOT NULL,\r\n    email TEXT UNIQUE NOT NULL\r\n)\r\n\"\"\")\r\n\r\n# Insert (parameterized to avoid SQL injection)\r\nconn.execute(\"INSERT INTO users (name, email) VALUES (?, ?)\", (\"Alice\", \"alice@example.com\"))\r\nconn.commit()\r\n\r\n# Query\r\nfor row in conn.execute(\"SELECT id, name, email FROM users\"):\r\n    print(row)\r\n\r\nconn.close()\r\n</code></pre>\r\n</div>\r\n\r\n<h3>14. Security Basics (validation, hashing, escaping)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-python\">import hashlib, os, html\r\n\r\n# Password hashing with PBKDF2-HMAC (built-in)\r\ndef hash_password(password: str, *, salt: bytes | None = None) -&gt; tuple[bytes, bytes]:\r\n    salt = salt or os.urandom(16)\r\n    dk = hashlib.pbkdf2_hmac(\"sha256\", password.encode(\"utf-8\"), salt, 100_000)\r\n    return salt, dk\r\n\r\ndef verify_password(password: str, salt: bytes, digest: bytes) -&gt; bool:\r\n    return hashlib.pbkdf2_hmac(\"sha256\", password.encode(\"utf-8\"), salt, 100_000) == digest\r\n\r\nsalt, digest = hash_password(\"secret123\")\r\nprint(\"Valid?\", verify_password(\"secret123\", salt, digest))\r\n\r\n# Prevent HTML injection (XSS) when rendering user-provided text in HTML\r\nuser_input = \"&lt;script&gt;alert(\'hack\');&lt;/script&gt;\"\r\nsafe = html.escape(user_input, quote=True)\r\nprint(safe)  # &amp;lt;script&amp;gt;alert(&#x27;hack&#x27;);&amp;lt;/script&amp;gt;\r\n</code></pre>\r\n</div>\r\n\r\n<hr>\r\n<p>By following these lessons, you’ll progress from Python basics to advanced features like OOP, error handling, database interaction, and fundamental security practices. Keep practicing each example to build real projects step by step.</p>\r\n\r\n<!-- Prism.js core + Python language component -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js\"></script>\r\n\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n    position: relative;\r\n    margin: 1em 0;\r\n    background: #1e1e1e;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n.code-container pre {\r\n    margin: 0;\r\n    padding: 1em;\r\n    overflow-x: auto;\r\n    font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n}\r\n.copy-btn {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background: #007acc;\r\n    border: none;\r\n    color: #fff;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n}\r\n.copy-btn:hover {\r\n    background: #005f99;\r\n}\r\n</style>\r\n\r\n<script>\r\nfunction copyCode(button) {\r\n    const code = button.nextElementSibling.innerText;\r\n    navigator.clipboard.writeText(code).then(() => {\r\n        button.innerText = \"Copied!\";\r\n        setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n    });\r\n}\r\n</script>', 'Python Programming Lessons – Beginner to Advanced', '1757775761_python.png', 2, 1, 'published', '2025-09-13 14:52:30', '2025-09-13 15:02:41'),
(3, 'Java Programming Lessons', '<h2>Java Programming Lessons – Beginner to Advanced</h2>\r\n<p>Welcome to the Java programming lesson series! We’ll learn Java step by step — starting from the basics and moving toward advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n<ul>\r\n    <li>Variables and Data Types</li>\r\n    <li>Conditional Statements</li>\r\n    <li>Loops (for, while, for-each)</li>\r\n    <li>Methods (functions)</li>\r\n    <li>Basic Input and Output</li>\r\n    <li>Arrays</li>\r\n    <li>Lists (ArrayList)</li>\r\n    <li>Maps (HashMap)</li>\r\n    <li>File Handling</li>\r\n    <li>Methods with Parameters &amp; Overloading</li>\r\n    <li>Classes and Objects (OOP)</li>\r\n    <li>Exceptions (try/catch)</li>\r\n    <li>Packages &amp; Imports</li>\r\n    <li>Database (JDBC + PreparedStatement)</li>\r\n    <li>Security (Validation, Password Hashing, Escaping)</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (keeps your existing dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>1. Variables and Data Types</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">public class Main {\r\n    public static void main(String[] args) {\r\n        String name = \"Alice\";\r\n        int age = 25;\r\n        boolean isStudent = true;\r\n        double pi = 3.14159;\r\n\r\n        System.out.printf(\"%s is %d years old. Student? %b%n\", name, age, isStudent);\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>2. Conditional Statements</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">public class Main {\r\n    public static void main(String[] args) {\r\n        int score = 80;\r\n\r\n        if (score &gt;= 90) {\r\n            System.out.println(\"Excellent!\");\r\n        } else if (score &gt;= 60) {\r\n            System.out.println(\"Passed!\");\r\n        } else {\r\n            System.out.println(\"Try again!\");\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>3. Loops (for / while / for-each)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">import java.util.List;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        // for loop\r\n        for (int i = 1; i &lt;= 5; i++) {\r\n            System.out.println(\"Number: \" + i);\r\n        }\r\n\r\n        // while loop\r\n        int count = 1;\r\n        while (count &lt;= 3) {\r\n            System.out.println(\"Count: \" + count);\r\n            count++;\r\n        }\r\n\r\n        // for-each loop\r\n        List&lt;String&gt; colors = List.of(\"Red\", \"Green\", \"Blue\");\r\n        for (String c : colors) {\r\n            System.out.println(c);\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>4. Methods (Functions)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">public class Main {\r\n    static String greet(String name) {\r\n        return \"Hello, \" + name + \"!\";\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(greet(\"Alice\"));\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>5. Basic Input and Output (Scanner)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">import java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        try (Scanner sc = new Scanner(System.in)) {\r\n            System.out.print(\"Enter your name: \");\r\n            String name = sc.nextLine().trim();\r\n            System.out.println(\"Hello, \" + name + \"!\");\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>6. Arrays</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">import java.util.Arrays;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        String[] fruits = {\"Apple\", \"Banana\", \"Orange\"};\r\n        for (String f : fruits) {\r\n            System.out.println(f);\r\n        }\r\n        System.out.println(\"Length: \" + fruits.length);\r\n        System.out.println(\"As string: \" + Arrays.toString(fruits));\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>7. Lists (ArrayList)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">import java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        List&lt;String&gt; list = new ArrayList<>();\r\n        list.add(\"Java\");\r\n        list.add(\"Python\");\r\n        list.add(\"Go\");\r\n\r\n        list.forEach(System.out::println);\r\n        System.out.println(\"Contains \'Java\'? \" + list.contains(\"Java\"));\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>8. Maps (HashMap)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">import java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        Map&lt;String, Integer&gt; ages = new HashMap<>();\r\n        ages.put(\"Alice\", 25);\r\n        ages.put(\"Bob\", 30);\r\n\r\n        System.out.println(ages.get(\"Alice\"));\r\n        ages.forEach((k, v) -&gt; System.out.println(k + \" - \" + v));\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>9. File Handling (Java NIO)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">import java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.charset.StandardCharsets;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws Exception {\r\n        Path path = Path.of(\"example.txt\");\r\n\r\n        // Write\r\n        Files.writeString(path, \"Learning Java is fun!\", StandardCharsets.UTF_8);\r\n\r\n        // Read\r\n        String content = Files.readString(path, StandardCharsets.UTF_8);\r\n        System.out.println(content);\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>10. Methods with Parameters &amp; Overloading</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">public class MathUtil {\r\n    static int power(int base) {           // default square\r\n        return base * base;\r\n    }\r\n    static int power(int base, int exp) {  // overloaded\r\n        int result = 1;\r\n        for (int i = 0; i &lt; exp; i++) result *= base;\r\n        return result;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(power(3));      // 9\r\n        System.out.println(power(2, 8));   // 256\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>11. Classes and Objects (OOP)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">public class User {\r\n    private final String name;\r\n    private final String email;\r\n\r\n    public User(String name, String email) {\r\n        this.name = name;\r\n        this.email = email;\r\n    }\r\n\r\n    public void display() {\r\n        System.out.println(name + \" (\" + email + \")\");\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"User{name=\'\" + name + \"\', email=\'\" + email + \"\'}\";\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        User u = new User(\"Alice\", \"alice@example.com\");\r\n        u.display();\r\n        System.out.println(u);\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>12. Exceptions (try / catch / finally)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">public class SafeDivide {\r\n    static Double divide(double a, double b) {\r\n        try {\r\n            return a / b;\r\n        } catch (ArithmeticException ex) {\r\n            System.out.println(\"Error: \" + ex.getMessage());\r\n            return null;\r\n        } finally {\r\n            // cleanup if needed\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        System.out.println(divide(10, 2));\r\n        System.out.println(divide(10, 0));\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>13. Packages &amp; Imports</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">package com.example.app;\r\n\r\nimport java.time.LocalDateTime;\r\n\r\npublic class App {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Now: \" + LocalDateTime.now());\r\n    }\r\n}\r\n/*\r\nCompile:\r\n  javac -d out src/com/example/app/App.java\r\nRun:\r\n  java -cp out com.example.app.App\r\n*/\r\n</code></pre>\r\n</div>\r\n\r\n<h3>14. Database with JDBC (MySQL example)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">import java.sql.*;\r\n\r\npublic class JdbcExample {\r\n    public static void main(String[] args) {\r\n        String url = \"jdbc:mysql://localhost:3306/testdb?useSSL=false&amp;serverTimezone=UTC\";\r\n        String user = \"root\";\r\n        String pass = \"\";\r\n\r\n        String sql = \"SELECT id, name, email FROM users WHERE email = ?\";\r\n\r\n        try (Connection conn = DriverManager.getConnection(url, user, pass);\r\n             PreparedStatement ps = conn.prepareStatement(sql)) {\r\n\r\n            ps.setString(1, \"alice@example.com\");\r\n            try (ResultSet rs = ps.executeQuery()) {\r\n                while (rs.next()) {\r\n                    System.out.printf(\"%d - %s (%s)%n\",\r\n                            rs.getInt(\"id\"),\r\n                            rs.getString(\"name\"),\r\n                            rs.getString(\"email\"));\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>15. Security Basics (Validation, Password Hashing, Escaping)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-java\">import javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.spec.PBEKeySpec;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.security.SecureRandom;\r\nimport java.util.Base64;\r\n\r\npublic class SecurityDemo {\r\n    // PBKDF2 with HMAC-SHA256\r\n    static String hashPassword(char[] password, byte[] salt) throws Exception {\r\n        PBEKeySpec spec = new PBEKeySpec(password, salt, 100_000, 256);\r\n        SecretKeyFactory skf = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA256\");\r\n        byte[] hash = skf.generateSecret(spec).getEncoded();\r\n        return Base64.getEncoder().encodeToString(hash);\r\n    }\r\n\r\n    static boolean verify(char[] password, byte[] salt, String expectedBase64) throws Exception {\r\n        return expectedBase64.equals(hashPassword(password, salt));\r\n    }\r\n\r\n    // Very simple HTML escaping (for demo; consider Apache Commons Text in real apps)\r\n    static String escapeHtml(String s) {\r\n        return s.replace(\"&\", \"&amp;\").replace(\"&lt;\", \"&amp;lt;\")\r\n                .replace(\"&gt;\", \"&amp;gt;\").replace(\"\\\"\", \"&amp;quot;\")\r\n                .replace(\"\'\", \"&#39;\");\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        SecureRandom rnd = new SecureRandom();\r\n        byte[] salt = rnd.generateSeed(16);\r\n\r\n        String digest = hashPassword(\"secret123\".toCharArray(), salt);\r\n        System.out.println(\"Valid? \" + verify(\"secret123\".toCharArray(), salt, digest));\r\n\r\n        String userInput = \"&lt;script&gt;alert(\'xss\');&lt;/script&gt;\";\r\n        System.out.println(escapeHtml(userInput));\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<hr>\r\n<p>By following these lessons, you’ll progress from Java basics to advanced features like OOP, collections, exceptions, database interaction with JDBC, and fundamental security practices. Keep practicing each example to build real projects step by step.</p>\r\n\r\n<!-- Prism.js core + Java language component -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js\"></script>\r\n\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n    position: relative;\r\n    margin: 1em 0;\r\n    background: #1e1e1e;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n.code-container pre {\r\n    margin: 0;\r\n    padding: 1em;\r\n    overflow-x: auto;\r\n    font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n}\r\n.copy-btn {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background: #007acc;\r\n    border: none;\r\n    color: #fff;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n}\r\n.copy-btn:hover {\r\n    background: #005f99;\r\n}\r\n</style>\r\n\r\n<script>\r\nfunction copyCode(button) {\r\n    const code = button.nextElementSibling.innerText;\r\n    navigator.clipboard.writeText(code).then(() => {\r\n        button.innerText = \"Copied!\";\r\n        setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n    });\r\n}\r\n</script>', 'Java Programming Lessons – Beginner to Advanced', '1757776054_java.png', 3, 1, 'published', '2025-09-13 14:56:24', '2025-09-13 15:07:34'),
(4, 'JavaScript Programming Lessons', '<h2>JavaScript Programming Lessons – Beginner to Advanced</h2>\r\n<p>Welcome to the JavaScript programming lesson series! We’ll learn JavaScript step by step — starting from the basics and moving toward advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n<ul>\r\n    <li>Variables and Data Types</li>\r\n    <li>Conditional Statements</li>\r\n    <li>Loops (for, while, for...of)</li>\r\n    <li>Functions (declarations, arrow, defaults)</li>\r\n    <li>Basic Input and Output (prompt, DOM)</li>\r\n    <li>Arrays (map, filter, reduce)</li>\r\n    <li>Objects &amp; Sets</li>\r\n    <li>Maps (Map)</li>\r\n    <li>File Handling (FileReader)</li>\r\n    <li>Parameters (default, rest)</li>\r\n    <li>Classes and Objects (OOP)</li>\r\n    <li>Exceptions (try/catch/finally)</li>\r\n    <li>Modules &amp; Imports (ES Modules)</li>\r\n    <li>Client Storage / IndexedDB</li>\r\n    <li>Security (Validation, Hashing, Escaping)</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (keeps your existing dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>1. Variables and Data Types</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">const name = \"Alice\";\r\nlet age = 25;\r\nconst isStudent = true;\r\nconst pi = 3.14159;\r\n\r\nconsole.log(`${name} is ${age} years old. Student? ${isStudent}`);\r\nconsole.log(typeof name, typeof age, typeof isStudent, typeof pi);\r\n</code></pre>\r\n</div>\r\n\r\n<h3>2. Conditional Statements</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">const score = 80;\r\n\r\nif (score &gt;= 90) {\r\n  console.log(\"Excellent!\");\r\n} else if (score &gt;= 60) {\r\n  console.log(\"Passed!\");\r\n} else {\r\n  console.log(\"Try again!\");\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>3. Loops (for / while / for...of)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">// for loop\r\nfor (let i = 1; i &lt;= 5; i++) {\r\n  console.log(\"Number:\", i);\r\n}\r\n\r\n// while loop\r\nlet count = 1;\r\nwhile (count &lt;= 3) {\r\n  console.log(\"Count:\", count);\r\n  count++;\r\n}\r\n\r\n// for...of loop\r\nconst colors = [\"Red\", \"Green\", \"Blue\"];\r\nfor (const c of colors) {\r\n  console.log(c);\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>4. Functions (declarations, arrow, defaults)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">function greet(name = \"friend\") {\r\n  return `Hello, ${name}!`;\r\n}\r\n\r\nconst add = (a, b) =&gt; a + b;\r\n\r\nconsole.log(greet(\"Alice\"));\r\nconsole.log(\"2 + 3 =\", add(2, 3));\r\n</code></pre>\r\n</div>\r\n\r\n<h3>5. Basic Input and Output (prompt, DOM)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">// Console &amp; prompt (works in browsers)\r\nconst yourName = prompt(\"Enter your name:\")?.trim() || \"Guest\";\r\nconsole.log(`Hello, ${yourName}!`);\r\n\r\n// DOM output (requires an element with id=\"greeting\" on the page)\r\nconst el = document.getElementById(\"greeting\");\r\nif (el) el.textContent = `Welcome, ${yourName}!`; // safe text injection\r\n</code></pre>\r\n</div>\r\n\r\n<h3>6. Arrays (map, filter, reduce)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">const nums = [1, 2, 3, 4, 5];\r\n\r\nconst doubled = nums.map(n =&gt; n * 2);\r\nconst evens = nums.filter(n =&gt; n % 2 === 0);\r\nconst sum = nums.reduce((acc, n) =&gt; acc + n, 0);\r\n\r\nconsole.log({ doubled, evens, sum });\r\n</code></pre>\r\n</div>\r\n\r\n<h3>7. Objects &amp; Sets</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">const user = { name: \"Alice\", age: 25, email: \"alice@example.com\" };\r\nconsole.log(`${user.name} is ${user.age} years old.`);\r\n\r\n// Set (unique collection)\r\nconst langs = new Set([\"JS\", \"PHP\", \"JS\", \"Python\"]);\r\nconsole.log(langs.has(\"JS\")); // true\r\nconsole.log([...langs]);      // [\"JS\",\"PHP\",\"Python\"]\r\n</code></pre>\r\n</div>\r\n\r\n<h3>8. Maps (key/value store with any key type)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">const ages = new Map();\r\nages.set(\"Alice\", 25);\r\nages.set(\"Bob\", 30);\r\n\r\nconsole.log(ages.get(\"Alice\")); // 25\r\nages.forEach((v, k) =&gt; console.log(k, \"-\", v));\r\n</code></pre>\r\n</div>\r\n\r\n<h3>9. File Handling (Browser FileReader)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">// HTML:\r\n// &lt;input type=\"file\" id=\"fileInput\" accept=\".txt\"&gt;\r\n\r\nconst input = document.getElementById(\"fileInput\");\r\nif (input) {\r\n  input.addEventListener(\"change\", () =&gt; {\r\n    const file = input.files?.[0];\r\n    if (!file) return;\r\n    const reader = new FileReader();\r\n    reader.onload = () =&gt; {\r\n      console.log(\"File content:\", reader.result);\r\n    };\r\n    reader.readAsText(file, \"utf-8\");\r\n  });\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>10. Parameters (default, rest)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">function power(base, exp = 2) {\r\n  return base ** exp;\r\n}\r\n\r\nfunction sumAll(...nums) {\r\n  return nums.reduce((a, n) =&gt; a + n, 0);\r\n}\r\n\r\nconsole.log(power(3));     // 9\r\nconsole.log(power(2, 8));  // 256\r\nconsole.log(sumAll(1,2,3,4)); // 10\r\n</code></pre>\r\n</div>\r\n\r\n<h3>11. Classes and Objects (OOP)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">class User {\r\n  constructor(name, email) {\r\n    this.name = name;\r\n    this.email = email;\r\n  }\r\n  display() {\r\n    console.log(`${this.name} (${this.email})`);\r\n  }\r\n  toString() {\r\n    return `User{name=\'${this.name}\', email=\'${this.email}\'}`;\r\n  }\r\n}\r\n\r\nconst u = new User(\"Alice\", \"alice@example.com\");\r\nu.display();\r\nconsole.log(String(u));\r\n</code></pre>\r\n</div>\r\n\r\n<h3>12. Exceptions (try / catch / finally)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">function safeJsonParse(text) {\r\n  try {\r\n    return JSON.parse(text);\r\n  } catch (err) {\r\n    console.error(\"Invalid JSON:\", err.message);\r\n    return null;\r\n  } finally {\r\n    // cleanup if needed\r\n  }\r\n}\r\n\r\nconsole.log(safeJsonParse(\'{\"ok\":true}\'));\r\nconsole.log(safeJsonParse(\"{oops}\"));\r\n</code></pre>\r\n</div>\r\n\r\n<h3>13. Modules &amp; Imports (ES Modules)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">// math.js\r\nexport function square(x) { return x * x; }\r\nexport const PI = 3.14159;\r\n\r\n// app.js\r\nimport { square, PI } from \"./math.js\";\r\nconsole.log(\"Square(4) =\", square(4), \"PI =\", PI);\r\n\r\n// HTML usage:\r\n// &lt;script type=\"module\" src=\"app.js\"&gt;&lt;/script&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>14. Client Storage / IndexedDB (browser)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">function openDB() {\r\n  return new Promise((resolve, reject) =&gt; {\r\n    const req = indexedDB.open(\"exampleDB\", 1);\r\n    req.onupgradeneeded = () =&gt; {\r\n      const db = req.result;\r\n      db.createObjectStore(\"users\", { keyPath: \"id\", autoIncrement: true });\r\n    };\r\n    req.onsuccess = () =&gt; resolve(req.result);\r\n    req.onerror = () =&gt; reject(req.error);\r\n  });\r\n}\r\n\r\n(async () =&gt; {\r\n  const db = await openDB();\r\n  const tx = db.transaction(\"users\", \"readwrite\");\r\n  const store = tx.objectStore(\"users\");\r\n  await store.put({ name: \"Alice\", email: \"alice@example.com\" });\r\n  tx.oncomplete = () =&gt; console.log(\"User saved\");\r\n})();\r\n</code></pre>\r\n</div>\r\n\r\n<h3>15. Security Basics (Validation, Hashing, Escaping)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-javascript\">// 1) Simple validation example\r\nfunction isValidEmail(email) {\r\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\r\n}\r\nconsole.log(\"Valid?\", isValidEmail(\"alice@example.com\"));\r\n\r\n// 2) Hashing with Web Crypto API (SHA-256)\r\nasync function sha256(text) {\r\n  const enc = new TextEncoder();\r\n  const buf = await crypto.subtle.digest(\"SHA-256\", enc.encode(text));\r\n  // convert ArrayBuffer -&gt; hex\r\n  return [...new Uint8Array(buf)].map(b =&gt; b.toString(16).padStart(2, \"0\")).join(\"\");\r\n}\r\nsha256(\"secret123\").then(console.log);\r\n\r\n// 3) Escape/neutralize HTML by using textContent (avoid innerHTML with untrusted data)\r\nfunction renderSafe(id, userInput) {\r\n  const el = document.getElementById(id);\r\n  if (el) el.textContent = userInput; // safe\r\n}\r\n// HTML: &lt;div id=\"out\"&gt;&lt;/div&gt;\r\nrenderSafe(\"out\", \"&lt;script&gt;alert(\'xss\')&lt;/script&gt;\"); // renders as text, not HTML\r\n</code></pre>\r\n</div>\r\n\r\n<hr>\r\n<p>By following these lessons, you’ll progress from JavaScript basics to advanced features like ES modules, client-side storage (IndexedDB), robust error handling, and fundamental security practices. Keep practicing each example to build real projects step by step.</p>\r\n\r\n<!-- Prism.js core + JavaScript language component -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js\"></script>\r\n\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n    position: relative;\r\n    margin: 1em 0;\r\n    background: #1e1e1e;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n.code-container pre {\r\n    margin: 0;\r\n    padding: 1em;\r\n    overflow-x: auto;\r\n    font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n}\r\n.copy-btn {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background: #007acc;\r\n    border: none;\r\n    color: #fff;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n}\r\n.copy-btn:hover {\r\n    background: #005f99;\r\n}\r\n</style>\r\n\r\n<script>\r\nfunction copyCode(button) {\r\n    const code = button.nextElementSibling.innerText;\r\n    navigator.clipboard.writeText(code).then(() => {\r\n        button.innerText = \"Copied!\";\r\n        setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n    });\r\n}\r\n</script>', 'JavaScript Programming Lessons – Beginner to Advanced', '1757848394_JavaScript.png', 4, 1, 'published', '2025-09-13 20:22:14', '2025-09-14 11:13:14');
INSERT INTO `posts` (`id`, `title`, `content`, `excerpt`, `featured_image`, `category_id`, `author_id`, `status`, `created_at`, `updated_at`) VALUES
(5, 'C# Programming Lessons', '<h2>C# Programming Lessons – Beginner to Advanced (2025)</h2>\r\n<p>Welcome to the C# programming lesson series! We’ll learn modern C# step by step — from fundamentals to advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n<ul>\r\n    <li>Setup &amp; Hello World (.NET CLI)</li>\r\n    <li>Variables, Types &amp; Nullability</li>\r\n    <li>Conditional Statements</li>\r\n    <li>Loops (for, while, foreach)</li>\r\n    <li>Methods (parameters, defaults, named args)</li>\r\n    <li>Arrays</li>\r\n    <li>Collections: List&lt;T&gt;, Dictionary&lt;TKey,TValue&gt;, HashSet&lt;T&gt;</li>\r\n    <li>File Handling (System.IO)</li>\r\n    <li>Classes &amp; Objects (OOP), Properties, Constructors</li>\r\n    <li>Inheritance, Interfaces, Abstract Classes</li>\r\n    <li>Records, Structs, Enums</li>\r\n    <li>LINQ Basics (Select/Where/Group)</li>\r\n    <li>Exceptions (try/catch/finally)</li>\r\n    <li>Async/Await (Tasks, HttpClient)</li>\r\n    <li>Pattern Matching &amp; Switch Expressions</li>\r\n    <li>Generics &amp; Constraints</li>\r\n    <li>Delegates, Events &amp; Lambdas</li>\r\n    <li>Date/Time (DateTime, TimeSpan)</li>\r\n    <li>JSON (System.Text.Json)</li>\r\n    <li>Database (ADO.NET + parameterized queries)</li>\r\n    <li>Security (Validation, PBKDF2 Hashing, HTML Encoding)</li>\r\n    <li>Unit Testing (xUnit quick start)</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (keeps your existing dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>0. Setup &amp; Hello World (.NET CLI)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-none\"># Install .NET SDK from https://dotnet.microsoft.com/\r\n# Create and run a new console app\r\ndotnet new console -n HelloCSharp\r\ncd HelloCSharp\r\ndotnet run\r\n</code></pre>\r\n</div>\r\n\r\n<h3>1. Variables, Types &amp; Nullability</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">using System;\r\n\r\npublic class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        string name = \"Alice\";\r\n        int age = 25;\r\n        bool isStudent = true;\r\n        double pi = 3.14159;\r\n\r\n        // Nullable reference type (C# 8+ with &lt;Nullable&gt;enable&lt;/Nullable&gt; in .csproj)\r\n        string? nickname = null;\r\n\r\n        Console.WriteLine($\"{name} is {age}. Student? {isStudent}. Pi: {pi}\");\r\n        Console.WriteLine(nickname is null ? \"No nickname yet\" : nickname);\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>2. Conditional Statements</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">int score = 80;\r\n\r\nif (score &gt;= 90)\r\n    Console.WriteLine(\"Excellent!\");\r\nelse if (score &gt;= 60)\r\n    Console.WriteLine(\"Passed!\");\r\nelse\r\n    Console.WriteLine(\"Try again!\");\r\n</code></pre>\r\n</div>\r\n\r\n<h3>3. Loops (for / while / foreach)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">// for loop\r\nfor (int i = 1; i &lt;= 5; i++)\r\n    Console.WriteLine($\"Number: {i}\");\r\n\r\n// while loop\r\nint count = 1;\r\nwhile (count &lt;= 3)\r\n{\r\n    Console.WriteLine($\"Count: {count}\");\r\n    count++;\r\n}\r\n\r\n// foreach loop\r\nvar colors = new [] { \"Red\", \"Green\", \"Blue\" };\r\nforeach (var c in colors)\r\n    Console.WriteLine(c);\r\n</code></pre>\r\n</div>\r\n\r\n<h3>4. Methods (parameters, defaults, named args)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">static string Greet(string name = \"friend\") =&gt; $\"Hello, {name}!\";\r\n\r\nstatic int Add(int a, int b) =&gt; a + b;\r\n\r\nConsole.WriteLine(Greet(\"Alice\"));\r\nConsole.WriteLine(Add(b: 3, a: 2)); // named arguments\r\n</code></pre>\r\n</div>\r\n\r\n<h3>5. Arrays</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">string[] fruits = { \"Apple\", \"Banana\", \"Orange\" };\r\nConsole.WriteLine($\"Length: {fruits.Length}\");\r\nforeach (var f in fruits) Console.WriteLine(f);\r\n</code></pre>\r\n</div>\r\n\r\n<h3>6. Collections: List&lt;T&gt;, Dictionary&lt;TKey,TValue&gt;, HashSet&lt;T&gt;</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">using System.Collections.Generic;\r\n\r\nvar list = new List&lt;string&gt; { \"C#\", \"Java\", \"Python\" };\r\nlist.Add(\"Go\");\r\nlist.ForEach(Console.WriteLine);\r\n\r\nvar ages = new Dictionary&lt;string,int&gt; { [\"Alice\"] = 25, [\"Bob\"] = 30 };\r\nConsole.WriteLine(ages[\"Alice\"]);\r\n\r\nvar langs = new HashSet&lt;string&gt; { \"C#\", \"C#\", \"JS\" };\r\nConsole.WriteLine(string.Join(\", \", langs)); // unique values\r\n</code></pre>\r\n</div>\r\n\r\n<h3>7. File Handling (System.IO)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">using System.IO;\r\nusing System.Text;\r\n\r\n// Write text file\r\nawait File.WriteAllTextAsync(\"example.txt\", \"Learning C# is fun!\", Encoding.UTF8);\r\n\r\n// Read text file\r\nstring content = await File.ReadAllTextAsync(\"example.txt\", Encoding.UTF8);\r\nConsole.WriteLine(content);\r\n</code></pre>\r\n</div>\r\n\r\n<h3>8. Classes &amp; Objects (Properties, Constructors)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">public class User\r\n{\r\n    public string Name { get; init; }\r\n    public string Email { get; init; }\r\n\r\n    public User(string name, string email) =&gt; (Name, Email) = (name, email);\r\n\r\n    public void Display() =&gt; Console.WriteLine($\"{Name} ({Email})\");\r\n}\r\n\r\nvar u = new User(\"Alice\", \"alice@example.com\");\r\nu.Display();\r\n</code></pre>\r\n</div>\r\n\r\n<h3>9. Inheritance, Interfaces, Abstract Classes</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">public interface IShape { double Area(); }\r\n\r\npublic abstract class Shape : IShape\r\n{\r\n    public abstract double Area();\r\n}\r\n\r\npublic class Rectangle : Shape\r\n{\r\n    public double W { get; }\r\n    public double H { get; }\r\n    public Rectangle(double w, double h) { W = w; H = h; }\r\n    public override double Area() =&gt; W * H;\r\n}\r\n\r\nIShape s = new Rectangle(4, 5);\r\nConsole.WriteLine(s.Area());\r\n</code></pre>\r\n</div>\r\n\r\n<h3>10. Records, Structs, Enums</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">// Immutable data model\r\npublic record Person(string Name, string Email);\r\n\r\n// Value type (stack-allocated)\r\npublic readonly struct Point(double x, double y)\r\n{\r\n    public double X { get; } = x;\r\n    public double Y { get; } = y;\r\n}\r\n\r\n// Enum\r\npublic enum Status { New, Active, Suspended }\r\n\r\nvar p = new Person(\"Alice\", \"alice@example.com\");\r\nConsole.WriteLine(p with { Name = \"Alicia\" });\r\nConsole.WriteLine(new Point(3, 4));\r\nConsole.WriteLine(Status.Active);\r\n</code></pre>\r\n</div>\r\n\r\n<h3>11. LINQ Basics (Select / Where / Group)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">using System.Linq;\r\n\r\nvar nums = new[] { 1, 2, 3, 4, 5, 6 };\r\n\r\nvar squares = nums.Select(n =&gt; n * n);\r\nvar evens = nums.Where(n =&gt; n % 2 == 0);\r\nvar groups = nums.GroupBy(n =&gt; n % 2 == 0 ? \"even\" : \"odd\");\r\n\r\nConsole.WriteLine(string.Join(\", \", squares));\r\nConsole.WriteLine(string.Join(\", \", evens));\r\nforeach (var g in groups)\r\n    Console.WriteLine($\"{g.Key}: {string.Join(\", \", g)}\");\r\n</code></pre>\r\n</div>\r\n\r\n<h3>12. Exceptions (try / catch / finally)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">static double? SafeDivide(double a, double b)\r\n{\r\n    try { return a / b; }\r\n    catch (DivideByZeroException)\r\n    {\r\n        Console.WriteLine(\"Cannot divide by zero\");\r\n        return null;\r\n    }\r\n    finally { /* cleanup if needed */ }\r\n}\r\n\r\nConsole.WriteLine(SafeDivide(10, 2));\r\nConsole.WriteLine(SafeDivide(10, 0));\r\n</code></pre>\r\n</div>\r\n\r\n<h3>13. Async/Await (Tasks, HttpClient)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">using System.Net.Http;\r\n\r\nstatic async Task FetchAsync()\r\n{\r\n    using var http = new HttpClient();\r\n    string html = await http.GetStringAsync(\"https://example.com\");\r\n    Console.WriteLine(html.Length);\r\n}\r\n\r\nawait FetchAsync();\r\n</code></pre>\r\n</div>\r\n\r\n<h3>14. Pattern Matching &amp; Switch Expressions</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">static string Describe(object? x) =&gt; x switch\r\n{\r\n    null =&gt; \"null\",\r\n    int n when n &gt; 0 =&gt; \"positive int\",\r\n    int =&gt; \"int\",\r\n    string s when s.Length &gt; 5 =&gt; \"long string\",\r\n    string =&gt; \"string\",\r\n    _ =&gt; \"unknown\"\r\n};\r\n\r\nConsole.WriteLine(Describe(5));\r\nConsole.WriteLine(Describe(\"hello world\"));\r\nConsole.WriteLine(Describe(null));\r\n</code></pre>\r\n</div>\r\n\r\n<h3>15. Generics &amp; Constraints</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">static T Max&lt;T&gt;(T a, T b) where T : IComparable&lt;T&gt;\r\n    =&gt; a.CompareTo(b) &gt;= 0 ? a : b;\r\n\r\nConsole.WriteLine(Max(3, 7));\r\nConsole.WriteLine(Max(\"apple\", \"banana\"));\r\n</code></pre>\r\n</div>\r\n\r\n<h3>16. Delegates, Events &amp; Lambdas</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">public class Notifier\r\n{\r\n    public event Action&lt;string&gt;? OnNotify;\r\n    public void Notify(string msg) =&gt; OnNotify?.Invoke(msg);\r\n}\r\n\r\nvar n = new Notifier();\r\nn.OnNotify += msg =&gt; Console.WriteLine($\"Received: {msg}\");\r\nn.Notify(\"Hello events!\");\r\n</code></pre>\r\n</div>\r\n\r\n<h3>17. Date/Time (DateTime, TimeSpan)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">var now = DateTime.UtcNow;\r\nvar later = now.AddHours(3);\r\nTimeSpan diff = later - now;\r\n\r\nConsole.WriteLine(now.ToString(\"u\"));\r\nConsole.WriteLine($\"Hours apart: {diff.TotalHours}\");\r\n</code></pre>\r\n</div>\r\n\r\n<h3>18. JSON (System.Text.Json)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">using System.Text.Json;\r\n\r\nvar obj = new { Name = \"Alice\", Age = 25 };\r\nstring json = JsonSerializer.Serialize(obj);\r\nConsole.WriteLine(json);\r\n\r\nvar parsed = JsonSerializer.Deserialize&lt;Dictionary&lt;string,object&gt;&gt;(json);\r\nConsole.WriteLine(parsed![\"Name\"]);\r\n</code></pre>\r\n</div>\r\n\r\n<h3>19. Database (ADO.NET + parameterized queries)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">// Requires NuGet: Microsoft.Data.SqlClient\r\n// dotnet add package Microsoft.Data.SqlClient\r\n\r\nusing Microsoft.Data.SqlClient;\r\n\r\n// Adjust connection string for your SQL Server instance\r\nstring connStr = \"Server=localhost;Database=TestDb;Trusted_Connection=True;Encrypt=False;\";\r\n\r\nusing var conn = new SqlConnection(connStr);\r\nawait conn.OpenAsync();\r\n\r\nstring sql = \"SELECT Id, Name, Email FROM Users WHERE Email = @email\";\r\nusing var cmd = new SqlCommand(sql, conn);\r\ncmd.Parameters.AddWithValue(\"@email\", \"alice@example.com\");\r\n\r\nusing var reader = await cmd.ExecuteReaderAsync();\r\nwhile (await reader.ReadAsync())\r\n{\r\n    Console.WriteLine($\"{reader[\"Id\"]} - {reader[\"Name\"]} ({reader[\"Email\"]})\");\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>20. Security (Validation, PBKDF2 Hashing, HTML Encoding)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-csharp\">using System.Net;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\n\r\n// Email validation (simple)\r\nstatic bool IsValidEmail(string email)\r\n    =&gt; System.Text.RegularExpressions.Regex.IsMatch(\r\n        email, @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\");\r\n\r\n// PBKDF2 password hashing\r\nstatic (byte[] Salt, byte[] Hash) HashPassword(string password)\r\n{\r\n    byte[] salt = RandomNumberGenerator.GetBytes(16);\r\n    using var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100_000, HashAlgorithmName.SHA256);\r\n    return (salt, pbkdf2.GetBytes(32));\r\n}\r\n\r\nstatic bool Verify(string password, byte[] salt, byte[] expected)\r\n{\r\n    using var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100_000, HashAlgorithmName.SHA256);\r\n    return CryptographicOperations.FixedTimeEquals(expected, pbkdf2.GetBytes(32));\r\n}\r\n\r\n// HTML encode user input before rendering into HTML\r\nstring userInput = \"&lt;script&gt;alert(\'xss\')&lt;/script&gt;\";\r\nstring safe = WebUtility.HtmlEncode(userInput);\r\n\r\nConsole.WriteLine(IsValidEmail(\"alice@example.com\"));\r\nvar (salt, hash) = HashPassword(\"secret123\");\r\nConsole.WriteLine(Verify(\"secret123\", salt, hash));\r\nConsole.WriteLine(safe);\r\n</code></pre>\r\n</div>\r\n\r\n<h3>21. Unit Testing (xUnit quick start)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-none\"># In your solution root:\r\ndotnet new xunit -n Demo.Tests\r\ncd Demo.Tests\r\ndotnet add reference ../HelloCSharp/HelloCSharp.csproj\r\ndotnet test\r\n</code></pre>\r\n</div>\r\n\r\n<hr>\r\n<p>Keep practicing each example and evolve toward real projects (APIs with ASP.NET Core, background services, EF Core, etc.). This curriculum covers modern C# patterns you’ll use daily.</p>\r\n\r\n<!-- Prism.js core + C# language component -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-csharp.min.js\"></script>\r\n\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n    position: relative;\r\n    margin: 1em 0;\r\n    background: #1e1e1e;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n.code-container pre {\r\n    margin: 0;\r\n    padding: 1em;\r\n    overflow-x: auto;\r\n    font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n}\r\n.copy-btn {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background: #007acc;\r\n    border: none;\r\n    color: #fff;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n}\r\n.copy-btn:hover {\r\n    background: #005f99;\r\n}\r\n</style>\r\n\r\n<script>\r\nfunction copyCode(button) {\r\n    const code = button.nextElementSibling.innerText;\r\n    navigator.clipboard.writeText(code).then(() => {\r\n        button.innerText = \"Copied!\";\r\n        setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n    });\r\n}\r\n</script>', '# C# Programming Lessons – Beginner to Advanced', '1757848277_CS.png', 5, 1, 'published', '2025-09-13 20:25:30', '2025-09-14 11:11:17'),
(6, 'C++ Programming Lessons', '<h2>C++ Programming Lessons – Beginner to Advanced (2025)</h2>\r\n<p>Welcome to the modern C++ (C++20/C++23-friendly) lesson series! We’ll learn C++ step by step — from fundamentals to advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n<ul>\r\n  <li>Tooling &amp; Build (g++, clang++, MSVC)</li>\r\n  <li>Variables, Types, <code>auto</code>, <code>const</code>, References</li>\r\n  <li>Conditionals</li>\r\n  <li>Loops (for/while/range-for)</li>\r\n  <li>Functions (overload, default params)</li>\r\n  <li>Standard I/O (<code>iostream</code>)</li>\r\n  <li>Strings &amp; String Views</li>\r\n  <li>Arrays vs <code>std::vector</code></li>\r\n  <li>Associative Containers (<code>map</code>, <code>unordered_map</code>, <code>set</code>)</li>\r\n  <li>Algorithms &amp; Iterators</li>\r\n  <li>Lambdas &amp; Captures</li>\r\n  <li>Structures, Classes, Constructors, RAII</li>\r\n  <li>Smart Pointers (<code>unique_ptr</code>, <code>shared_ptr</code>)</li>\r\n  <li>Enums, <code>std::optional</code>, <code>std::variant</code></li>\r\n  <li>Exceptions (try/catch) &amp; Error Handling</li>\r\n  <li>File I/O (<code>fstream</code>)</li>\r\n  <li>Templates (function/class), <code>constexpr</code></li>\r\n  <li>Ranges (C++20)</li>\r\n  <li>Multithreading (<code>std::thread</code>, <code>async</code>)</li>\r\n  <li>Date/Time (<code>&lt;chrono&gt;</code>)</li>\r\n  <li>Modules (C++20) – intro</li>\r\n  <li>SQLite (C API) from C++ – intro</li>\r\n  <li>Security basics (validation, sanitization notes)</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (keeps your existing dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>Quick Reference Tables</h3>\r\n\r\n<!-- Table 1: Core Types -->\r\n<table style=\"width:100%; border-collapse:collapse; margin:1rem 0; font-size:14px;\">\r\n  <thead>\r\n    <tr style=\"text-align:left; border-bottom:1px solid #444;\">\r\n      <th>Category</th><th>Type</th><th>Example</th><th>Notes</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td>Integral</td><td><code>int</code>, <code>long long</code>, <code>std::int64_t</code></td><td><code>int x = 42;</code></td><td><code>sizeof</code> is implementation-defined</td></tr>\r\n    <tr><td>Floating</td><td><code>float</code>, <code>double</code></td><td><code>double pi = 3.14159;</code></td><td>Prefer <code>double</code> for precision</td></tr>\r\n    <tr><td>Char/Bool</td><td><code>char</code>, <code>bool</code></td><td><code>bool ok = true;</code></td><td>Char may be signed/unsigned</td></tr>\r\n    <tr><td>Text</td><td><code>std::string</code>, <code>std::string_view</code></td><td><code>std::string s=\"hi\";</code></td><td><code>string_view</code> is non-owning</td></tr>\r\n    <tr><td>Pointers/Refs</td><td><code>T*</code>, <code>T&amp;</code>, <code>T&amp;&amp;</code></td><td><code>int* p=&amp;x;</code></td><td>Prefer references; use pointers when nullable or re-seating</td></tr>\r\n  </tbody>\r\n</table>\r\n\r\n<!-- Table 2: Containers -->\r\n<table style=\"width:100%; border-collapse:collapse; margin:1rem 0; font-size:14px;\">\r\n  <thead>\r\n    <tr style=\"text-align:left; border-bottom:1px solid #444;\">\r\n      <th>Container</th><th>What for?</th><th>Highlights</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td><code>std::vector&lt;T&gt;</code></td><td>Dynamic array</td><td>Contiguous, fast push_back, random access</td></tr>\r\n    <tr><td><code>std::array&lt;T,N&gt;</code></td><td>Fixed-size array</td><td>Stack-allocated, size known at compile time</td></tr>\r\n    <tr><td><code>std::map&lt;K,V&gt;</code></td><td>Ordered key-value</td><td>Log-time ops, sorted</td></tr>\r\n    <tr><td><code>std::unordered_map&lt;K,V&gt;</code></td><td>Hash map</td><td>Average O(1), not ordered</td></tr>\r\n    <tr><td><code>std::set&lt;T&gt;</code></td><td>Unique ordered set</td><td>Balanced tree, sorted</td></tr>\r\n  </tbody>\r\n</table>\r\n\r\n<h3>0. Tooling &amp; Build</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-none\"># Linux/macOS (g++/clang++)\r\ng++ -std=c++20 -O2 -Wall -Wextra main.cpp -o app &amp;&amp; ./app\r\nclang++ -std=c++20 -O2 -Wall -Wextra main.cpp -o app &amp;&amp; ./app\r\n\r\n# Windows (MSVC Developer Command Prompt)\r\ncl /std:c++20 /W4 /O2 main.cpp &amp;&amp; main.exe\r\n</code></pre>\r\n</div>\r\n\r\n<h3>1. Variables, <code>auto</code>, <code>const</code>, References</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\nint main(){\r\n    std::string name = \"Alice\";\r\n    int age = 25;\r\n    const bool is_student = true;\r\n    auto pi = 3.14159;            // double\r\n    int x = 10; int&amp; ref = x;     // reference (alias)\r\n    std::cout &lt;&lt; name &lt;&lt; \" is \" &lt;&lt; age\r\n              &lt;&lt; \". Student? \" &lt;&lt; std::boolalpha &lt;&lt; is_student\r\n              &lt;&lt; \". pi = \" &lt;&lt; pi &lt;&lt; \"\\n\";\r\n    ref = 42; // changes x\r\n    std::cout &lt;&lt; \"x=\" &lt;&lt; x &lt;&lt; \"\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>2. Conditionals</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\nint main(){\r\n    int score = 80;\r\n    if (score &gt;= 90) std::cout &lt;&lt; \"Excellent!\\n\";\r\n    else if (score &gt;= 60) std::cout &lt;&lt; \"Passed!\\n\";\r\n    else std::cout &lt;&lt; \"Try again!\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>3. Loops (for / while / range-for)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\n#include &lt;vector&gt;\r\nint main(){\r\n    for (int i=1;i&lt;=5;++i) std::cout &lt;&lt; \"Number: \" &lt;&lt; i &lt;&lt; \"\\n\";\r\n    int count=1;\r\n    while (count&lt;=3){ std::cout &lt;&lt; \"Count: \" &lt;&lt; count++ &lt;&lt; \"\\n\"; }\r\n    std::vector&lt;std::string&gt; colors{\"Red\",\"Green\",\"Blue\"};\r\n    for (const auto&amp; c : colors) std::cout &lt;&lt; c &lt;&lt; \"\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>4. Functions (overload, defaults)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\nstd::string greet(const std::string&amp; name=\"friend\"){ return \"Hello, \" + name + \"!\"; }\r\nint power(int base){ return base*base; }\r\nint power(int base, int exp){ int r=1; while(exp--) r*=base; return r; }\r\nint main(){\r\n    std::cout &lt;&lt; greet(\"Alice\") &lt;&lt; \"\\n\";\r\n    std::cout &lt;&lt; power(3) &lt;&lt; \" \" &lt;&lt; power(2,8) &lt;&lt; \"\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>5. Standard I/O (<code>&lt;iostream&gt;</code>)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\nint main(){\r\n    std::cout &lt;&lt; \"Enter your name: \";\r\n    std::string name; std::getline(std::cin, name);\r\n    std::cout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; \"!\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>6. Strings &amp; String Views</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\n#include &lt;string_view&gt;\r\nvoid print_view(std::string_view sv){ std::cout &lt;&lt; sv &lt;&lt; \"\\n\"; }\r\nint main(){\r\n    std::string s = \"Learning C++ is fun!\";\r\n    print_view(s);                 // no copy\r\n    print_view(\"Hello\");           // string literal\r\n    std::cout &lt;&lt; \"size: \" &lt;&lt; s.size() &lt;&lt; \"\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>7. Arrays vs <code>std::vector</code></h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\n#include &lt;array&gt;\r\n#include &lt;vector&gt;\r\nint main(){\r\n    std::array&lt;int,3&gt; a{1,2,3};\r\n    std::vector&lt;int&gt; v{1,2,3};\r\n    v.push_back(4);\r\n    for (int x : a) std::cout &lt;&lt; x &lt;&lt; \" \";\r\n    std::cout &lt;&lt; \"\\n\";\r\n    for (int x : v) std::cout &lt;&lt; x &lt;&lt; \" \";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>8. Maps, Unordered Maps, Sets</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\n#include &lt;map&gt;\r\n#include &lt;unordered_map&gt;\r\n#include &lt;set&gt;\r\nint main(){\r\n    std::map&lt;std::string,int&gt; ordered{{\"Alice\",25},{\"Bob\",30}};\r\n    std::unordered_map&lt;std::string,int&gt; umap{{\"A\",1},{\"B\",2}};\r\n    std::set&lt;int&gt; s{3,1,2,3};\r\n    std::cout &lt;&lt; ordered[\"Alice\"] &lt;&lt; \"\\n\";\r\n    std::cout &lt;&lt; umap[\"B\"] &lt;&lt; \"\\n\";\r\n    for (int x: s) std::cout &lt;&lt; x &lt;&lt; \" \"; // 1 2 3\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>9. Algorithms &amp; Iterators</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;algorithm&gt;\r\n#include &lt;iostream&gt;\r\n#include &lt;vector&gt;\r\nint main(){\r\n    std::vector&lt;int&gt; v{5,1,4,2,3};\r\n    std::sort(v.begin(), v.end());\r\n    auto it = std::find(v.begin(), v.end(), 3);\r\n    if (it!=v.end()) std::cout &lt;&lt; \"Found 3 at index \" &lt;&lt; (it - v.begin()) &lt;&lt; \"\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>10. Lambdas &amp; Captures</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\n#include &lt;vector&gt;\r\n#include &lt;algorithm&gt;\r\nint main(){\r\n    std::vector&lt;int&gt; v{1,2,3,4,5};\r\n    int k = 3;\r\n    v.erase(std::remove_if(v.begin(), v.end(), [k](int x){ return x&lt;=k; }), v.end());\r\n    for (int x: v) std::cout &lt;&lt; x &lt;&lt; \" \"; // 4 5\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>11. Structs, Classes, RAII</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\n#include &lt;string&gt;\r\nstruct User{\r\n    std::string name;\r\n    std::string email;\r\n    User(std::string n, std::string e): name(std::move(n)), email(std::move(e)) {}\r\n    ~User(){ /* destructor (RAII cleanup if needed) */ }\r\n    void display() const { std::cout &lt;&lt; name &lt;&lt; \" (\" &lt;&lt; email &lt;&lt; \")\\n\"; }\r\n};\r\nint main(){\r\n    User u{\"Alice\",\"alice@example.com\"};\r\n    u.display();\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>12. Smart Pointers</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;memory&gt;\r\n#include &lt;iostream&gt;\r\nstruct Node{ int v; explicit Node(int x):v(x){} };\r\nint main(){\r\n    auto p = std::make_unique&lt;Node&gt;(10);      // unique ownership\r\n    auto q = std::make_shared&lt;Node&gt;(20);      // shared ownership\r\n    auto r = q;                                // increases ref count\r\n    std::cout &lt;&lt; p-&gt;v &lt;&lt; \" \" &lt;&lt; r-&gt;v &lt;&lt; \"\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>13. Enums, <code>std::optional</code>, <code>std::variant</code></h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\n#include &lt;optional&gt;\r\n#include &lt;variant&gt;\r\nenum class Status{ New, Active, Suspended };\r\nstd::optional&lt;int&gt; maybe_id(bool ok){ return ok? std::optional{42} : std::nullopt; }\r\nint main(){\r\n    auto st = Status::Active;\r\n    auto id = maybe_id(true);\r\n    std::variant&lt;int,std::string&gt; v = \"hello\";\r\n    if (id) std::cout &lt;&lt; *id &lt;&lt; \"\\n\";\r\n    std::cout &lt;&lt; (st==Status::Active ? \"active\" : \"other\") &lt;&lt; \"\\n\";\r\n    std::cout &lt;&lt; std::get&lt;std::string&gt;(v) &lt;&lt; \"\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>14. Exceptions &amp; Error Handling</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;stdexcept&gt;\r\n#include &lt;iostream&gt;\r\ndouble safe_div(double a, double b){\r\n    if (b==0.0) throw std::runtime_error(\"divide by zero\");\r\n    return a/b;\r\n}\r\nint main(){\r\n    try{\r\n        std::cout &lt;&lt; safe_div(10,2) &lt;&lt; \"\\n\";\r\n        std::cout &lt;&lt; safe_div(10,0) &lt;&lt; \"\\n\";\r\n    }catch(const std::exception&amp; e){\r\n        std::cerr &lt;&lt; \"Error: \" &lt;&lt; e.what() &lt;&lt; \"\\n\";\r\n    }\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>15. File I/O (<code>&lt;fstream&gt;</code>)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;fstream&gt;\r\n#include &lt;string&gt;\r\n#include &lt;iostream&gt;\r\nint main(){\r\n    { std::ofstream out(\"example.txt\"); out &lt;&lt; \"Learning C++ is fun!\"; }\r\n    std::ifstream in(\"example.txt\");\r\n    std::string content((std::istreambuf_iterator&lt;char&gt;(in)), {});\r\n    std::cout &lt;&lt; content &lt;&lt; \"\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>16. Templates &amp; <code>constexpr</code></h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;iostream&gt;\r\ntemplate&lt;typename T&gt; T max_of(T a, T b){ return (a&lt;b)?b:a; }\r\nconstexpr int square(int x){ return x*x; }\r\nint main(){\r\n    std::cout &lt;&lt; max_of(3,7) &lt;&lt; \"\\n\";\r\n    static_assert(square(4)==16);\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>17. Ranges (C++20)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;vector&gt;\r\n#include &lt;ranges&gt;\r\n#include &lt;iostream&gt;\r\nint main(){\r\n    std::vector&lt;int&gt; v{1,2,3,4,5,6};\r\n    auto view = v | std::views::filter([](int x){return x%2==0;})\r\n                  | std::views::transform([](int x){return x*x;});\r\n    for (int x : view) std::cout &lt;&lt; x &lt;&lt; \" \"; // 4 16 36\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>18. Multithreading (<code>std::thread</code>, <code>async</code>)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;thread&gt;\r\n#include &lt;future&gt;\r\n#include &lt;iostream&gt;\r\nvoid work(int id){ std::cout &lt;&lt; \"Thread \" &lt;&lt; id &lt;&lt; \"\\n\"; }\r\nint heavy(){ int s=0; for(int i=0;i&lt;1\'000\'000;++i) s+=i; return s; }\r\nint main(){\r\n    std::thread t1(work,1), t2(work,2);\r\n    t1.join(); t2.join();\r\n    auto fut = std::async(std::launch::async, heavy);\r\n    std::cout &lt;&lt; \"heavy=\" &lt;&lt; fut.get() &lt;&lt; \"\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>19. Date/Time (<code>&lt;chrono&gt;</code>)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;chrono&gt;\r\n#include &lt;iostream&gt;\r\nint main(){\r\n    using namespace std::chrono;\r\n    auto start = steady_clock::now();\r\n    // ... work ...\r\n    auto ms = duration_cast&lt;milliseconds&gt;(steady_clock::now()-start);\r\n    std::cout &lt;&lt; \"Elapsed: \" &lt;&lt; ms.count() &lt;&lt; \"ms\\n\";\r\n}\r\n</code></pre>\r\n</div>\r\n\r\n<h3>20. Modules (C++20) – Intro</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">// math.ixx (module interface)\r\nexport module math;\r\nexport int square(int x){ return x*x; }\r\n\r\n// main.cpp\r\nimport math;\r\n#include &lt;iostream&gt;\r\nint main(){ std::cout &lt;&lt; square(5) &lt;&lt; \"\\n\"; }\r\n\r\n// Example build (compiler support required):\r\n// g++ -std=c++20 -fmodules-ts -x c++-system-header iostream\r\n// g++ -std=c++20 -fmodules-ts -c math.ixx -o math.o\r\n// g++ -std=c++20 -fmodules-ts main.cpp math.o -o app\r\n</code></pre>\r\n</div>\r\n\r\n<h3>21. SQLite (C API) from C++ – Intro</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-cpp\">#include &lt;sqlite3.h&gt;\r\n#include &lt;iostream&gt;\r\nint main(){\r\n    sqlite3* db=nullptr;\r\n    if (sqlite3_open(\"example.db\", &amp;db)!=SQLITE_OK){ std::cerr &lt;&lt; \"open fail\\n\"; return 1; }\r\n    const char* sql = \"CREATE TABLE IF NOT EXISTS users(id INTEGER PRIMARY KEY, name TEXT);\"\r\n                      \"INSERT INTO users(name) VALUES(\'Alice\');\";\r\n    char* err=nullptr;\r\n    if (sqlite3_exec(db, sql, nullptr, nullptr, &amp;err)!=SQLITE_OK){\r\n        std::cerr &lt;&lt; \"SQL error: \" &lt;&lt; err &lt;&lt; \"\\n\"; sqlite3_free(err);\r\n    }\r\n    sqlite3_close(db);\r\n}\r\n// Build example (Linux/macOS): g++ main.cpp -lsqlite3 -std=c++20 -O2 -o app\r\n</code></pre>\r\n</div>\r\n\r\n<h3>22. Security Basics (Notes)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-none\">• Prefer std::string / string_view; validate inputs (length, charset).\r\n• Never use std::hash for passwords; it\'s not cryptographic.\r\n• Use vetted crypto libs (libsodium, OpenSSL) for hashing/KDFs (e.g., Argon2, PBKDF2).\r\n• Always bounds-check and avoid raw new/delete; use RAII &amp; smart pointers.\r\n• When rendering to HTML, escape special chars (&amp; &lt; &gt; \" \').\r\n• For SQL, use parameterized queries (prepared statements) in your DB library.\r\n</code></pre>\r\n</div>\r\n\r\n<hr>\r\n<p>Keep practicing each example and build real projects: CLI tools, file processors, data structures, and services. This curriculum uses modern C++ techniques you’ll rely on daily.</p>\r\n\r\n<!-- Prism.js core + languages for C++ -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-clike.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-cpp.min.js\"></script>\r\n\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n  position: relative;\r\n  margin: 1em 0;\r\n  background: #1e1e1e;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n.code-container pre {\r\n  margin: 0;\r\n  padding: 1em;\r\n  overflow-x: auto;\r\n  font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n.copy-btn {\r\n  position: absolute;\r\n  top: 8px;\r\n  right: 8px;\r\n  background: #007acc;\r\n  border: none;\r\n  color: #fff;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n.copy-btn:hover { background: #005f99; }\r\ntable th, table td { padding: 6px 8px; }\r\n</style>\r\n\r\n<script>\r\nfunction copyCode(button) {\r\n  const code = button.nextElementSibling.innerText;\r\n  navigator.clipboard.writeText(code).then(() => {\r\n    button.innerText = \"Copied!\";\r\n    setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n  });\r\n}\r\n</script>', 'C++ Programming Lessons – Beginner to Advanced (2025)', '1757847923_C++.png', 6, 1, 'published', '2025-09-13 20:42:15', '2025-09-14 11:05:23');
INSERT INTO `posts` (`id`, `title`, `content`, `excerpt`, `featured_image`, `category_id`, `author_id`, `status`, `created_at`, `updated_at`) VALUES
(7, 'C Programming Lessons', '<h2>C Programming Lessons – Beginner to Advanced (2025)</h2>\r\n<p>Welcome to the modern C lesson series! We’ll learn C step by step — from fundamentals to advanced concepts, with extra safety notes for real-world C. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n<ul>\r\n  <li>Tooling &amp; Build (gcc/clang/MSVC, Make, CMake)</li>\r\n  <li>C Program Anatomy &amp; The Compilation Pipeline</li>\r\n  <li>Data Types, Sizes, Ranges, <code>typedef</code></li>\r\n  <li>Operators &amp; Expressions (incl. Bitwise)</li>\r\n  <li>Control Flow (if/switch)</li>\r\n  <li>Loops (for/while/do-while) &amp; <code>break</code>/<code>continue</code></li>\r\n  <li>Functions, Prototypes &amp; Header Files</li>\r\n  <li>Arrays, Pointer Basics, Pointer Arithmetic</li>\r\n  <li>Strings &amp; Safe I/O (<code>fgets</code>, <code>snprintf</code>)</li>\r\n  <li>Dynamic Memory (<code>malloc</code>/<code>calloc</code>/<code>realloc</code>/<code>free</code>)</li>\r\n  <li>Structs, Enums, Unions, Bit-fields</li>\r\n  <li>Const-correctness, <code>restrict</code>, <code>volatile</code></li>\r\n  <li>Storage Duration &amp; Linkage (<code>auto</code>, <code>static</code>, <code>extern</code>)</li>\r\n  <li>File I/O (<code>FILE*</code>, text &amp; binary)</li>\r\n  <li>Error Handling (<code>errno</code>, return codes), Assertions</li>\r\n  <li>Function Pointers, Callbacks (<code>qsort</code>)</li>\r\n  <li>Preprocessor &amp; Macros (include guards)</li>\r\n  <li>Variadic Functions (<code>&lt;stdarg.h&gt;</code>)</li>\r\n  <li>Date/Time (<code>&lt;time.h&gt;</code>)</li>\r\n  <li>Small Project Layout (multiple translation units)</li>\r\n  <li>Testing (assert mini-tests), Defensive C &amp; UB pitfall notes</li>\r\n  <li>Optional: POSIX threads intro (Linux/macOS)</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>Quick Reference Tables</h3>\r\n\r\n<!-- Table: Common Integer Types (implementation-defined sizes) -->\r\n<table style=\"width:100%; border-collapse:collapse; margin:1rem 0; font-size:14px;\">\r\n  <thead>\r\n    <tr style=\"text-align:left; border-bottom:1px solid #444;\">\r\n      <th>Type</th><th>Typical Size (LP64*)</th><th>Range (signed)</th><th>Notes</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td><code>char</code></td><td>1 byte (8 bits)</td><td>-128..127 or 0..255</td><td><em>signedness of plain char is implementation-defined</em></td></tr>\r\n    <tr><td><code>short</code></td><td>2 bytes</td><td>≈ -32k..32k</td><td>use <code>INT16_C</code> / <code>int16_t</code> for fixed width</td></tr>\r\n    <tr><td><code>int</code></td><td>4 bytes</td><td>≈ -2.1e9..2.1e9</td><td></td></tr>\r\n    <tr><td><code>long</code></td><td>8 bytes</td><td>≈ ±9e18</td><td>on Windows (LLP64) <code>long</code> is 4 bytes</td></tr>\r\n    <tr><td><code>long long</code></td><td>8 bytes</td><td>≈ ±9e18</td><td></td></tr>\r\n    <tr><td><code>size_t</code></td><td>8 bytes (LP64)</td><td>0..(max)</td><td>unsigned; use <code>%zu</code> for printf</td></tr>\r\n    <tr><td><code>int32_t</code>, <code>uint64_t</code>...</td><td>fixed</td><td>exact-width</td><td>from <code>&lt;stdint.h&gt;</code></td></tr>\r\n  </tbody>\r\n</table>\r\n<p style=\"font-size:12px;opacity:.85;\">*LP64: Linux/macOS; LLP64: Windows. Always check with <code>sizeof</code>.</p>\r\n\r\n<!-- Table: printf / scanf format specifiers -->\r\n<table style=\"width:100%; border-collapse:collapse; margin:1rem 0; font-size:14px;\">\r\n  <thead>\r\n    <tr style=\"text-align:left; border-bottom:1px solid #444;\">\r\n      <th>Type</th><th><code>printf</code></th><th><code>scanf</code></th><th>Example</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr><td><code>int</code></td><td><code>%d</code></td><td><code>%d</code></td><td><code>printf(\"%d\", i);</code></td></tr>\r\n    <tr><td><code>unsigned</code></td><td><code>%u</code>, <code>%x</code></td><td><code>%u</code>, <code>%x</code></td><td></td></tr>\r\n    <tr><td><code>long</code></td><td><code>%ld</code></td><td><code>%ld</code></td><td></td></tr>\r\n    <tr><td><code>long long</code></td><td><code>%lld</code></td><td><code>%lld</code></td><td></td></tr>\r\n    <tr><td><code>size_t</code></td><td><code>%zu</code></td><td><code>%zu</code></td><td></td></tr>\r\n    <tr><td><code>double</code></td><td><code>%f</code>/<code>%g</code></td><td><code>%lf</code></td><td><code>scanf(\"%lf\",&amp;d);</code></td></tr>\r\n    <tr><td><code>char</code></td><td><code>%c</code></td><td><code>%c</code></td><td></td></tr>\r\n    <tr><td><code>char*</code> (C-string)</td><td><code>%s</code></td><td><code>%Ns</code> (limit!)</td><td><code>scanf(\"%99s\", buf);</code></td></tr>\r\n    <tr><td>pointer</td><td><code>%p</code></td><td>n/a</td><td></td></tr>\r\n  </tbody>\r\n</table>\r\n\r\n<h3>0) Tooling &amp; Build</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-none\"># Linux/macOS (gcc/clang)\r\ngcc -std=c17 -Wall -Wextra -O2 main.c -o app &amp;&amp; ./app\r\nclang -std=c17 -Wall -Wextra -O2 main.c -o app &amp;&amp; ./app\r\n\r\n# Windows (MSVC Developer Prompt)\r\ncl /std:c17 /W4 /O2 main.c &amp;&amp; main.exe\r\n\r\n# Minimal Makefile\r\n# -------------\r\n# CC=gcc\r\n# CFLAGS=-std=c17 -Wall -Wextra -O2\r\n# app: main.o util.o\r\n#   $(CC) $(CFLAGS) $^ -o $@\r\n# %.o: %.c\r\n#   $(CC) $(CFLAGS) -c $&lt; -o $@\r\n# clean:\r\n#   rm -f *.o app\r\n\r\n# Minimal CMakeLists.txt\r\n# ----------------------\r\n# cmake_minimum_required(VERSION 3.20)\r\n# project(c_basics C)\r\n# set(CMAKE_C_STANDARD 17)\r\n# add_executable(app main.c util.c)</code></pre>\r\n</div>\r\n\r\n<h3>1) Program Anatomy &amp; Compilation Pipeline</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\n/* Preprocessing -&gt; Compilation -&gt; Assembly -&gt; Linking */\r\nint main(void) {\r\n    puts(\"Hello, C!\");\r\n    return 0; /* status code to OS */\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>2) Data Types, Sizes, Ranges, <code>typedef</code></h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\n#include &lt;stdint.h&gt;\r\n#include &lt;inttypes.h&gt; /* PRIu64, etc */\r\ntypedef unsigned long long u64; /* alias */\r\nint main(void){\r\n    printf(\"sizeof(int)=%zu, sizeof(long)=%zu, sizeof(void*)=%zu\\n\",\r\n           sizeof(int), sizeof(long), sizeof(void*));\r\n    uint64_t big = 1234567890123ULL;\r\n    printf(\"big=%\" PRIu64 \"\\n\", big);\r\n    return 0;\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>3) Operators &amp; Expressions (incl. Bitwise)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\nint main(void){\r\n    unsigned x = 0b1010u; /* 10 */\r\n    unsigned y = 0b1100u; /* 12 */\r\n    printf(\"&amp;=%u |%u ^%u ~%u &lt;&lt;1=%u &gt;&gt;1=%u\\n\",\r\n           x&amp;y, x|y, x^y, ~x, x&lt;&lt;1, x&gt;&gt;1);\r\n    return 0;\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>4) Control Flow (if/switch)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\nint main(void){\r\n    int score = 80;\r\n    if (score &gt;= 90) puts(\"Excellent!\");\r\n    else if (score &gt;= 60) puts(\"Passed!\");\r\n    else puts(\"Try again!\");\r\n\r\n    switch(score/10){\r\n        case 10: case 9: puts(\"A\"); break;\r\n        case 8: case 7: case 6: puts(\"Pass\"); break;\r\n        default: puts(\"F\");\r\n    }\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>5) Loops (for/while/do-while)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\nint main(void){\r\n    for(int i=1;i&lt;=5;i++) printf(\"i=%d\\n\", i);\r\n    int c=1; while(c&lt;=3){ printf(\"c=%d\\n\", c++); }\r\n    int n=0; do { printf(\"n=%d\\n\", n++); } while(n&lt;2);\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>6) Functions, Prototypes &amp; Headers</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">/* greet.h */\r\n#ifndef GREET_H\r\n#define GREET_H\r\nvoid greet(const char *name);\r\n#endif\r\n\r\n/* greet.c */\r\n#include &lt;stdio.h&gt;\r\n#include \"greet.h\"\r\nvoid greet(const char *name){ printf(\"Hello, %s!\\n\", name); }\r\n\r\n/* main.c */\r\n#include \"greet.h\"\r\nint main(void){ greet(\"Alice\"); return 0; }</code></pre>\r\n</div>\r\n\r\n<h3>7) Arrays, Pointer Basics, Pointer Arithmetic</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\nint main(void){\r\n    int a[4] = {1,2,3,4};\r\n    int *p = a;            /* points to a[0] */\r\n    printf(\"%d %d %d\\n\", a[0], *(p+1), p[2]); /* 1 2 3 */\r\n    for(size_t i=0;i&lt;4;i++) printf(\"%d \", *(p+i));\r\n    puts(\"\");\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>8) Strings &amp; Safe I/O (<code>fgets</code>, <code>snprintf</code>)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\n#include &lt;string.h&gt;\r\nint main(void){\r\n    char name[100];\r\n    printf(\"Enter your name: \");\r\n    if (fgets(name, sizeof name, stdin)) {\r\n        name[strcspn(name, \"\\n\")] = \'\\0\'; /* strip newline */\r\n        char msg[128];\r\n        snprintf(msg, sizeof msg, \"Hello, %s!\", name);\r\n        puts(msg);\r\n    }\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>9) Dynamic Memory (<code>malloc</code>/<code>calloc</code>/<code>realloc</code>/<code>free</code>)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\nint main(void){\r\n    size_t n = 5;\r\n    int *arr = calloc(n, sizeof *arr); /* zero-initialized */\r\n    if(!arr) return 1;\r\n    for(size_t i=0;i&lt;n;i++) arr[i] = (int)(i+1);\r\n    n = 8;\r\n    int *tmp = realloc(arr, n * sizeof *arr);\r\n    if(!tmp){ free(arr); return 1; }\r\n    arr = tmp;\r\n    for(size_t i=5;i&lt;n;i++) arr[i] = (int)(i+1);\r\n    for(size_t i=0;i&lt;n;i++) printf(\"%d \", arr[i]);\r\n    puts(\"\");\r\n    free(arr);\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>10) Structs, Enums, Unions, Bit-fields</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\n#include &lt;stdint.h&gt;\r\ntypedef enum { ROLE_STUDENT, ROLE_STAFF } Role;\r\ntypedef struct { unsigned r:5, g:6, b:5; } RGB565; /* bit-field */\r\ntypedef union { float f; uint32_t u; } FU;\r\n\r\ntypedef struct {\r\n    char name[32];\r\n    Role role;\r\n} User;\r\n\r\nint main(void){\r\n    User u = {\"Alice\", ROLE_STUDENT};\r\n    RGB565 c = { .r=31, .g=0, .b=0 }; /* red */\r\n    FU x; x.f = 1.0f;\r\n    printf(\"%s (%d), color r=%u g=%u b=%u, float bits=%08x\\n\",\r\n           u.name, (int)u.role, c.r, c.g, c.b, x.u);\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>11) Const, <code>restrict</code>, <code>volatile</code></h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">/* const: data read-only via this pointer; restrict: no aliasing (optimizer hint) */\r\nvoid add_arrays(size_t n, const int * restrict a, const int * restrict b, int * restrict out){\r\n    for(size_t i=0;i&lt;n;i++) out[i] = a[i] + b[i];\r\n}\r\n/* volatile: value may change unexpectedly (HW regs, signal flags) */\r\nvolatile int flag = 0;</code></pre>\r\n</div>\r\n\r\n<h3>12) Storage Duration &amp; Linkage (<code>auto</code>, <code>static</code>, <code>extern</code>)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">/* counters.c */\r\nstatic int internal_count;   /* internal linkage (file-local) */\r\nint global_count;            /* external linkage */\r\nvoid bump(void){ internal_count++; global_count++; }\r\n\r\n/* main.c */\r\n#include &lt;stdio.h&gt;\r\nvoid bump(void);\r\nextern int global_count;     /* declare defined elsewhere */\r\nint main(void){ bump(); bump(); printf(\"%d\\n\", global_count); }</code></pre>\r\n</div>\r\n\r\n<h3>13) File I/O (text &amp; binary)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\ntypedef struct { int id; double gpa; } Student;\r\nint main(void){\r\n    /* text */\r\n    FILE *t = fopen(\"data.txt\",\"w\"); if(!t) return 1;\r\n    fprintf(t, \"Hello file\\n\"); fclose(t);\r\n\r\n    /* binary */\r\n    Student s = {42, 3.8};\r\n    FILE *b = fopen(\"stud.bin\",\"wb\"); if(!b) return 1;\r\n    fwrite(&amp;s, sizeof s, 1, b); fclose(b);\r\n\r\n    /* read back */\r\n    b = fopen(\"stud.bin\",\"rb\"); if(!b) return 1;\r\n    Student r; fread(&amp;r, sizeof r, 1, b); fclose(b);\r\n    printf(\"Student: id=%d gpa=%.2f\\n\", r.id, r.gpa);\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>14) Error Handling (<code>errno</code>, return codes), Assertions</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\n#include &lt;errno.h&gt;\r\n#include &lt;string.h&gt;\r\n#include &lt;assert.h&gt;\r\nint main(void){\r\n    FILE *f = fopen(\"nope.txt\",\"r\");\r\n    if(!f){\r\n        fprintf(stderr, \"open failed: %s\\n\", strerror(errno));\r\n    }\r\n    int x = 5; assert(x == 5); /* disabled in release with -DNDEBUG */\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>15) Function Pointers &amp; <code>qsort</code> Callback</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\nstatic int cmp_int(const void *a, const void *b){\r\n    int ia = *(const int*)a, ib = *(const int*)b;\r\n    return (ia &gt; ib) - (ia &lt; ib);\r\n}\r\nint main(void){\r\n    int v[] = {5,1,4,2,3};\r\n    qsort(v, 5, sizeof *v, cmp_int);\r\n    for(size_t i=0;i&lt;5;i++) printf(\"%d \", v[i]);\r\n    puts(\"\");\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>16) Preprocessor &amp; Macros (include guards)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#ifndef MATH_UTIL_H\r\n#define MATH_UTIL_H\r\n#define SQUARE(x) ((x)*(x)) /* beware multiple eval */\r\nstatic inline int max_i(int a,int b){ return a&gt;b?a:b; }\r\n#endif</code></pre>\r\n</div>\r\n\r\n<h3>17) Variadic Functions (<code>&lt;stdarg.h&gt;</code>)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;stdarg.h&gt;\r\n#include &lt;stdio.h&gt;\r\nint sum_ints(int count, ...){\r\n    int total = 0; va_list ap; va_start(ap, count);\r\n    for(int i=0;i&lt;count;i++) total += va_arg(ap, int);\r\n    va_end(ap); return total;\r\n}\r\nint main(void){ printf(\"%d\\n\", sum_ints(4,1,2,3,4)); }</code></pre>\r\n</div>\r\n\r\n<h3>18) Date/Time (<code>&lt;time.h&gt;</code>)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;time.h&gt;\r\n#include &lt;stdio.h&gt;\r\nint main(void){\r\n    time_t now = time(NULL);\r\n    struct tm *utc = gmtime(&amp;now);\r\n    char buf[64]; strftime(buf, sizeof buf, \"%Y-%m-%d %H:%M:%SZ\", utc);\r\n    puts(buf);\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>19) Small Project Layout (multi-file)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-none\">project/\r\n├─ include/\r\n│  └─ util.h\r\n├─ src/\r\n│  ├─ main.c\r\n│  └─ util.c\r\n└─ Makefile\r\n\r\n// util.h\r\n#ifndef UTIL_H\r\n#define UTIL_H\r\nint add(int a, int b);\r\n#endif\r\n\r\n// util.c\r\n#include \"util.h\"\r\nint add(int a, int b){ return a + b; }\r\n\r\n// main.c\r\n#include &lt;stdio.h&gt;\r\n#include \"util.h\"\r\nint main(void){ printf(\"%d\\n\", add(2,3)); }</code></pre>\r\n</div>\r\n\r\n<h3>20) Testing &amp; Defensive C (UB pitfall notes)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-none\">• Never use gets(); avoid scanf(\"%s\") without a width. Prefer fgets + sscanf.\r\n• Check all allocations &amp; I/O return values; free what you malloc.\r\n• Beware off-by-one, integer overflow, signed/unsigned mixing.\r\n• Do not return pointer to local (stack) variable.\r\n• Do not access past array bounds; undefined behavior (UB) is silent.\r\n• Initialize variables; zero out structs when needed.\r\n• Use -Wall -Wextra -Wconversion -Wshadow and consider -fsanitize=address,undefined (dev builds).\r\n• Prefer snprintf over sprintf; strncpy is tricky—prefer strlcpy where available or manual bounds checks.</code></pre>\r\n</div>\r\n\r\n<h3>21) (Optional) POSIX Threads Intro (Unix-like)</h3>\r\n<div class=\"code-container\">\r\n  <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-c\">#include &lt;pthread.h&gt;\r\n#include &lt;stdio.h&gt;\r\nvoid* work(void* arg){ printf(\"Hello from thread %ld\\n\", (long)arg); return NULL; }\r\nint main(void){\r\n    pthread_t t1, t2;\r\n    pthread_create(&amp;t1, NULL, work, (void*)1);\r\n    pthread_create(&amp;t2, NULL, work, (void*)2);\r\n    pthread_join(t1, NULL); pthread_join(t2, NULL);\r\n    return 0;\r\n}\r\n/* Build: gcc -pthread -std=c17 -O2 t.c -o t */</code></pre>\r\n</div>\r\n\r\n<hr>\r\n<p>By following these lessons, you’ll progress from C fundamentals to real-world skills: safe I/O, memory management, ABI-aware types, modular builds, and defensive coding. Keep practicing and evolve into projects like CLI tools, parsers, image or audio utilities, and embedded firmware.</p>\r\n\r\n<!-- Prism.js core + languages for C -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-clike.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-c.min.js\"></script>\r\n\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n  position: relative;\r\n  margin: 1em 0;\r\n  background: #1e1e1e;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n.code-container pre {\r\n  margin: 0;\r\n  padding: 1em;\r\n  overflow-x: auto;\r\n  font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n.copy-btn {\r\n  position: absolute;\r\n  top: 8px;\r\n  right: 8px;\r\n  background: #007acc;\r\n  border: none;\r\n  color: #fff;\r\n  padding: 4px 8px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  font-size: 12px;\r\n}\r\n.copy-btn:hover { background: #005f99; }\r\ntable th, table td { padding: 6px 8px; }\r\n</style>\r\n\r\n<script>\r\nfunction copyCode(button) {\r\n  const code = button.nextElementSibling.innerText;\r\n  navigator.clipboard.writeText(code).then(() => {\r\n    button.innerText = \"Copied!\";\r\n    setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n  });\r\n}\r\n</script>', 'C Programming Lessons – Beginner to Advanced', '1757847800_C.png', 7, 1, 'published', '2025-09-13 20:52:48', '2025-09-14 11:03:20');
INSERT INTO `posts` (`id`, `title`, `content`, `excerpt`, `featured_image`, `category_id`, `author_id`, `status`, `created_at`, `updated_at`) VALUES
(8, 'HTML Programming Lesson', '# HTML Programming Lessons – Beginner to Advanced\r\n\r\n<p>Welcome to the HTML programming lesson series! We\'ll learn HTML step by step — starting from the basics and moving toward advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n## HTML Course Outline\r\n\r\n<ul>\r\n    <li>HTML Basics and Document Structure</li>\r\n    <li>Text Formatting and Headings</li>\r\n    <li>Links and Navigation</li>\r\n    <li>Images and Multimedia</li>\r\n    <li>Lists (Ordered, Unordered, Definition)</li>\r\n    <li>Tables and Tabular Data</li>\r\n    <li>Forms and Input Elements</li>\r\n    <li>Semantic HTML Elements</li>\r\n    <li>Meta Tags and SEO</li>\r\n    <li>HTML5 APIs</li>\r\n    <li>Accessibility Best Practices</li>\r\n    <li>Responsive Design with HTML</li>\r\n    <li>HTML Validation</li>\r\n    <li>Integration with CSS and JavaScript</li>\r\n    <li>Modern HTML Features</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (keeps your existing dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>1. HTML Basics and Document Structure</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n    &lt;title&gt;My First Web Page&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n    &lt;h1&gt;Welcome to HTML&lt;/h1&gt;\r\n    &lt;p&gt;This is my first HTML page.&lt;/p&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<p>Every HTML document follows this basic structure:</p>\r\n<ul>\r\n    <li><strong>&lt;!DOCTYPE html&gt;</strong> - Defines the document type and HTML version</li>\r\n    <li><strong>&lt;html&gt;</strong> - The root element of an HTML page</li>\r\n    <li><strong>&lt;head&gt;</strong> - Contains meta-information about the document</li>\r\n    <li><strong>&lt;body&gt;</strong> - Contains the visible page content</li>\r\n</ul>\r\n\r\n<h3>2. Text Formatting and Headings</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;h1&gt;This is a Heading 1&lt;/h1&gt;\r\n&lt;h2&gt;This is a Heading 2&lt;/h2&gt;\r\n&lt;h3&gt;This is a Heading 3&lt;/h3&gt;\r\n&lt;h4&gt;This is a Heading 4&lt;/h4&gt;\r\n&lt;h5&gt;This is a Heading 5&lt;/h5&gt;\r\n&lt;h6&gt;This is a Heading 6&lt;/h6&gt;\r\n\r\n&lt;p&gt;This is a paragraph. &lt;strong&gt;This is bold text&lt;/strong&gt;. \r\n&lt;em&gt;This is italic text&lt;/em&gt;. &lt;mark&gt;This is highlighted text&lt;/mark&gt;.&lt;/p&gt;\r\n\r\n&lt;p&gt;Here is some &lt;code&gt;inline code&lt;/code&gt; and \r\n&lt;pre&gt;preformatted text:\r\n    Line 1\r\n    Line 2\r\n    Line 3\r\n&lt;/pre&gt;</code></pre>\r\n</div>\r\n\r\n<h4>HTML Text Formatting Elements</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Tag</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;b&gt;</td>\r\n        <td>Bold text</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;strong&gt;</td>\r\n        <td>Important text (semantic bold)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;i&gt;</td>\r\n        <td>Italic text</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;em&gt;</td>\r\n        <td>Emphasized text (semantic italic)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;mark&gt;</td>\r\n        <td>Marked/highlighted text</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;small&gt;</td>\r\n        <td>Smaller text</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;del&gt;</td>\r\n        <td>Deleted text</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;ins&gt;</td>\r\n        <td>Inserted text</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;sub&gt;</td>\r\n        <td>Subscript text</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;sup&gt;</td>\r\n        <td>Superscript text</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>3. Links and Navigation</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!-- Absolute URL --&gt;\r\n&lt;a href=\"https://www.example.com\"&gt;Visit Example.com&lt;/a&gt;\r\n\r\n&lt;!-- Relative URL --&gt;\r\n&lt;a href=\"about.html\"&gt;About Us&lt;/a&gt;\r\n\r\n&lt;!-- Link to a section on the same page --&gt;\r\n&lt;a href=\"#section2\"&gt;Go to Section 2&lt;/a&gt;\r\n\r\n&lt;!-- Email link --&gt;\r\n&lt;a href=\"mailto:info@example.com\"&gt;Send Email&lt;/a&gt;\r\n\r\n&lt;!-- Phone link --&gt;\r\n&lt;a href=\"tel:+1234567890\"&gt;Call Us&lt;/a&gt;\r\n\r\n&lt;!-- Link with target attribute --&gt;\r\n&lt;a href=\"https://www.example.com\" target=\"_blank\"&gt;Open in New Tab&lt;/a&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Link Target Attributes</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Value</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>_blank</td>\r\n        <td>Opens the linked document in a new window or tab</td>\r\n    </tr>\r\n    <tr>\r\n        <td>_self</td>\r\n        <td>Opens the linked document in the same frame (default)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>_parent</td>\r\n        <td>Opens the linked document in the parent frame</td>\r\n    </tr>\r\n    <tr>\r\n        <td>_top</td>\r\n        <td>Opens the linked document in the full body of the window</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>4. Images and Multimedia</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!-- Basic image --&gt;\r\n&lt;img src=\"image.jpg\" alt=\"Description of image\"&gt;\r\n\r\n&lt;!-- Image with dimensions --&gt;\r\n&lt;img src=\"image.jpg\" alt=\"Description\" width=\"500\" height=\"300\"&gt;\r\n\r\n&lt;!-- Responsive image --&gt;\r\n&lt;img src=\"image.jpg\" alt=\"Description\" style=\"max-width:100%;\"&gt;\r\n\r\n&lt;!-- Picture element for responsive images --&gt;\r\n&lt;picture&gt;\r\n  &lt;source media=\"(min-width: 650px)\" srcset=\"img_pink_flowers.jpg\"&gt;\r\n  &lt;source media=\"(min-width: 465px)\" srcset=\"img_white_flower.jpg\"&gt;\r\n  &lt;img src=\"img_orange_flowers.jpg\" alt=\"Flowers\"&gt;\r\n&lt;/picture&gt;\r\n\r\n&lt;!-- Audio element --&gt;\r\n&lt;audio controls&gt;\r\n  &lt;source src=\"audio.mp3\" type=\"audio/mpeg\"&gt;\r\n  &lt;source src=\"audio.ogg\" type=\"audio/ogg\"&gt;\r\n  Your browser does not support the audio element.\r\n&lt;/audio&gt;\r\n\r\n&lt;!-- Video element --&gt;\r\n&lt;video width=\"320\" height=\"240\" controls&gt;\r\n  &lt;source src=\"movie.mp4\" type=\"video/mp4\"&gt;\r\n  &lt;source src=\"movie.ogg\" type=\"video/ogg\"&gt;\r\n  Your browser does not support the video tag.\r\n&lt;/video&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Common Image Formats</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Format</th>\r\n        <th>Description</th>\r\n        <th>Best For</th>\r\n    </tr>\r\n    <tr>\r\n        <td>JPEG/JPG</td>\r\n        <td>Lossy compression, supports millions of colors</td>\r\n        <td>Photographs, complex images</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PNG</td>\r\n        <td>Lossless compression, supports transparency</td>\r\n        <td>Logos, icons, images with transparency</td>\r\n    </tr>\r\n    <tr>\r\n        <td>GIF</td>\r\n        <td>Limited to 256 colors, supports animation</td>\r\n        <td>Simple animations, graphics with limited colors</td>\r\n    </tr>\r\n    <tr>\r\n        <td>SVG</td>\r\n        <td>Vector format, scalable without quality loss</td>\r\n        <td>Icons, logos, illustrations</td>\r\n    </tr>\r\n    <tr>\r\n        <td>WebP</td>\r\n        <td>Modern format with superior compression</td>\r\n        <td>Web images, photographs</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>5. Lists (Ordered, Unordered, Definition)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!-- Unordered list --&gt;\r\n&lt;ul&gt;\r\n  &lt;li&gt;Coffee&lt;/li&gt;\r\n  &lt;li&gt;Tea&lt;/li&gt;\r\n  &lt;li&gt;Milk&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;!-- Ordered list --&gt;\r\n&lt;ol&gt;\r\n  &lt;li&gt;First item&lt;/li&gt;\r\n  &lt;li&gt;Second item&lt;/li&gt;\r\n  &lt;li&gt;Third item&lt;/li&gt;\r\n&lt;/ol&gt;\r\n\r\n&lt;!-- Ordered list with type attribute --&gt;\r\n&lt;ol type=\"A\"&gt;\r\n  &lt;li&gt;First item&lt;/li&gt;\r\n  &lt;li&gt;Second item&lt;/li&gt;\r\n  &lt;li&gt;Third item&lt;/li&gt;\r\n&lt;/ol&gt;\r\n\r\n&lt;!-- Nested lists --&gt;\r\n&lt;ul&gt;\r\n  &lt;li&gt;Fruits\r\n    &lt;ul&gt;\r\n      &lt;li&gt;Apple&lt;/li&gt;\r\n      &lt;li&gt;Banana&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n  &lt;/li&gt;\r\n  &lt;li&gt;Vegetables&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;!-- Definition list --&gt;\r\n&lt;dl&gt;\r\n  &lt;dt&gt;HTML&lt;/dt&gt;\r\n  &lt;dd&gt;HyperText Markup Language&lt;/dd&gt;\r\n  &lt;dt&gt;CSS&lt;/dt&gt;\r\n  &lt;dd&gt;Cascading Style Sheets&lt;/dd&gt;\r\n&lt;/dl&gt;</code></pre>\r\n</div>\r\n\r\n<h4>List Type Attributes</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>List Type</th>\r\n        <th>Attribute Values</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Unordered List (&lt;ul&gt;)</td>\r\n        <td>disc, circle, square</td>\r\n        <td>Sets the bullet style for list items</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Ordered List (&lt;ol&gt;)</td>\r\n        <td>1, A, a, I, i</td>\r\n        <td>Sets the numbering style (1: numbers, A: uppercase letters, a: lowercase letters, I: uppercase Roman numerals, i: lowercase Roman numerals)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>List Item (&lt;li&gt;)</td>\r\n        <td>value</td>\r\n        <td>Sets the value of a list item (for ordered lists)</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>6. Tables and Tabular Data</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!-- Basic table --&gt;\r\n&lt;table&gt;\r\n  &lt;tr&gt;\r\n    &lt;th&gt;First Name&lt;/th&gt;\r\n    &lt;th&gt;Last Name&lt;/th&gt;\r\n    &lt;th&gt;Age&lt;/th&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;John&lt;/td&gt;\r\n    &lt;td&gt;Doe&lt;/td&gt;\r\n    &lt;td&gt;30&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Jane&lt;/td&gt;\r\n    &lt;td&gt;Smith&lt;/td&gt;\r\n    &lt;td&gt;25&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;!-- Table with more structure --&gt;\r\n&lt;table border=\"1\"&gt;\r\n  &lt;caption&gt;Employee Information&lt;/caption&gt;\r\n  &lt;thead&gt;\r\n    &lt;tr&gt;\r\n      &lt;th&gt;ID&lt;/th&gt;\r\n      &lt;th&gt;Name&lt;/th&gt;\r\n      &lt;th&gt;Department&lt;/th&gt;\r\n    &lt;/tr&gt;\r\n  &lt;/thead&gt;\r\n  &lt;tbody&gt;\r\n    &lt;tr&gt;\r\n      &lt;td&gt;101&lt;/td&gt;\r\n      &lt;td&gt;John Doe&lt;/td&gt;\r\n      &lt;td&gt;Marketing&lt;/td&gt;\r\n    &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n      &lt;td&gt;102&lt;/td&gt;\r\n      &lt;td&gt;Jane Smith&lt;/td&gt;\r\n      &lt;td&gt;IT&lt;/td&gt;\r\n    &lt;/tr&gt;\r\n  &lt;/tbody&gt;\r\n  &lt;tfoot&gt;\r\n    &lt;tr&gt;\r\n      &lt;td colspan=\"3\"&gt;Total Employees: 2&lt;/td&gt;\r\n    &lt;/tr&gt;\r\n  &lt;/tfoot&gt;\r\n&lt;/table&gt;</code></pre>\r\n</div>\r\n\r\n<h4>HTML Table Elements</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Element</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;table&gt;</td>\r\n        <td>Defines a table</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;th&gt;</td>\r\n        <td>Defines a header cell in a table</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;tr&gt;</td>\r\n        <td>Defines a row in a table</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;td&gt;</td>\r\n        <td>Defines a cell in a table</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;caption&gt;</td>\r\n        <td>Defines a table caption</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;thead&gt;</td>\r\n        <td>Groups the header content in a table</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;tbody&gt;</td>\r\n        <td>Groups the body content in a table</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;tfoot&gt;</td>\r\n        <td>Groups the footer content in a table</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;col&gt;</td>\r\n        <td>Specifies column properties for each column within a &lt;colgroup&gt; element</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;colgroup&gt;</td>\r\n        <td>Specifies a group of one or more columns in a table for formatting</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>7. Forms and Input Elements</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;form action=\"/submit-form\" method=\"post\"&gt;\r\n  &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\r\n  &lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;\r\n  \r\n  &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\r\n  &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\r\n  \r\n  &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\r\n  &lt;input type=\"password\" id=\"password\" name=\"password\" minlength=\"8\" required&gt;\r\n  \r\n  &lt;label for=\"dob\"&gt;Date of Birth:&lt;/label&gt;\r\n  &lt;input type=\"date\" id=\"dob\" name=\"dob\"&gt;\r\n  \r\n  &lt;fieldset&gt;\r\n    &lt;legend&gt;Gender&lt;/legend&gt;\r\n    &lt;input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\"&gt;\r\n    &lt;label for=\"male\"&gt;Male&lt;/label&gt;\r\n    &lt;input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\"&gt;\r\n    &lt;label for=\"female\"&gt;Female&lt;/label&gt;\r\n    &lt;input type=\"radio\" id=\"other\" name=\"gender\" value=\"other\"&gt;\r\n    &lt;label for=\"other\"&gt;Other&lt;/label&gt;\r\n  &lt;/fieldset&gt;\r\n  \r\n  &lt;fieldset&gt;\r\n    &lt;legend&gt;Interests&lt;/legend&gt;\r\n    &lt;input type=\"checkbox\" id=\"sports\" name=\"interests\" value=\"sports\"&gt;\r\n    &lt;label for=\"sports\"&gt;Sports&lt;/label&gt;\r\n    &lt;input type=\"checkbox\" id=\"music\" name=\"interests\" value=\"music\"&gt;\r\n    &lt;label for=\"music\"&gt;Music&lt;/label&gt;\r\n    &lt;input type=\"checkbox\" id=\"reading\" name=\"interests\" value=\"reading\"&gt;\r\n    &lt;label for=\"reading\"&gt;Reading&lt;/label&gt;\r\n  &lt;/fieldset&gt;\r\n  \r\n  &lt;label for=\"country\"&gt;Country:&lt;/label&gt;\r\n  &lt;select id=\"country\" name=\"country\"&gt;\r\n    &lt;option value=\"\"&gt;--Please choose an option--&lt;/option&gt;\r\n    &lt;option value=\"usa\"&gt;United States&lt;/option&gt;\r\n    &lt;option value=\"uk\"&gt;United Kingdom&lt;/option&gt;\r\n    &lt;option value=\"canada\"&gt;Canada&lt;/option&gt;\r\n  &lt;/select&gt;\r\n  \r\n  &lt;label for=\"message\"&gt;Message:&lt;/label&gt;\r\n  &lt;textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\"&gt;&lt;/textarea&gt;\r\n  \r\n  &lt;input type=\"submit\" value=\"Submit\"&gt;\r\n  &lt;input type=\"reset\" value=\"Reset\"&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n\r\n<h4>HTML Input Types</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>text</td>\r\n        <td>Defines a single-line text input field</td>\r\n    </tr>\r\n    <tr>\r\n        <td>password</td>\r\n        <td>Defines a password field</td>\r\n    </tr>\r\n    <tr>\r\n        <td>submit</td>\r\n        <td>Defines a submit button</td>\r\n    </tr>\r\n    <tr>\r\n        <td>reset</td>\r\n        <td>Defines a reset button</td>\r\n    </tr>\r\n    <tr>\r\n        <td>radio</td>\r\n        <td>Defines a radio button</td>\r\n    </tr>\r\n    <tr>\r\n        <td>checkbox</td>\r\n        <td>Defines a checkbox</td>\r\n    </tr>\r\n    <tr>\r\n        <td>button</td>\r\n        <td>Defines a clickable button</td>\r\n    </tr>\r\n    <tr>\r\n        <td>email</td>\r\n        <td>Defines a field for an email address</td>\r\n    </tr>\r\n    <tr>\r\n        <td>date</td>\r\n        <td>Defines a date control</td>\r\n    </tr>\r\n    <tr>\r\n        <td>color</td>\r\n        <td>Defines a color picker</td>\r\n    </tr>\r\n    <tr>\r\n        <td>number</td>\r\n        <td>Defines a field for entering a number</td>\r\n    </tr>\r\n    <tr>\r\n        <td>range</td>\r\n        <td>Defines a control for entering a number whose exact value is not important</td>\r\n    </tr>\r\n    <tr>\r\n        <td>search</td>\r\n        <td>Defines a search field</td>\r\n    </tr>\r\n    <tr>\r\n        <td>tel</td>\r\n        <td>Defines a field for entering a telephone number</td>\r\n    </tr>\r\n    <tr>\r\n        <td>url</td>\r\n        <td>Defines a field for entering a URL</td>\r\n    </tr>\r\n    <tr>\r\n        <td>file</td>\r\n        <td>Defines a file-select field and a \"Browse\" button</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>8. Semantic HTML Elements</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n    &lt;title&gt;Semantic HTML Example&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n    &lt;header&gt;\r\n        &lt;h1&gt;Website Name&lt;/h1&gt;\r\n        &lt;nav&gt;\r\n            &lt;ul&gt;\r\n                &lt;li&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\r\n                &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt;\r\n                &lt;li&gt;&lt;a href=\"#\"&gt;Services&lt;/a&gt;&lt;/li&gt;\r\n                &lt;li&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\r\n            &lt;/ul&gt;\r\n        &lt;/nav&gt;\r\n    &lt;/header&gt;\r\n    \r\n    &lt;main&gt;\r\n        &lt;section&gt;\r\n            &lt;h2&gt;About Us&lt;/h2&gt;\r\n            &lt;p&gt;This is a paragraph about our company.&lt;/p&gt;\r\n        &lt;/section&gt;\r\n        \r\n        &lt;section&gt;\r\n            &lt;h2&gt;Our Services&lt;/h2&gt;\r\n            &lt;article&gt;\r\n                &lt;h3&gt;Web Design&lt;/h3&gt;\r\n                &lt;p&gt;We offer professional web design services.&lt;/p&gt;\r\n            &lt;/article&gt;\r\n            &lt;article&gt;\r\n                &lt;h3&gt;Web Development&lt;/h3&gt;\r\n                &lt;p&gt;We create custom web applications.&lt;/p&gt;\r\n            &lt;/article&gt;\r\n        &lt;/section&gt;\r\n        \r\n        &lt;aside&gt;\r\n            &lt;h3&gt;Related Links&lt;/h3&gt;\r\n            &lt;ul&gt;\r\n                &lt;li&gt;&lt;a href=\"#\"&gt;Blog&lt;/a&gt;&lt;/li&gt;\r\n                &lt;li&gt;&lt;a href=\"#\"&gt;Resources&lt;/a&gt;&lt;/li&gt;\r\n            &lt;/ul&gt;\r\n        &lt;/aside&gt;\r\n    &lt;/main&gt;\r\n    \r\n    &lt;footer&gt;\r\n        &lt;p&gt;&copy; 2023 Website Name. All rights reserved.&lt;/p&gt;\r\n    &lt;/footer&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h4>HTML5 Semantic Elements</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Element</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;header&gt;</td>\r\n        <td>Represents the header of a document or section</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;nav&gt;</td>\r\n        <td>Defines navigation links</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;main&gt;</td>\r\n        <td>Specifies the main content of a document</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;section&gt;</td>\r\n        <td>Defines a section in a document</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;article&gt;</td>\r\n        <td>Defines independent, self-contained content</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;aside&gt;</td>\r\n        <td>Defines content aside from the main content</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;footer&gt;</td>\r\n        <td>Defines a footer for a document or section</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;figure&gt;</td>\r\n        <td>Specifies self-contained content</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;figcaption&gt;</td>\r\n        <td>Defines a caption for a &lt;figure&gt; element</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;time&gt;</td>\r\n        <td>Defines a specific time</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;mark&gt;</td>\r\n        <td>Defines marked/highlighted text</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;details&gt;</td>\r\n        <td>Defines additional details that the user can view or hide</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;summary&gt;</td>\r\n        <td>Defines a visible heading for a &lt;details&gt; element</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>9. Meta Tags and SEO</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n    \r\n    &lt;!-- Basic SEO --&gt;\r\n    &lt;title&gt;Page Title - Website Name&lt;/title&gt;\r\n    &lt;meta name=\"description\" content=\"A brief description of the page content.\"&gt;\r\n    &lt;meta name=\"keywords\" content=\"keyword1, keyword2, keyword3\"&gt;\r\n    &lt;meta name=\"author\" content=\"Author Name\"&gt;\r\n    \r\n    &lt;!-- Open Graph / Facebook --&gt;\r\n    &lt;meta property=\"og:type\" content=\"website\"&gt;\r\n    &lt;meta property=\"og:url\" content=\"https://example.com/page-url\"&gt;\r\n    &lt;meta property=\"og:title\" content=\"Page Title - Website Name\"&gt;\r\n    &lt;meta property=\"og:description\" content=\"A brief description of the page content.\"&gt;\r\n    &lt;meta property=\"og:image\" content=\"https://example.com/image.jpg\"&gt;\r\n    \r\n    &lt;!-- Twitter --&gt;\r\n    &lt;meta property=\"twitter:card\" content=\"summary_large_image\"&gt;\r\n    &lt;meta property=\"twitter:url\" content=\"https://example.com/page-url\"&gt;\r\n    &lt;meta property=\"twitter:title\" content=\"Page Title - Website Name\"&gt;\r\n    &lt;meta property=\"twitter:description\" content=\"A brief description of the page content.\"&gt;\r\n    &lt;meta property=\"twitter:image\" content=\"https://example.com/image.jpg\"&gt;\r\n    \r\n    &lt;!-- Robots --&gt;\r\n    &lt;meta name=\"robots\" content=\"index, follow\"&gt;\r\n    \r\n    &lt;!-- Additional meta tags --&gt;\r\n    &lt;meta name=\"theme-color\" content=\"#ffffff\"&gt;\r\n    &lt;meta name=\"msapplication-TileColor\" content=\"#ffffff\"&gt;\r\n    \r\n    &lt;!-- Favicon --&gt;\r\n    &lt;link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\"&gt;\r\n    &lt;link rel=\"apple-touch-icon\" href=\"apple-touch-icon.png\"&gt;\r\n    \r\n    &lt;!-- Canonical URL --&gt;\r\n    &lt;link rel=\"canonical\" href=\"https://example.com/page-url\"&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n    &lt;!-- Page content --&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Essential Meta Tags for SEO</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Meta Tag</th>\r\n        <th>Purpose</th>\r\n        <th>Best Practices</th>\r\n    </tr>\r\n    <tr>\r\n        <td>title</td>\r\n        <td>Defines the title of the webpage</td>\r\n        <td>Keep under 60 characters, include primary keyword</td>\r\n    </tr>\r\n    <tr>\r\n        <td>meta description</td>\r\n        <td>Provides a summary of the page content</td>\r\n        <td>Keep under 160 characters, make it compelling</td>\r\n    </tr>\r\n    <tr>\r\n        <td>meta keywords</td>\r\n        <td>Specifies keywords relevant to the page</td>\r\n        <td>Largely ignored by search engines now, optional</td>\r\n    </tr>\r\n    <tr>\r\n        <td>viewport</td>\r\n        <td>Controls how the page is displayed on mobile devices</td>\r\n        <td>Always include: width=device-width, initial-scale=1.0</td>\r\n    </tr>\r\n    <tr>\r\n        <td>charset</td>\r\n        <td>Specifies the character encoding</td>\r\n        <td>Always use UTF-8: <meta charset=\"UTF-8\"></td>\r\n    </tr>\r\n    <tr>\r\n        <td>og:title</td>\r\n        <td>Title for social media sharing (Open Graph)</td>\r\n        <td>Similar to page title but optimized for social</td>\r\n    </tr>\r\n    <tr>\r\n        <td>og:description</td>\r\n        <td>Description for social media sharing</td>\r\n        <td>Similar to meta description but for social</td>\r\n    </tr>\r\n    <tr>\r\n        <td>og:image</td>\r\n        <td>Image for social media sharing</td>\r\n        <td>Use 1200x630 pixels for best display</td>\r\n    </tr>\r\n    <tr>\r\n        <td>robots</td>\r\n        <td>Instructs search engine crawlers</td>\r\n        <td>Use \"index, follow\" for most pages</td>\r\n    </tr>\r\n    <tr>\r\n        <td>canonical</td>\r\n        <td>Specifies the preferred version of a page</td>\r\n        <td>Use to prevent duplicate content issues</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>10. HTML5 APIs</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!-- Geolocation API --&gt;\r\n&lt;button onclick=\"getLocation()\"&gt;Get My Location&lt;/button&gt;\r\n&lt;p id=\"location\"&gt;&lt;/p&gt;\r\n\r\n&lt;!-- Local Storage --&gt;\r\n&lt;button onclick=\"saveData()\"&gt;Save Data&lt;/button&gt;\r\n&lt;button onclick=\"loadData()\"&gt;Load Data&lt;/button&gt;\r\n&lt;p id=\"data\"&gt;&lt;/p&gt;\r\n\r\n&lt;!-- Drag and Drop --&gt;\r\n&lt;div id=\"drag1\" draggable=\"true\" ondragstart=\"drag(event)\"&gt;\r\n  Drag me!\r\n&lt;/div&gt;\r\n&lt;div id=\"drop1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\"&gt;\r\n  Drop here\r\n&lt;/div&gt;\r\n\r\n&lt;!-- Canvas --&gt;\r\n&lt;canvas id=\"myCanvas\" width=\"200\" height=\"100\"&gt;&lt;/canvas&gt;\r\n\r\n&lt;!-- Video with custom controls --&gt;\r\n&lt;video id=\"myVideo\" width=\"320\" height=\"176\"&gt;\r\n  &lt;source src=\"movie.mp4\" type=\"video/mp4\"&gt;\r\n&lt;/video&gt;\r\n&lt;button onclick=\"playPause()\"&gt;Play/Pause&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n// Geolocation\r\nfunction getLocation() {\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(showPosition);\r\n  } else {\r\n    document.getElementById(\"location\").innerHTML = \"Geolocation is not supported by this browser.\";\r\n  }\r\n}\r\n\r\nfunction showPosition(position) {\r\n  document.getElementById(\"location\").innerHTML = \"Latitude: \" + position.coords.latitude + \r\n  \"&lt;br&gt;Longitude: \" + position.coords.longitude;\r\n}\r\n\r\n// Local Storage\r\nfunction saveData() {\r\n  localStorage.setItem(\"myData\", \"Hello Local Storage!\");\r\n}\r\n\r\nfunction loadData() {\r\n  document.getElementById(\"data\").innerHTML = localStorage.getItem(\"myData\");\r\n}\r\n\r\n// Drag and Drop\r\nfunction allowDrop(ev) {\r\n  ev.preventDefault();\r\n}\r\n\r\nfunction drag(ev) {\r\n  ev.dataTransfer.setData(\"text\", ev.target.id);\r\n}\r\n\r\nfunction drop(ev) {\r\n  ev.preventDefault();\r\n  var data = ev.dataTransfer.getData(\"text\");\r\n  ev.target.appendChild(document.getElementById(data));\r\n}\r\n\r\n// Canvas\r\nvar canvas = document.getElementById(\"myCanvas\");\r\nvar ctx = canvas.getContext(\"2d\");\r\nctx.fillStyle = \"#FF0000\";\r\nctx.fillRect(20, 20, 150, 75);\r\n\r\n// Video Controls\r\nfunction playPause() {\r\n  var video = document.getElementById(\"myVideo\");\r\n  if (video.paused)\r\n    video.play();\r\n  else\r\n    video.pause();\r\n}\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n\r\n<h4>HTML5 APIs Overview</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>API</th>\r\n        <th>Description</th>\r\n        <th>Common Use Cases</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Geolocation API</td>\r\n        <td>Allows web applications to access the geographical location of a user</td>\r\n        <td>Location-based services, maps, finding nearby places</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Local Storage</td>\r\n        <td>Provides a way to store data in the browser with no expiration time</td>\r\n        <td>Saving user preferences, caching data, offline functionality</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Session Storage</td>\r\n        <td>Similar to Local Storage but data is cleared when the page session ends</td>\r\n        <td>Temporary data storage during a session</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Drag and Drop API</td>\r\n        <td>Allows users to drag and drop elements within a web page</td>\r\n        <td>File uploads, reordering items, interactive interfaces</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Canvas API</td>\r\n        <td>Provides a way to draw graphics via JavaScript</td>\r\n        <td>Games, data visualization, image editing</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Web Workers</td>\r\n        <td>Allows JavaScript to run in the background without affecting the page performance</td>\r\n        <td>Complex calculations, processing large data sets</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Server-Sent Events</td>\r\n        <td>Allows a web page to get updates from a server</td>\r\n        <td>Live feeds, notifications, real-time updates</td>\r\n    </tr>\r\n    <tr>\r\n        <td>WebSocket API</td>\r\n        <td>Provides a way to open a persistent connection between a client and server</td>\r\n        <td>Chat applications, real-time gaming, live collaboration</td>\r\n    </tr>\r\n    <tr>\r\n        <td>WebRTC</td>\r\n        <td>Enables real-time communication between browsers</td>\r\n        <td>Video conferencing, file sharing, peer-to-peer data transfer</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Web Storage API</td>\r\n        <td>Provides mechanisms by which browsers can store key/value pairs</td>\r\n        <td>Storing user data, caching, offline applications</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>11. Accessibility Best Practices</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!-- Language attribute --&gt;\r\n&lt;html lang=\"en\"&gt;\r\n\r\n&lt;!-- Alternative text for images --&gt;\r\n&lt;img src=\"logo.png\" alt=\"Company Logo\"&gt;\r\n&lt;img src=\"chart.png\" alt=\"Sales data showing 20% growth in Q3\"&gt;\r\n&lt;img src=\"decorative.png\" alt=\"\"&gt;  &lt;!-- Decorative image --&gt;\r\n\r\n&lt;!-- Semantic HTML --&gt;\r\n&lt;button onclick=\"submitForm()\"&gt;Submit&lt;/button&gt;  &lt;!-- Instead of &lt;div onclick=\"submitForm()\"&gt;Submit&lt;/div&gt; --&gt;\r\n\r\n&lt;!-- Form labels --&gt;\r\n&lt;label for=\"name\"&gt;Name:&lt;/label&gt;\r\n&lt;input type=\"text\" id=\"name\" name=\"name\"&gt;\r\n\r\n&lt;!-- Fieldset and legend for related form controls --&gt;\r\n&lt;fieldset&gt;\r\n  &lt;legend&gt;Payment Method&lt;/legend&gt;\r\n  &lt;input type=\"radio\" id=\"credit\" name=\"payment\" value=\"credit\"&gt;\r\n  &lt;label for=\"credit\"&gt;Credit Card&lt;/label&gt;\r\n  &lt;input type=\"radio\" id=\"debit\" name=\"payment\" value=\"debit\"&gt;\r\n  &lt;label for=\"debit\"&gt;Debit Card&lt;/label&gt;\r\n&lt;/fieldset&gt;\r\n\r\n&lt;!-- Table accessibility --&gt;\r\n&lt;table&gt;\r\n  &lt;caption&gt;Monthly Sales Report&lt;/caption&gt;\r\n  &lt;thead&gt;\r\n    &lt;tr&gt;\r\n      &lt;th scope=\"col\"&gt;Product&lt;/th&gt;\r\n      &lt;th scope=\"col\"&gt;January&lt;/th&gt;\r\n      &lt;th scope=\"col\"&gt;February&lt;/th&gt;\r\n    &lt;/tr&gt;\r\n  &lt;/thead&gt;\r\n  &lt;tbody&gt;\r\n    &lt;tr&gt;\r\n      &lt;th scope=\"row\"&gt;Product A&lt;/th&gt;\r\n      &lt;td&gt;$10,000&lt;/td&gt;\r\n      &lt;td&gt;$12,000&lt;/td&gt;\r\n    &lt;/tr&gt;\r\n  &lt;/tbody&gt;\r\n&lt;/table&gt;\r\n\r\n&lt;!-- ARIA attributes --&gt;\r\n&lt;div role=\"navigation\" aria-label=\"Main Menu\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;button aria-expanded=\"false\" aria-controls=\"menu1\"&gt;Toggle Menu&lt;/button&gt;\r\n&lt;div id=\"menu1\" hidden&gt;\r\n  &lt;!-- Menu content --&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;!-- Skip to main content link --&gt;\r\n&lt;a href=\"#main-content\" class=\"skip-link\"&gt;Skip to main content&lt;/a&gt;\r\n\r\n&lt;!-- Main content area --&gt;\r\n&lt;main id=\"main-content\"&gt;\r\n  &lt;!-- Content --&gt;\r\n&lt;/main&gt;\r\n\r\n&lt;!-- Descriptive links --&gt;\r\n&lt;a href=\"report.pdf\"&gt;Download Q3 Financial Report (PDF)&lt;/a&gt;\r\n&lt;!-- Instead of --&gt;\r\n&lt;a href=\"report.pdf\"&gt;Click here&lt;/a&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Web Accessibility Guidelines (WCAG)</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Principle</th>\r\n        <th>Description</th>\r\n        <th>Examples</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Perceivable</td>\r\n        <td>Information and UI components must be presentable in ways users can perceive</td>\r\n        <td>Alternative text for images, captions for videos, sufficient color contrast</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Operable</td>\r\n        <td>UI components and navigation must be operable by all users</td>\r\n        <td>Keyboard accessibility, enough time to read and use content, no flashing content</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Understandable</td>\r\n        <td>Information and UI operation must be understandable</td>\r\n        <td>Readable text, predictable navigation, input assistance</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Robust</td>\r\n        <td>Content must be robust enough to be interpreted by a wide variety of user agents</td>\r\n        <td>Compatible with current and future user tools, proper HTML coding</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>12. Responsive Design with HTML</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n    &lt;title&gt;Responsive Design Example&lt;/title&gt;\r\n    &lt;style&gt;\r\n        /* Basic responsive styles */\r\n        * {\r\n            box-sizing: border-box;\r\n            margin: 0;\r\n            padding: 0;\r\n        }\r\n        \r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            line-height: 1.6;\r\n        }\r\n        \r\n        .container {\r\n            width: 100%;\r\n            max-width: 1200px;\r\n            margin: 0 auto;\r\n            padding: 0 15px;\r\n        }\r\n        \r\n        /* Grid system */\r\n        .row {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            margin: 0 -15px;\r\n        }\r\n        \r\n        .col {\r\n            padding: 0 15px;\r\n        }\r\n        \r\n        .col-4 {\r\n            flex: 0 0 33.333333%;\r\n            max-width: 33.333333%;\r\n        }\r\n        \r\n        .col-8 {\r\n            flex: 0 0 66.666667%;\r\n            max-width: 66.666667%;\r\n        }\r\n        \r\n        /* Responsive images */\r\n        .responsive-img {\r\n            max-width: 100%;\r\n            height: auto;\r\n        }\r\n        \r\n        /* Media queries */\r\n        @media (max-width: 992px) {\r\n            .col-4, .col-8 {\r\n                flex: 0 0 100%;\r\n                max-width: 100%;\r\n            }\r\n        }\r\n        \r\n        @media (max-width: 768px) {\r\n            /* Styles for tablets */\r\n        }\r\n        \r\n        @media (max-width: 576px) {\r\n            /* Styles for mobile phones */\r\n        }\r\n    &lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n    &lt;header&gt;\r\n        &lt;div class=\"container\"&gt;\r\n            &lt;h1&gt;Responsive Website&lt;/h1&gt;\r\n            &lt;nav&gt;\r\n                &lt;ul&gt;\r\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\r\n                    &lt;li&gt;&lt;a href=\"#\"&gt;About&lt;/a&gt;&lt;/li&gt;\r\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Services&lt;/a&gt;&lt;/li&gt;\r\n                    &lt;li&gt;&lt;a href=\"#\"&gt;Contact&lt;/a&gt;&lt;/li&gt;\r\n                &lt;/ul&gt;\r\n            &lt;/nav&gt;\r\n        &lt;/div&gt;\r\n    &lt;/header&gt;\r\n    \r\n    &lt;main class=\"container\"&gt;\r\n        &lt;div class=\"row\"&gt;\r\n            &lt;div class=\"col col-8\"&gt;\r\n                &lt;h2&gt;Main Content&lt;/h2&gt;\r\n                &lt;p&gt;This is the main content area. It will take up 2/3 of the width on larger screens and full width on smaller screens.&lt;/p&gt;\r\n                &lt;img src=\"image.jpg\" alt=\"Example image\" class=\"responsive-img\"&gt;\r\n            &lt;/div&gt;\r\n            &lt;div class=\"col col-4\"&gt;\r\n                &lt;h2&gt;Sidebar&lt;/h2&gt;\r\n                &lt;p&gt;This is the sidebar. It will take up 1/3 of the width on larger screens and appear below the main content on smaller screens.&lt;/p&gt;\r\n            &lt;/div&gt;\r\n        &lt;/div&gt;\r\n    &lt;/main&gt;\r\n    \r\n    &lt;footer&gt;\r\n        &lt;div class=\"container\"&gt;\r\n            &lt;p&gt;&copy; 2023 Responsive Website. All rights reserved.&lt;/p&gt;\r\n        &lt;/div&gt;\r\n    &lt;/footer&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Responsive Design Breakpoints</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Device Type</th>\r\n        <th>Breakpoint Range</th>\r\n        <th>Common CSS Media Query</th>\r\n        <th>Design Considerations</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Mobile Phones</td>\r\n        <td>320px - 576px</td>\r\n        <td>@media (max-width: 576px)</td>\r\n        <td>Single column layout, larger touch targets, simplified navigation</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Tablets</td>\r\n        <td>576px - 992px</td>\r\n        <td>@media (min-width: 577px) and (max-width: 992px)</td>\r\n        <td>2-column layouts possible, moderate font sizes, touch-friendly</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Small Desktops</td>\r\n        <td>992px - 1200px</td>\r\n        <td>@media (min-width: 993px) and (max-width: 1200px)</td>\r\n        <td>Multi-column layouts, standard font sizes, mouse/keyboard navigation</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Large Desktops</td>\r\n        <td>1200px and above</td>\r\n        <td>@media (min-width: 1201px)</td>\r\n        <td>Maximum content width, optimal use of screen space, enhanced features</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>13. HTML Validation</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n    &lt;title&gt;Valid HTML Document&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n    &lt;h1&gt;HTML Validation&lt;/h1&gt;\r\n    \r\n    &lt;!-- Properly nested elements --&gt;\r\n    &lt;div&gt;\r\n        &lt;p&gt;This is a paragraph with &lt;strong&gt;properly nested&lt;/strong&gt; elements.&lt;/p&gt;\r\n    &lt;/div&gt;\r\n    \r\n    &lt;!-- Properly closed elements --&gt;\r\n    &lt;p&gt;This paragraph is properly closed.&lt;/p&gt;\r\n    \r\n    &lt;!-- Proper attribute quoting --&gt;\r\n    &lt;a href=\"https://example.com\" title=\"Example Website\"&gt;Example&lt;/a&gt;\r\n    \r\n    &lt;!-- Proper form structure --&gt;\r\n    &lt;form action=\"/submit\" method=\"post\"&gt;\r\n        &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\r\n        &lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;\r\n        \r\n        &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\r\n        &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\r\n        \r\n        &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\r\n    &lt;/form&gt;\r\n    \r\n    &lt;!-- Proper table structure --&gt;\r\n    &lt;table&gt;\r\n        &lt;caption&gt;Sample Data&lt;/caption&gt;\r\n        &lt;thead&gt;\r\n            &lt;tr&gt;\r\n                &lt;th scope=\"col\"&gt;Header 1&lt;/th&gt;\r\n                &lt;th scope=\"col\"&gt;Header 2&lt;/th&gt;\r\n            &lt;/tr&gt;\r\n        &lt;/thead&gt;\r\n        &lt;tbody&gt;\r\n            &lt;tr&gt;\r\n                &lt;td&gt;Data 1&lt;/td&gt;\r\n                &lt;td&gt;Data 2&lt;/td&gt;\r\n            &lt;/tr&gt;\r\n        &lt;/tbody&gt;\r\n    &lt;/table&gt;\r\n    \r\n    &lt;!-- Proper image with alt text --&gt;\r\n    &lt;img src=\"image.jpg\" alt=\"Description of image content\"&gt;\r\n    \r\n    &lt;!-- Proper list structure --&gt;\r\n    &lt;ul&gt;\r\n        &lt;li&gt;Item 1&lt;/li&gt;\r\n        &lt;li&gt;Item 2&lt;/li&gt;\r\n        &lt;li&gt;Item 3&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Common HTML Validation Errors</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Error Type</th>\r\n        <th>Description</th>\r\n        <th>How to Fix</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Unclosed Tags</td>\r\n        <td>HTML elements that are opened but not properly closed</td>\r\n        <td>Ensure every opening tag has a corresponding closing tag</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Improper Nesting</td>\r\n        <td>Elements that are not nested correctly</td>\r\n        <td>Follow proper nesting order (e.g., close inner elements before outer elements)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Missing DOCTYPE</td>\r\n        <td>Document missing the DOCTYPE declaration</td>\r\n        <td>Add &lt;!DOCTYPE html&gt; at the beginning of the document</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Invalid Attributes</td>\r\n        <td>Using attributes that don\'t exist for a particular element</td>\r\n        <td>Use only valid attributes for each element</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Unquoted Attributes</td>\r\n        <td>Attribute values not enclosed in quotes</td>\r\n        <td>Always enclose attribute values in single or double quotes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Missing Alt Text</td>\r\n        <td>Images missing required alt attribute</td>\r\n        <td>Add descriptive alt text to all images (use alt=\"\" for decorative images)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Deprecated Elements</td>\r\n        <td>Using outdated HTML elements</td>\r\n        <td>Replace deprecated elements with modern alternatives (e.g., &lt;strong&gt; instead of &lt;b&gt;)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Invalid Character Encoding</td>\r\n        <td>Missing or incorrect character encoding declaration</td>\r\n        <td>Add &lt;meta charset=\"UTF-8\"&gt; in the head section</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>14. Integration with CSS and JavaScript</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n    &lt;title&gt;HTML with CSS and JavaScript&lt;/title&gt;\r\n    \r\n    &lt;!-- External CSS --&gt;\r\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\r\n    \r\n    &lt;!-- Internal CSS --&gt;\r\n    &lt;style&gt;\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            margin: 0;\r\n            padding: 20px;\r\n            background-color: #f5f5f5;\r\n        }\r\n        \r\n        .container {\r\n            max-width: 1200px;\r\n            margin: 0 auto;\r\n            padding: 20px;\r\n            background-color: white;\r\n            border-radius: 5px;\r\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n        }\r\n        \r\n        .btn {\r\n            display: inline-block;\r\n            padding: 10px 20px;\r\n            background-color: #4CAF50;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 4px;\r\n            cursor: pointer;\r\n            font-size: 16px;\r\n        }\r\n        \r\n        .btn:hover {\r\n            background-color: #45a049;\r\n        }\r\n        \r\n        .hidden {\r\n            display: none;\r\n        }\r\n    &lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n    &lt;div class=\"container\"&gt;\r\n        &lt;h1&gt;HTML, CSS, and JavaScript Integration&lt;/h1&gt;\r\n        \r\n        &lt;h2&gt;CSS Examples&lt;/h2&gt;\r\n        \r\n        &lt;!-- Inline CSS --&gt;\r\n        &lt;p style=\"color: blue; font-size: 18px;\"&gt;This paragraph has inline CSS.&lt;/p&gt;\r\n        \r\n        &lt;!-- Internal CSS --&gt;\r\n        &lt;p&gt;This paragraph uses internal CSS.&lt;/p&gt;\r\n        \r\n        &lt;!-- External CSS --&gt;\r\n        &lt;p class=\"external-css\"&gt;This paragraph uses external CSS.&lt;/p&gt;\r\n        \r\n        &lt;h2&gt;JavaScript Examples&lt;/h2&gt;\r\n        \r\n        &lt;!-- Inline JavaScript --&gt;\r\n        &lt;button class=\"btn\" onclick=\"alert(\'Hello from inline JavaScript!\')\"&gt;Click Me (Inline)&lt;/button&gt;\r\n        \r\n        &lt;!-- Internal JavaScript --&gt;\r\n        &lt;button class=\"btn\" id=\"internal-btn\"&gt;Click Me (Internal)&lt;/button&gt;\r\n        \r\n        &lt;!-- DOM Manipulation --&gt;\r\n        &lt;button class=\"btn\" id=\"dom-btn\"&gt;Change Text&lt;/button&gt;\r\n        &lt;p id=\"text-to-change\"&gt;This text will change when you click the button.&lt;/p&gt;\r\n        \r\n        &lt;!-- Form Validation --&gt;\r\n        &lt;form id=\"validation-form\"&gt;\r\n            &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\r\n            &lt;input type=\"email\" id=\"email\" name=\"email\" required&gt;\r\n            &lt;button type=\"submit\" class=\"btn\"&gt;Submit&lt;/button&gt;\r\n            &lt;p id=\"error-message\" class=\"hidden\"&gt;Please enter a valid email address.&lt;/p&gt;\r\n        &lt;/form&gt;\r\n        \r\n        &lt;!-- Dynamic Content --&gt;\r\n        &lt;button class=\"btn\" id=\"content-btn\"&gt;Load Content&lt;/button&gt;\r\n        &lt;div id=\"dynamic-content\"&gt;&lt;/div&gt;\r\n    &lt;/div&gt;\r\n    \r\n    &lt;!-- External JavaScript --&gt;\r\n    &lt;script src=\"script.js\"&gt;&lt;/script&gt;\r\n    \r\n    &lt;!-- Internal JavaScript --&gt;\r\n    &lt;script&gt;\r\n        // Button click event\r\n        document.getElementById(\'internal-btn\').addEventListener(\'click\', function() {\r\n            alert(\'Hello from internal JavaScript!\');\r\n        });\r\n        \r\n        // DOM Manipulation\r\n        document.getElementById(\'dom-btn\').addEventListener(\'click\', function() {\r\n            document.getElementById(\'text-to-change\').textContent = \'The text has been changed!\';\r\n        });\r\n        \r\n        // Form Validation\r\n        document.getElementById(\'validation-form\').addEventListener(\'submit\', function(e) {\r\n            const email = document.getElementById(\'email\').value;\r\n            const errorMessage = document.getElementById(\'error-message\');\r\n            \r\n            if (!email || !email.includes(\'@\')) {\r\n                e.preventDefault();\r\n                errorMessage.classList.remove(\'hidden\');\r\n            } else {\r\n                errorMessage.classList.add(\'hidden\');\r\n            }\r\n        });\r\n        \r\n        // Dynamic Content\r\n        document.getElementById(\'content-btn\').addEventListener(\'click\', function() {\r\n            const contentDiv = document.getElementById(\'dynamic-content\');\r\n            contentDiv.innerHTML = \'&lt;h3&gt;Dynamic Content Loaded!&lt;/h3&gt;&lt;p&gt;This content was loaded using JavaScript.&lt;/p&gt;\';\r\n        });\r\n    &lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Ways to Include CSS and JavaScript in HTML</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Method</th>\r\n        <th>CSS Implementation</th>\r\n        <th>JavaScript Implementation</th>\r\n        <th>Best Use Case</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Inline</td>\r\n        <td>style attribute on HTML elements</td>\r\n        <td>event handlers in HTML attributes</td>\r\n        <td>Quick tests, very specific overrides</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Internal</td>\r\n        <td>&lt;style&gt; tags in the &lt;head&gt; section</td>\r\n        <td>&lt;script&gt; tags in the &lt;body&gt; section</td>\r\n        <td>Single-page websites, page-specific styles/scripts</td>\r\n    </tr>\r\n    <tr>\r\n        <td>External</td>\r\n        <td>&lt;link&gt; tags to .css files</td>\r\n        <td>&lt;script src&gt; tags to .js files</td>\r\n        <td>Multi-page websites, separation of concerns</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>15. Modern HTML Features</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-html\">&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n    &lt;meta charset=\"UTF-8\"&gt;\r\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n    &lt;title&gt;Modern HTML Features&lt;/title&gt;\r\n    &lt;style&gt;\r\n        /* CSS for modern elements */\r\n        .container {\r\n            max-width: 1200px;\r\n            margin: 0 auto;\r\n            padding: 20px;\r\n        }\r\n        \r\n        .progress-container {\r\n            width: 100%;\r\n            background-color: #f1f1f1;\r\n            border-radius: 4px;\r\n            margin: 20px 0;\r\n        }\r\n        \r\n        .progress-bar {\r\n            height: 30px;\r\n            background-color: #4CAF50;\r\n            border-radius: 4px;\r\n            width: 70%;\r\n        }\r\n        \r\n        .meter {\r\n            width: 100%;\r\n            height: 20px;\r\n            background: linear-gradient(to right, #ff0000, #ffff00, #00ff00);\r\n            border-radius: 10px;\r\n        }\r\n        \r\n        .meter-value {\r\n            width: 50%;\r\n            height: 100%;\r\n            background-color: rgba(255, 255, 255, 0.3);\r\n            border-radius: 10px;\r\n        }\r\n    &lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n    &lt;div class=\"container\"&gt;\r\n        &lt;h1&gt;Modern HTML Features&lt;/h1&gt;\r\n        \r\n        &lt;h2&gt;HTML5 Form Elements&lt;/h2&gt;\r\n        \r\n        &lt;form&gt;\r\n            &lt;!-- Color picker --&gt;\r\n            &lt;label for=\"color\"&gt;Choose a color:&lt;/label&gt;\r\n            &lt;input type=\"color\" id=\"color\" name=\"color\"&gt;\r\n            \r\n            &lt;!-- Date picker --&gt;\r\n            &lt;label for=\"date\"&gt;Select a date:&lt;/label&gt;\r\n            &lt;input type=\"date\" id=\"date\" name=\"date\"&gt;\r\n            \r\n            &lt;!-- Date and time --&gt;\r\n            &lt;label for=\"datetime\"&gt;Select date and time:&lt;/label&gt;\r\n            &lt;input type=\"datetime-local\" id=\"datetime\" name=\"datetime\"&gt;\r\n            \r\n            &lt;!-- Month picker --&gt;\r\n            &lt;label for=\"month\"&gt;Select a month:&lt;/label&gt;\r\n            &lt;input type=\"month\" id=\"month\" name=\"month\"&gt;\r\n            \r\n            &lt;!-- Week picker --&gt;\r\n            &lt;label for=\"week\"&gt;Select a week:&lt;/label&gt;\r\n            &lt;input type=\"week\" id=\"week\" name=\"week\"&gt;\r\n            \r\n            &lt;!-- Time picker --&gt;\r\n            &lt;label for=\"time\"&gt;Select a time:&lt;/label&gt;\r\n            &lt;input type=\"time\" id=\"time\" name=\"time\"&gt;\r\n            \r\n            &lt;!-- Number input --&gt;\r\n            &lt;label for=\"quantity\"&gt;Quantity (between 1 and 5):&lt;/label&gt;\r\n            &lt;input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"5\"&gt;\r\n            \r\n            &lt;!-- Range slider --&gt;\r\n            &lt;label for=\"volume\"&gt;Volume (0 to 100):&lt;/label&gt;\r\n            &lt;input type=\"range\" id=\"volume\" name=\"volume\" min=\"0\" max=\"100\"&gt;\r\n            \r\n            &lt;!-- Search input --&gt;\r\n            &lt;label for=\"search\"&gt;Search:&lt;/label&gt;\r\n            &lt;input type=\"search\" id=\"search\" name=\"search\" placeholder=\"Search terms...\"&gt;\r\n            \r\n            &lt;!-- Tel input --&gt;\r\n            &lt;label for=\"phone\"&gt;Phone number:&lt;/label&gt;\r\n            &lt;input type=\"tel\" id=\"phone\" name=\"phone\" placeholder=\"123-456-7890\"&gt;\r\n            \r\n            &lt;!-- URL input --&gt;\r\n            &lt;label for=\"url\"&gt;Website URL:&lt;/label&gt;\r\n            &lt;input type=\"url\" id=\"url\" name=\"url\" placeholder=\"https://example.com\"&gt;\r\n            \r\n            &lt;!-- Email input with multiple attribute --&gt;\r\n            &lt;label for=\"emails\"&gt;Email addresses (comma separated):&lt;/label&gt;\r\n            &lt;input type=\"email\" id=\"emails\" name=\"emails\" multiple&gt;\r\n        &lt;/form&gt;\r\n        \r\n        &lt;h2&gt;Progress and Meter Elements&lt;/h2&gt;\r\n        \r\n        &lt;!-- Progress bar --&gt;\r\n        &lt;label for=\"file\"&gt;File progress:&lt;/label&gt;\r\n        &lt;progress id=\"file\" value=\"70\" max=\"100\"&gt;70%&lt;/progress&gt;\r\n        \r\n        &lt;!-- Custom progress bar --&gt;\r\n        &lt;div class=\"progress-container\"&gt;\r\n            &lt;div class=\"progress-bar\"&gt;&lt;/div&gt;\r\n        &lt;/div&gt;\r\n        \r\n        &lt;!-- Meter element --&gt;\r\n        &lt;label for=\"fuel\"&gt;Fuel gauge:&lt;/label&gt;\r\n        &lt;meter id=\"fuel\" value=\"0.5\" min=\"0\" max=\"1\" low=\"0.3\" high=\"0.8\" optimum=\"0.7\"&gt;50%&lt;/meter&gt;\r\n        \r\n        &lt;!-- Custom meter --&gt;\r\n        &lt;div class=\"meter\"&gt;\r\n            &lt;div class=\"meter-value\"&gt;&lt;/div&gt;\r\n        &lt;/div&gt;\r\n        \r\n        &lt;h2&gt;Details and Summary Elements&lt;/h2&gt;\r\n        \r\n        &lt;!-- Collapsible content --&gt;\r\n        &lt;details&gt;\r\n            &lt;summary&gt;Click to expand&lt;/summary&gt;\r\n            &lt;p&gt;This content is hidden by default and shown when the user clicks on the summary.&lt;/p&gt;\r\n        &lt;/details&gt;\r\n        \r\n        &lt;h2&gt;Dialog Element&lt;/h2&gt;\r\n        \r\n        &lt;!-- Dialog box --&gt;\r\n        &lt;dialog id=\"myDialog\"&gt;\r\n            &lt;p&gt;This is a dialog box.&lt;/p&gt;\r\n            &lt;button id=\"closeDialog\"&gt;Close&lt;/button&gt;\r\n        &lt;/dialog&gt;\r\n        \r\n        &lt;button id=\"showDialog\"&gt;Show Dialog&lt;/button&gt;\r\n        \r\n        &lt;h2&gt;Picture Element&lt;/h2&gt;\r\n        \r\n        &lt;!-- Responsive images --&gt;\r\n        &lt;picture&gt;\r\n            &lt;source media=\"(min-width: 650px)\" srcset=\"img_pink_flowers.jpg\"&gt;\r\n            &lt;source media=\"(min-width: 465px)\" srcset=\"img_white_flower.jpg\"&gt;\r\n            &lt;img src=\"img_orange_flowers.jpg\" alt=\"Flowers\"&gt;\r\n        &lt;/picture&gt;\r\n        \r\n        &lt;h2&gt;Data Element&lt;/h2&gt;\r\n        \r\n        &lt;!-- Machine-readable value --&gt;\r\n        &lt;p&gt;The product costs &lt;data value=\"29.99\"&gt;$29.99&lt;/data&gt;.&lt;/p&gt;\r\n        \r\n        &lt;h2&gt;Time Element&lt;/h2&gt;\r\n        \r\n        &lt;!-- Machine-readable date/time --&gt;\r\n        &lt;p&gt;The event starts at &lt;time datetime=\"2023-12-25T09:00:00\"&gt;9:00 AM on Christmas Day&lt;/time&gt;.&lt;/p&gt;\r\n        \r\n        &lt;h2&gt;Output Element&lt;/h2&gt;\r\n        \r\n        &lt;!-- Calculation result --&gt;\r\n        &lt;form oninput=\"result.value=parseInt(a.value)+parseInt(b.value)\"&gt;\r\n            &lt;input type=\"number\" id=\"a\" value=\"10\"&gt; +\r\n            &lt;input type=\"number\" id=\"b\" value=\"20\"&gt; =\r\n            &lt;output name=\"result\" for=\"a b\"&gt;30&lt;/output&gt;\r\n        &lt;/form&gt;\r\n    &lt;/div&gt;\r\n    \r\n    &lt;script&gt;\r\n        // Dialog functionality\r\n        const dialog = document.getElementById(\'myDialog\');\r\n        const showDialogBtn = document.getElementById(\'showDialog\');\r\n        const closeDialogBtn = document.getElementById(\'closeDialog\');\r\n        \r\n        showDialogBtn.addEventListener(\'click\', () => {\r\n            dialog.showModal();\r\n        });\r\n        \r\n        closeDialogBtn.addEventListener(\'click\', () => {\r\n            dialog.close();\r\n        });\r\n    &lt;/script&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Modern HTML5 Elements</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Element</th>\r\n        <th>Description</th>\r\n        <th>Use Case</th>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;progress&gt;</td>\r\n        <td>Represents the completion progress of a task</td>\r\n        <td>File uploads, loading indicators, completion status</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;meter&gt;</td>\r\n        <td>Represents a scalar measurement within a known range</td>\r\n        <td>Disk usage, fuel gauges, temperature readings</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;details&gt;</td>\r\n        <td>Creates a disclosure widget for additional content</td>\r\n        <td>FAQ sections, collapsible content, settings panels</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;summary&gt;</td>\r\n        <td>Provides a visible heading for a &lt;details&gt; element</td>\r\n        <td>Summary for collapsible content</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;dialog&gt;</td>\r\n        <td>Represents a dialog box or other interactive component</td>\r\n        <td>Modals, alerts, confirmation dialogs</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;picture&gt;</td>\r\n        <td>Provides multiple sources for an image</td>\r\n        <td>Responsive images, art direction, different formats</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;data&gt;</td>\r\n        <td>Links a piece of content with a machine-readable translation</td>\r\n        <td>Product prices, dates, measurements</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;time&gt;</td>\r\n        <td>Represents a specific time or date</td>\r\n        <td>Event dates, publication times, schedules</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;output&gt;</td>\r\n        <td>Represents the result of a calculation</td>\r\n        <td>Form calculations, interactive tools</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;template&gt;</td>\r\n        <td>Contains HTML fragments that can be cloned and inserted</td>\r\n        <td>Reusable components, dynamic content generation</td>\r\n    </tr>\r\n</table>\r\n\r\n<hr>\r\n<p>By following these lessons, you\'ll progress from HTML basics to advanced features like semantic HTML, responsive design, form elements, multimedia, integration with CSS and JavaScript, and modern HTML5 features. Keep practicing each example to build real web projects step by step.</p>\r\n\r\n<!-- Prism.js core + HTML language component -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js\"></script>\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n    position: relative;\r\n    margin: 1em 0;\r\n    background: #1e1e1e;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n.code-container pre {\r\n    margin: 0;\r\n    padding: 1em;\r\n    overflow-x: auto;\r\n    font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n}\r\n.copy-btn {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background: #007acc;\r\n    border: none;\r\n    color: #fff;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n}\r\n.copy-btn:hover {\r\n    background: #005f99;\r\n}\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin: 1em 0;\r\n}\r\ntable th, table td {\r\n    padding: 8px;\r\n    text-align: left;\r\n    border: 1px solid #ddd;\r\n}\r\ntable th {\r\n    background-color: #f2f2f2;\r\n    font-weight: bold;\r\n}\r\n</style>\r\n<script>\r\nfunction copyCode(button) {\r\n    const code = button.nextElementSibling.innerText;\r\n    navigator.clipboard.writeText(code).then(() => {\r\n        button.innerText = \"Copied!\";\r\n        setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n    });\r\n}\r\n</script>', 'HTML Programming Lessons - Beginner to Advanced', '1757847685_HTML.png', 8, 1, 'published', '2025-09-13 21:00:34', '2025-09-14 11:01:25');
INSERT INTO `posts` (`id`, `title`, `content`, `excerpt`, `featured_image`, `category_id`, `author_id`, `status`, `created_at`, `updated_at`) VALUES
(9, 'CSS Programming Lessons', '# CSS Programming Lessons – Beginner to Advanced\r\n\r\n<p>Welcome to the CSS programming lesson series! We\'ll learn CSS step by step — starting from the basics and moving toward advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n## CSS Course Outline\r\n\r\n<ul>\r\n    <li>CSS Basics and Syntax</li>\r\n    <li>Selectors (Element, Class, ID, Attribute)</li>\r\n    <li>Box Model (Margin, Border, Padding, Content)</li>\r\n    <li>Colors and Backgrounds</li>\r\n    <li>Text and Typography</li>\r\n    <li>Layout Techniques (Float, Position, Display)</li>\r\n    <li>Flexbox</li>\r\n    <li>CSS Grid</li>\r\n    <li>Responsive Design (Media Queries)</li>\r\n    <li>Transitions and Animations</li>\r\n    <li>Transforms</li>\r\n    <li>CSS Variables (Custom Properties)</li>\r\n    <li>Pseudo-classes and Pseudo-elements</li>\r\n    <li>CSS Functions</li>\r\n    <li>Advanced Techniques (Blend Modes, Filters, Clipping)</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (keeps your existing dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>1. CSS Basics and Syntax</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* CSS Syntax */\r\nselector {\r\n    property: value;\r\n    property2: value2;\r\n}\r\n\r\n/* Example */\r\nbody {\r\n    font-family: Arial, sans-serif;\r\n    background-color: #f0f0f0;\r\n    margin: 0;\r\n    padding: 20px;\r\n}\r\n\r\nh1 {\r\n    color: #333333;\r\n    text-align: center;\r\n}</code></pre>\r\n</div>\r\n\r\n<p>CSS (Cascading Style Sheets) is used to style and layout web pages. It consists of:</p>\r\n<ul>\r\n    <li><strong>Selectors</strong> - Target HTML elements to apply styles</li>\r\n    <li><strong>Properties</strong> - Style attributes to change</li>\r\n    <li><strong>Values</strong> - Settings for each property</li>\r\n</ul>\r\n\r\n<h3>2. Selectors (Element, Class, ID, Attribute)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Element Selector */\r\np {\r\n    color: blue;\r\n}\r\n\r\n/* Class Selector */\r\n.highlight {\r\n    background-color: yellow;\r\n    font-weight: bold;\r\n}\r\n\r\n/* ID Selector */\r\n#header {\r\n    border-bottom: 2px solid #333;\r\n}\r\n\r\n/* Attribute Selector */\r\ninput[type=\"text\"] {\r\n    border: 1px solid #ccc;\r\n    padding: 8px;\r\n}\r\n\r\n/* Grouping Selectors */\r\nh1, h2, h3 {\r\n    font-family: \'Georgia\', serif;\r\n    color: #444;\r\n}\r\n\r\n/* Descendant Selector */\r\nnav ul {\r\n    list-style-type: none;\r\n}\r\n\r\n/* Child Selector */\r\nul > li {\r\n    margin-bottom: 10px;\r\n}\r\n\r\n/* Adjacent Sibling Selector */\r\nh2 + p {\r\n    font-style: italic;\r\n}\r\n\r\n/* General Sibling Selector */\r\nh2 ~ p {\r\n    color: #666;\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>CSS Selector Types</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Selector Type</th>\r\n        <th>Syntax</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Element</td>\r\n        <td>element</td>\r\n        <td>Selects all elements of the specified type</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Class</td>\r\n        <td>.class</td>\r\n        <td>Selects all elements with the specified class</td>\r\n    </tr>\r\n    <tr>\r\n        <td>ID</td>\r\n        <td>#id</td>\r\n        <td>Selects the element with the specified ID</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Attribute</td>\r\n        <td>[attribute]</td>\r\n        <td>Selects elements with the specified attribute</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Universal</td>\r\n        <td>*</td>\r\n        <td>Selects all elements</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Grouping</td>\r\n        <td>selector1, selector2</td>\r\n        <td>Selects multiple selectors</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Descendant</td>\r\n        <td>selector1 selector2</td>\r\n        <td>Selects elements inside other elements</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Child</td>\r\n        <td>selector1 > selector2</td>\r\n        <td>Selects direct child elements</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Adjacent Sibling</td>\r\n        <td>selector1 + selector2</td>\r\n        <td>Selects elements that are adjacent siblings</td>\r\n    </tr>\r\n    <tr>\r\n        <td>General Sibling</td>\r\n        <td>selector1 ~ selector2</td>\r\n        <td>Selects elements that are siblings</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>3. Box Model (Margin, Border, Padding, Content)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Box Model Example */\r\n.box {\r\n    width: 300px;\r\n    height: 150px;\r\n    \r\n    /* Content */\r\n    background-color: #f0f0f0;\r\n    \r\n    /* Padding - space around content */\r\n    padding: 20px;\r\n    \r\n    /* Border - around padding and content */\r\n    border: 5px solid #333;\r\n    \r\n    /* Margin - space outside border */\r\n    margin: 30px;\r\n}\r\n\r\n/* Shorthand properties */\r\n.box {\r\n    /* margin: top right bottom left */\r\n    margin: 10px 20px 15px 5px;\r\n    \r\n    /* padding: top right bottom left */\r\n    padding: 10px 20px;\r\n    \r\n    /* border: width style color */\r\n    border: 2px dotted #666;\r\n}\r\n\r\n/* Individual sides */\r\n.box {\r\n    margin-top: 10px;\r\n    margin-right: 20px;\r\n    margin-bottom: 15px;\r\n    margin-left: 5px;\r\n    \r\n    border-top: 2px solid #333;\r\n    border-right: 2px dashed #666;\r\n    border-bottom: 2px dotted #999;\r\n    border-left: 2px double #ccc;\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>CSS Box Model Properties</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Component</th>\r\n        <th>Description</th>\r\n        <th>Properties</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Content</td>\r\n        <td>The actual content of the box (text, images, etc.)</td>\r\n        <td>width, height, max-width, max-height, min-width, min-height</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Padding</td>\r\n        <td>Space around the content, inside the border</td>\r\n        <td>padding, padding-top, padding-right, padding-bottom, padding-left</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Border</td>\r\n        <td>A line around the padding and content</td>\r\n        <td>border, border-width, border-style, border-color, border-radius</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Margin</td>\r\n        <td>Space outside the border, between elements</td>\r\n        <td>margin, margin-top, margin-right, margin-bottom, margin-left</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>4. Colors and Backgrounds</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Color Values */\r\n.text-primary {\r\n    /* Named color */\r\n    color: blue;\r\n    \r\n    /* Hexadecimal */\r\n    color: #3498db;\r\n    \r\n    /* RGB */\r\n    color: rgb(52, 152, 219);\r\n    \r\n    /* RGBA (with transparency) */\r\n    color: rgba(52, 152, 219, 0.7);\r\n    \r\n    /* HSL */\r\n    color: hsl(204, 70%, 53%);\r\n    \r\n    /* HSLA (with transparency) */\r\n    color: hsla(204, 70%, 53%, 0.7);\r\n}\r\n\r\n/* Background Properties */\r\n.bg-example {\r\n    /* Background color */\r\n    background-color: #f8f9fa;\r\n    \r\n    /* Background image */\r\n    background-image: url(\'pattern.png\');\r\n    \r\n    /* Background repeat */\r\n    background-repeat: no-repeat;\r\n    /* Other values: repeat, repeat-x, repeat-y, space, round */\r\n    \r\n    /* Background position */\r\n    background-position: center center;\r\n    /* Other values: top, bottom, left, right, percentages, pixels */\r\n    \r\n    /* Background size */\r\n    background-size: cover;\r\n    /* Other values: contain, auto, specific dimensions */\r\n    \r\n    /* Background attachment */\r\n    background-attachment: fixed;\r\n    /* Other values: scroll, local */\r\n    \r\n    /* Shorthand */\r\n    background: #f8f9fa url(\'pattern.png\') no-repeat center center/cover fixed;\r\n}\r\n\r\n/* Gradient Backgrounds */\r\n.gradient-bg {\r\n    /* Linear gradient */\r\n    background: linear-gradient(to right, #ff7e5f, #feb47b);\r\n    \r\n    /* Radial gradient */\r\n    background: radial-gradient(circle, #ff7e5f, #feb47b);\r\n    \r\n    /* Multiple backgrounds */\r\n    background: \r\n        url(\'image1.png\') no-repeat top left,\r\n        url(\'image2.png\') no-repeat bottom right,\r\n        linear-gradient(to bottom, rgba(255,255,255,0.8), rgba(255,255,255,0.2));\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>CSS Color Formats</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Format</th>\r\n        <th>Syntax</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Named Colors</td>\r\n        <td>red, blue, green</td>\r\n        <td>147 predefined color names</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Hexadecimal</td>\r\n        <td>#RRGGBB or #RGB</td>\r\n        <td>Hexadecimal representation of RGB values</td>\r\n    </tr>\r\n    <tr>\r\n        <td>RGB</td>\r\n        <td>rgb(R, G, B)</td>\r\n        <td>Red, Green, Blue values (0-255)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>RGBA</td>\r\n        <td>rgba(R, G, B, A)</td>\r\n        <td>RGB with Alpha transparency (0.0-1.0)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>HSL</td>\r\n        <td>hsl(H, S%, L%)</td>\r\n        <td>Hue (0-360), Saturation (0-100%), Lightness (0-100%)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>HSLA</td>\r\n        <td>hsla(H, S%, L%, A)</td>\r\n        <td>HSL with Alpha transparency (0.0-1.0)</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>5. Text and Typography</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Font Properties */\r\n.text-example {\r\n    /* Font family */\r\n    font-family: \'Arial\', sans-serif;\r\n    font-family: \'Georgia\', serif;\r\n    font-family: \'Courier New\', monospace;\r\n    font-family: \'Comic Sans MS\', cursive;\r\n    \r\n    /* Font size */\r\n    font-size: 16px;\r\n    font-size: 1em; /* Relative to parent element */\r\n    font-size: 1rem; /* Relative to root element */\r\n    font-size: 100%; /* Percentage of parent element */\r\n    \r\n    /* Font weight */\r\n    font-weight: normal;\r\n    font-weight: bold;\r\n    font-weight: 400; /* Numeric value (100-900) */\r\n    \r\n    /* Font style */\r\n    font-style: normal;\r\n    font-style: italic;\r\n    font-style: oblique;\r\n    \r\n    /* Font variant */\r\n    font-variant: normal;\r\n    font-variant: small-caps;\r\n    \r\n    /* Shorthand */\r\n    font: italic bold 16px/1.5 \'Arial\', sans-serif;\r\n    /* Order: style variant weight size/line-height family */\r\n}\r\n\r\n/* Text Properties */\r\n.text-properties {\r\n    /* Text alignment */\r\n    text-align: left;\r\n    text-align: center;\r\n    text-align: right;\r\n    text-align: justify;\r\n    \r\n    /* Text decoration */\r\n    text-decoration: none;\r\n    text-decoration: underline;\r\n    text-decoration: overline;\r\n    text-decoration: line-through;\r\n    text-decoration: underline overline;\r\n    \r\n    /* Text transform */\r\n    text-transform: none;\r\n    text-transform: capitalize;\r\n    text-transform: uppercase;\r\n    text-transform: lowercase;\r\n    \r\n    /* Text indentation */\r\n    text-indent: 20px;\r\n    text-indent: 2em;\r\n    \r\n    /* Letter spacing */\r\n    letter-spacing: 1px;\r\n    letter-spacing: 0.1em;\r\n    \r\n    /* Word spacing */\r\n    word-spacing: 2px;\r\n    word-spacing: 0.2em;\r\n    \r\n    /* Line height */\r\n    line-height: 1.5;\r\n    line-height: 1.5em;\r\n    line-height: 150%;\r\n    \r\n    /* Text direction */\r\n    direction: ltr; /* Left to right */\r\n    direction: rtl; /* Right to left */\r\n    \r\n    /* White space */\r\n    white-space: normal;\r\n    white-space: nowrap;\r\n    white-space: pre;\r\n    white-space: pre-line;\r\n    white-space: pre-wrap;\r\n    \r\n    /* Text overflow */\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n}\r\n\r\n/* Web Fonts */\r\n@import url(\'https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap\');\r\n\r\n.web-font {\r\n    font-family: \'Roboto\', sans-serif;\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>CSS Typography Properties</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Property</th>\r\n        <th>Description</th>\r\n        <th>Common Values</th>\r\n    </tr>\r\n    <tr>\r\n        <td>font-family</td>\r\n        <td>Specifies the font for text</td>\r\n        <td>sans-serif, serif, monospace, specific font names</td>\r\n    </tr>\r\n    <tr>\r\n        <td>font-size</td>\r\n        <td>Sets the size of text</td>\r\n        <td>px, em, rem, %, keywords (small, medium, large)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>font-weight</td>\r\n        <td>Sets the thickness of text</td>\r\n        <td>normal, bold, bolder, lighter, 100-900</td>\r\n    </tr>\r\n    <tr>\r\n        <td>font-style</td>\r\n        <td>Sets the style of text</td>\r\n        <td>normal, italic, oblique</td>\r\n    </tr>\r\n    <tr>\r\n        <td>text-align</td>\r\n        <td>Specifies horizontal alignment</td>\r\n        <td>left, right, center, justify</td>\r\n    </tr>\r\n    <tr>\r\n        <td>text-decoration</td>\r\n        <td>Adds decoration to text</td>\r\n        <td>none, underline, overline, line-through</td>\r\n    </tr>\r\n    <tr>\r\n        <td>text-transform</td>\r\n        <td>Controls capitalization</td>\r\n        <td>none, capitalize, uppercase, lowercase</td>\r\n    </tr>\r\n    <tr>\r\n        <td>line-height</td>\r\n        <td>Sets space between lines</td>\r\n        <td>number, unitless, px, em, %</td>\r\n    </tr>\r\n    <tr>\r\n        <td>letter-spacing</td>\r\n        <td>Sets space between characters</td>\r\n        <td>normal, px, em, rem</td>\r\n    </tr>\r\n    <tr>\r\n        <td>word-spacing</td>\r\n        <td>Sets space between words</td>\r\n        <td>normal, px, em, rem</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>6. Layout Techniques (Float, Position, Display)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Display Property */\r\n.display-example {\r\n    display: block;   /* Full width, starts on new line */\r\n    display: inline;  /* Only as wide as content, no line break */\r\n    display: inline-block; /* Inline but respects width/height */\r\n    display: none;    /* Hides element */\r\n    display: flex;    /* Flexbox layout */\r\n    display: grid;    /* Grid layout */\r\n}\r\n\r\n/* Position Property */\r\n.position-example {\r\n    /* Static positioning (default) */\r\n    position: static;\r\n    \r\n    /* Relative positioning */\r\n    position: relative;\r\n    top: 10px;\r\n    left: 20px;\r\n    \r\n    /* Absolute positioning */\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    \r\n    /* Fixed positioning */\r\n    position: fixed;\r\n    bottom: 0;\r\n    left: 0;\r\n    \r\n    /* Sticky positioning */\r\n    position: sticky;\r\n    top: 10px;\r\n}\r\n\r\n/* Float Property */\r\n.float-example {\r\n    float: left;\r\n    float: right;\r\n    float: none;\r\n    \r\n    /* Clear floats */\r\n    clear: both;\r\n    clear: left;\r\n    clear: right;\r\n}\r\n\r\n/* Clearfix for containing floats */\r\n.clearfix::after {\r\n    content: \"\";\r\n    display: table;\r\n    clear: both;\r\n}\r\n\r\n/* Z-index for stacking order */\r\n.z-index-example {\r\n    position: relative;\r\n    z-index: 1; /* Higher values appear on top */\r\n}\r\n\r\n/* Overflow property */\r\n.overflow-example {\r\n    overflow: visible; /* Default */\r\n    overflow: hidden;  /* Clips content */\r\n    overflow: scroll;  /* Adds scrollbars */\r\n    overflow: auto;   /* Adds scrollbars only when needed */\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>CSS Position Values</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Value</th>\r\n        <th>Description</th>\r\n        <th>Use Case</th>\r\n    </tr>\r\n    <tr>\r\n        <td>static</td>\r\n        <td>Default position, follows normal document flow</td>\r\n        <td>Standard elements in document flow</td>\r\n    </tr>\r\n    <tr>\r\n        <td>relative</td>\r\n        <td>Positioned relative to its normal position</td>\r\n        <td>Minor adjustments to element position</td>\r\n    </tr>\r\n    <tr>\r\n        <td>absolute</td>\r\n        <td>Positioned relative to nearest positioned ancestor</td>\r\n        <td>Precise positioning within a container</td>\r\n    </tr>\r\n    <tr>\r\n        <td>fixed</td>\r\n        <td>Positioned relative to the viewport</td>\r\n        <td>Sticky headers, fixed sidebars</td>\r\n    </tr>\r\n    <tr>\r\n        <td>sticky</td>\r\n        <td>Toggles between relative and fixed based on scroll</td>\r\n        <td>Elements that stick when scrolling</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>7. Flexbox</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Flex Container */\r\n.flex-container {\r\n    display: flex;\r\n    \r\n    /* Flex direction */\r\n    flex-direction: row; /* Default */\r\n    flex-direction: row-reverse;\r\n    flex-direction: column;\r\n    flex-direction: column-reverse;\r\n    \r\n    /* Flex wrap */\r\n    flex-wrap: nowrap; /* Default */\r\n    flex-wrap: wrap;\r\n    flex-wrap: wrap-reverse;\r\n    \r\n    /* Shorthand for direction and wrap */\r\n    flex-flow: row wrap;\r\n    \r\n    /* Justify content (main axis) */\r\n    justify-content: flex-start; /* Default */\r\n    justify-content: flex-end;\r\n    justify-content: center;\r\n    justify-content: space-between;\r\n    justify-content: space-around;\r\n    justify-content: space-evenly;\r\n    \r\n    /* Align items (cross axis) */\r\n    align-items: stretch; /* Default */\r\n    align-items: flex-start;\r\n    align-items: flex-end;\r\n    align-items: center;\r\n    align-items: baseline;\r\n    \r\n    /* Align content (for wrapped lines) */\r\n    align-content: stretch; /* Default */\r\n    align-content: flex-start;\r\n    align-content: flex-end;\r\n    align-content: center;\r\n    align-content: space-between;\r\n    align-content: space-around;\r\n    \r\n    /* Gap between items */\r\n    gap: 10px;\r\n    row-gap: 10px;\r\n    column-gap: 10px;\r\n}\r\n\r\n/* Flex Items */\r\n.flex-item {\r\n    /* Flex grow factor */\r\n    flex-grow: 0; /* Default */\r\n    flex-grow: 1; /* Takes available space */\r\n    \r\n    /* Flex shrink factor */\r\n    flex-shrink: 1; /* Default */\r\n    flex-shrink: 0; /* Prevents shrinking */\r\n    \r\n    /* Flex basis */\r\n    flex-basis: auto; /* Default */\r\n    flex-basis: 200px;\r\n    \r\n    /* Shorthand for grow, shrink, basis */\r\n    flex: 0 1 auto; /* Default */\r\n    flex: 1; /* flex: 1 1 0% */\r\n    \r\n    /* Align self (overrides container\'s align-items) */\r\n    align-self: auto; /* Default */\r\n    align-self: flex-start;\r\n    align-self: flex-end;\r\n    align-self: center;\r\n    align-self: baseline;\r\n    align-self: stretch;\r\n    \r\n    /* Order */\r\n    order: 0; /* Default */\r\n    order: 1; /* Higher values appear later */\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Flexbox Properties</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Property</th>\r\n        <th>Applies To</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>display: flex</td>\r\n        <td>Container</td>\r\n        <td>Creates a flex container</td>\r\n    </tr>\r\n    <tr>\r\n        <td>flex-direction</td>\r\n        <td>Container</td>\r\n        <td>Sets the direction of flex items</td>\r\n    </tr>\r\n    <tr>\r\n        <td>flex-wrap</td>\r\n        <td>Container</td>\r\n        <td>Controls whether items wrap</td>\r\n    </tr>\r\n    <tr>\r\n        <td>justify-content</td>\r\n        <td>Container</td>\r\n        <td>Aligns items along the main axis</td>\r\n    </tr>\r\n    <tr>\r\n        <td>align-items</td>\r\n        <td>Container</td>\r\n        <td>Aligns items along the cross axis</td>\r\n    </tr>\r\n    <tr>\r\n        <td>align-content</td>\r\n        <td>Container</td>\r\n        <td>Aligns flex lines when wrapped</td>\r\n    </tr>\r\n    <tr>\r\n        <td>flex-grow</td>\r\n        <td>Items</td>\r\n        <td>Defines ability to grow</td>\r\n    </tr>\r\n    <tr>\r\n        <td>flex-shrink</td>\r\n        <td>Items</td>\r\n        <td>Defines ability to shrink</td>\r\n    </tr>\r\n    <tr>\r\n        <td>flex-basis</td>\r\n        <td>Items</td>\r\n        <td>Defines initial main size</td>\r\n    </tr>\r\n    <tr>\r\n        <td>align-self</td>\r\n        <td>Items</td>\r\n        <td>Overrides container\'s align-items</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>8. CSS Grid</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Grid Container */\r\n.grid-container {\r\n    display: grid;\r\n    \r\n    /* Grid template columns */\r\n    grid-template-columns: 1fr 1fr 1fr; /* Three equal columns */\r\n    grid-template-columns: 200px 1fr; /* Fixed and flexible columns */\r\n    grid-template-columns: repeat(3, 1fr); /* Repeat pattern */\r\n    grid-template-columns: 1fr 2fr 1fr; /* Different proportions */\r\n    \r\n    /* Grid template rows */\r\n    grid-template-rows: auto 200px; /* Auto and fixed rows */\r\n    grid-template-rows: repeat(2, 100px); /* Repeat pattern */\r\n    \r\n    /* Grid template areas */\r\n    grid-template-areas:\r\n        \"header header header\"\r\n        \"sidebar content content\"\r\n        \"footer footer footer\";\r\n    \r\n    /* Grid gap */\r\n    gap: 20px;\r\n    row-gap: 20px;\r\n    column-gap: 20px;\r\n    \r\n    /* Justify items (aligns items in cells) */\r\n    justify-items: stretch; /* Default */\r\n    justify-items: start;\r\n    justify-items: end;\r\n    justify-items: center;\r\n    \r\n    /* Align items (aligns items in cells) */\r\n    align-items: stretch; /* Default */\r\n    align-items: start;\r\n    align-items: end;\r\n    align-items: center;\r\n    \r\n    /* Justify content (aligns grid in container) */\r\n    justify-content: start; /* Default */\r\n    justify-content: end;\r\n    justify-content: center;\r\n    justify-content: space-between;\r\n    justify-content: space-around;\r\n    justify-content: space-evenly;\r\n    \r\n    /* Align content (aligns grid in container) */\r\n    align-content: start; /* Default */\r\n    align-content: end;\r\n    align-content: center;\r\n    align-content: space-between;\r\n    align-content: space-around;\r\n    align-content: space-evenly;\r\n}\r\n\r\n/* Grid Items */\r\n.grid-item {\r\n    /* Grid column placement */\r\n    grid-column: 1; /* Start at column line 1 */\r\n    grid-column: 1 / 3; /* From line 1 to line 3 */\r\n    grid-column: span 2; /* Span 2 columns */\r\n    \r\n    /* Grid row placement */\r\n    grid-row: 1; /* Start at row line 1 */\r\n    grid-row: 1 / 3; /* From line 1 to line 3 */\r\n    grid-row: span 2; /* Span 2 rows */\r\n    \r\n    /* Grid area (using named areas) */\r\n    grid-area: header;\r\n    grid-area: 1 / 1 / 2 / 4; /* row-start / col-start / row-end / col-end */\r\n    \r\n    /* Justify self (overrides container\'s justify-items) */\r\n    justify-self: start;\r\n    justify-self: end;\r\n    justify-self: center;\r\n    justify-self: stretch;\r\n    \r\n    /* Align self (overrides container\'s align-items) */\r\n    align-self: start;\r\n    align-self: end;\r\n    align-self: center;\r\n    align-self: stretch;\r\n    \r\n    /* Order */\r\n    order: 0; /* Default */\r\n    order: 1; /* Higher values appear later */\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>CSS Grid vs Flexbox</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Feature</th>\r\n        <th>CSS Grid</th>\r\n        <th>Flexbox</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Dimensionality</td>\r\n        <td>Two-dimensional (rows and columns)</td>\r\n        <td>One-dimensional (row or column)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Layout Type</td>\r\n        <td>Grid-based layout</td>\r\n        <td>Content-based layout</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Best For</td>\r\n        <td>Complex layouts with rows and columns</td>\r\n        <td>Components and smaller layouts</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Alignment</td>\r\n        <td>Aligns items in both dimensions</td>\r\n        <td>Aligns items in one dimension</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Item Placement</td>\r\n        <td>Items can be placed in specific grid cells</td>\r\n        <td>Items flow along one axis</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Browser Support</td>\r\n        <td>Good in modern browsers</td>\r\n        <td>Excellent in all modern browsers</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>9. Responsive Design (Media Queries)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Basic Media Query */\r\n@media (max-width: 768px) {\r\n    body {\r\n        font-size: 14px;\r\n    }\r\n    \r\n    .container {\r\n        width: 100%;\r\n        padding: 10px;\r\n    }\r\n}\r\n\r\n/* Media Query with Multiple Conditions */\r\n@media (min-width: 768px) and (max-width: 1024px) {\r\n    .sidebar {\r\n        width: 30%;\r\n        float: left;\r\n    }\r\n    \r\n    .main-content {\r\n        width: 70%;\r\n        float: right;\r\n    }\r\n}\r\n\r\n/* Orientation Media Query */\r\n@media (orientation: portrait) {\r\n    .header {\r\n        height: 80px;\r\n    }\r\n}\r\n\r\n@media (orientation: landscape) {\r\n    .header {\r\n        height: 60px;\r\n    }\r\n}\r\n\r\n/* Device-specific Media Queries */\r\n/* Smartphones (portrait and landscape) */\r\n@media only screen and (min-device-width: 320px) and (max-device-width: 480px) {\r\n    /* Styles for smartphones */\r\n}\r\n\r\n/* Tablets (portrait and landscape) */\r\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) {\r\n    /* Styles for tablets */\r\n}\r\n\r\n/* Desktops and laptops */\r\n@media only screen and (min-width: 1224px) {\r\n    /* Styles for desktops */\r\n}\r\n\r\n/* Large screens */\r\n@media only screen and (min-width: 1824px) {\r\n    /* Styles for large screens */\r\n}\r\n\r\n/* High-resolution screens */\r\n@media only screen and (-webkit-min-device-pixel-ratio: 2),\r\n       only screen and (min-resolution: 192dpi) {\r\n    /* Styles for high-resolution screens */\r\n}\r\n\r\n/* Responsive Typography */\r\nhtml {\r\n    font-size: 16px; /* Base font size */\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    html {\r\n        font-size: 14px;\r\n    }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n    html {\r\n        font-size: 12px;\r\n    }\r\n}\r\n\r\n/* Responsive Images */\r\n.responsive-img {\r\n    max-width: 100%;\r\n    height: auto;\r\n}\r\n\r\n/* Responsive Navigation */\r\n.nav {\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .nav {\r\n        flex-direction: column;\r\n    }\r\n    \r\n    .nav-item {\r\n        margin: 5px 0;\r\n    }\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Common Breakpoints</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Device Type</th>\r\n        <th>Breakpoint Range</th>\r\n        <th>Common CSS Media Query</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Mobile Phones</td>\r\n        <td>320px - 576px</td>\r\n        <td>@media (max-width: 576px)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Tablets</td>\r\n        <td>576px - 992px</td>\r\n        <td>@media (min-width: 577px) and (max-width: 992px)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Small Desktops</td>\r\n        <td>992px - 1200px</td>\r\n        <td>@media (min-width: 993px) and (max-width: 1200px)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Large Desktops</td>\r\n        <td>1200px and above</td>\r\n        <td>@media (min-width: 1201px)</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>10. Transitions and Animations</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Transitions */\r\n.transition-example {\r\n    /* Transition property */\r\n    transition-property: background-color, transform;\r\n    \r\n    /* Transition duration */\r\n    transition-duration: 0.3s;\r\n    \r\n    /* Transition timing function */\r\n    transition-timing-function: ease; /* Default */\r\n    transition-timing-function: linear;\r\n    transition-timing-function: ease-in;\r\n    transition-timing-function: ease-out;\r\n    transition-timing-function: ease-in-out;\r\n    transition-timing-function: cubic-bezier(0.1, 0.7, 1.0, 0.1);\r\n    \r\n    /* Transition delay */\r\n    transition-delay: 0.1s;\r\n    \r\n    /* Shorthand */\r\n    transition: background-color 0.3s ease, transform 0.5s ease-in-out 0.1s;\r\n}\r\n\r\n/* Animations */\r\n@keyframes slideIn {\r\n    from {\r\n        transform: translateX(-100%);\r\n        opacity: 0;\r\n    }\r\n    to {\r\n        transform: translateX(0);\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n@keyframes pulse {\r\n    0% {\r\n        transform: scale(1);\r\n    }\r\n    50% {\r\n        transform: scale(1.1);\r\n    }\r\n    100% {\r\n        transform: scale(1);\r\n    }\r\n}\r\n\r\n.animation-example {\r\n    /* Animation name */\r\n    animation-name: slideIn;\r\n    \r\n    /* Animation duration */\r\n    animation-duration: 0.5s;\r\n    \r\n    /* Animation timing function */\r\n    animation-timing-function: ease-in-out;\r\n    \r\n    /* Animation delay */\r\n    animation-delay: 0.2s;\r\n    \r\n    /* Animation iteration count */\r\n    animation-iteration-count: 1; /* Default */\r\n    animation-iteration-count: 3;\r\n    animation-iteration-count: infinite;\r\n    \r\n    /* Animation direction */\r\n    animation-direction: normal; /* Default */\r\n    animation-direction: reverse;\r\n    animation-direction: alternate;\r\n    animation-direction: alternate-reverse;\r\n    \r\n    /* Animation fill mode */\r\n    animation-fill-mode: none; /* Default */\r\n    animation-fill-mode: forwards;\r\n    animation-fill-mode: backwards;\r\n    animation-fill-mode: both;\r\n    \r\n    /* Animation play state */\r\n    animation-play-state: running; /* Default */\r\n    animation-play-state: paused;\r\n    \r\n    /* Shorthand */\r\n    animation: slideIn 0.5s ease-in-out 0.2s 1 normal forwards;\r\n}\r\n\r\n/* Hover effects with transitions */\r\n.button {\r\n    background-color: #3498db;\r\n    color: white;\r\n    padding: 10px 20px;\r\n    border: none;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    transition: background-color 0.3s ease, transform 0.2s ease;\r\n}\r\n\r\n.button:hover {\r\n    background-color: #2980b9;\r\n    transform: translateY(-2px);\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>CSS Animation Properties</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Property</th>\r\n        <th>Description</th>\r\n        <th>Common Values</th>\r\n    </tr>\r\n    <tr>\r\n        <td>@keyframes</td>\r\n        <td>Defines the animation</td>\r\n        <td>Custom name with from/to or percentages</td>\r\n    </tr>\r\n    <tr>\r\n        <td>animation-name</td>\r\n        <td>Specifies the name of the @keyframes animation</td>\r\n        <td>Name of the @keyframes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>animation-duration</td>\r\n        <td>How long the animation takes</td>\r\n        <td>Time in seconds (s) or milliseconds (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>animation-timing-function</td>\r\n        <td>Speed curve of the animation</td>\r\n        <td>ease, linear, ease-in, ease-out, ease-in-out, cubic-bezier()</td>\r\n    </tr>\r\n    <tr>\r\n        <td>animation-delay</td>\r\n        <td>Delay before the animation starts</td>\r\n        <td>Time in seconds (s) or milliseconds (ms)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>animation-iteration-count</td>\r\n        <td>How many times the animation should play</td>\r\n        <td>Number, infinite</td>\r\n    </tr>\r\n    <tr>\r\n        <td>animation-direction</td>\r\n        <td>Direction of the animation</td>\r\n        <td>normal, reverse, alternate, alternate-reverse</td>\r\n    </tr>\r\n    <tr>\r\n        <td>animation-fill-mode</td>\r\n        <td>Styles when animation is not playing</td>\r\n        <td>none, forwards, backwards, both</td>\r\n    </tr>\r\n    <tr>\r\n        <td>animation-play-state</td>\r\n        <td>Whether the animation is running or paused</td>\r\n        <td>running, paused</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>11. Transforms</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* 2D Transforms */\r\n.transform-2d {\r\n    /* Translate (move) */\r\n    transform: translate(20px, 10px); /* X, Y */\r\n    transform: translateX(20px);\r\n    transform: translateY(10px);\r\n    \r\n    /* Scale */\r\n    transform: scale(1.5); /* Uniform scale */\r\n    transform: scale(1.5, 0.5); /* X, Y */\r\n    transform: scaleX(1.5);\r\n    transform: scaleY(0.5);\r\n    \r\n    /* Rotate */\r\n    transform: rotate(45deg); /* Degrees */\r\n    transform: rotate(0.5turn); /* Turns */\r\n    transform: rotate(90grad); /* Gradians */\r\n    transform: rotate(1.57rad); /* Radians */\r\n    \r\n    /* Skew */\r\n    transform: skew(10deg, 5deg); /* X, Y */\r\n    transform: skewX(10deg);\r\n    transform: skewY(5deg);\r\n    \r\n    /* Multiple transforms */\r\n    transform: translate(20px, 10px) rotate(45deg) scale(1.2);\r\n}\r\n\r\n/* 3D Transforms */\r\n.transform-3d {\r\n    /* Perspective (required for 3D) */\r\n    perspective: 500px;\r\n    \r\n    /* Translate 3D */\r\n    transform: translate3d(20px, 10px, 50px); /* X, Y, Z */\r\n    transform: translateZ(50px);\r\n    \r\n    /* Scale 3D */\r\n    transform: scale3d(1.5, 0.5, 2); /* X, Y, Z */\r\n    transform: scaleZ(1.5);\r\n    \r\n    /* Rotate 3D */\r\n    transform: rotate3d(1, 1, 0, 45deg); /* X, Y, Z, angle */\r\n    transform: rotateX(45deg);\r\n    transform: rotateY(45deg);\r\n    transform: rotateZ(45deg);\r\n    \r\n    /* Transform origin */\r\n    transform-origin: center center; /* Default */\r\n    transform-origin: top left;\r\n    transform-origin: 50% 50%;\r\n    transform-origin: 0 0;\r\n    \r\n    /* Transform style */\r\n    transform-style: flat; /* Default */\r\n    transform-style: preserve-3d; /* For 3D transforms */\r\n    \r\n    /* Backface visibility */\r\n    backface-visibility: visible; /* Default */\r\n    backface-visibility: hidden;\r\n}\r\n\r\n/* Transform examples */\r\n.card {\r\n    width: 200px;\r\n    height: 300px;\r\n    background-color: #f0f0f0;\r\n    border-radius: 8px;\r\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n    transition: transform 0.3s ease;\r\n}\r\n\r\n.card:hover {\r\n    transform: translateY(-10px) rotate(2deg);\r\n}\r\n\r\n.flip-card {\r\n    perspective: 1000px;\r\n}\r\n\r\n.flip-card-inner {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n    text-align: center;\r\n    transition: transform 0.6s;\r\n    transform-style: preserve-3d;\r\n}\r\n\r\n.flip-card:hover .flip-card-inner {\r\n    transform: rotateY(180deg);\r\n}\r\n\r\n.flip-card-front, .flip-card-back {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    -webkit-backface-visibility: hidden;\r\n    backface-visibility: hidden;\r\n}\r\n\r\n.flip-card-back {\r\n    transform: rotateY(180deg);\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>CSS Transform Functions</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Function</th>\r\n        <th>Description</th>\r\n        <th>Parameters</th>\r\n    </tr>\r\n    <tr>\r\n        <td>translate()</td>\r\n        <td>Moves an element in 2D space</td>\r\n        <td>X, Y values (px, %, etc.)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>translateX()</td>\r\n        <td>Moves an element horizontally</td>\r\n        <td>X value (px, %, etc.)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>translateY()</td>\r\n        <td>Moves an element vertically</td>\r\n        <td>Y value (px, %, etc.)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>scale()</td>\r\n        <td>Scales an element in 2D space</td>\r\n        <td>X, Y scale factors (unitless)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>rotate()</td>\r\n        <td>Rotates an element in 2D space</td>\r\n        <td>Angle (deg, rad, turn, grad)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>skew()</td>\r\n        <td>Skews an element in 2D space</td>\r\n        <td>X, Y angles (deg, rad, etc.)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>translate3d()</td>\r\n        <td>Moves an element in 3D space</td>\r\n        <td>X, Y, Z values (px, %, etc.)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>scale3d()</td>\r\n        <td>Scales an element in 3D space</td>\r\n        <td>X, Y, Z scale factors (unitless)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>rotate3d()</td>\r\n        <td>Rotates an element in 3D space</td>\r\n        <td>X, Y, Z vector, angle (deg, etc.)</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>12. CSS Variables (Custom Properties)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Declaring CSS Variables */\r\n:root {\r\n    /* Global variables */\r\n    --primary-color: #3498db;\r\n    --secondary-color: #2ecc71;\r\n    --text-color: #333333;\r\n    --background-color: #f5f5f5;\r\n    --font-family: \'Arial\', sans-serif;\r\n    --border-radius: 4px;\r\n    --box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n    --transition: all 0.3s ease;\r\n}\r\n\r\n/* Using CSS Variables */\r\nbody {\r\n    font-family: var(--font-family);\r\n    color: var(--text-color);\r\n    background-color: var(--background-color);\r\n}\r\n\r\n.button {\r\n    background-color: var(--primary-color);\r\n    color: white;\r\n    border: none;\r\n    border-radius: var(--border-radius);\r\n    padding: 10px 20px;\r\n    cursor: pointer;\r\n    transition: var(--transition);\r\n}\r\n\r\n.button:hover {\r\n    background-color: var(--secondary-color);\r\n}\r\n\r\n.card {\r\n    background-color: white;\r\n    border-radius: var(--border-radius);\r\n    box-shadow: var(--box-shadow);\r\n    padding: 20px;\r\n}\r\n\r\n/* Local variables */\r\n.component {\r\n    --local-color: #e74c3c;\r\n    color: var(--local-color);\r\n}\r\n\r\n/* Inheritance and fallback */\r\n.text {\r\n    color: var(--text-color, #333333); /* Fallback if --text-color is not defined */\r\n}\r\n\r\n/* Using variables in media queries */\r\n:root {\r\n    --font-size: 16px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    :root {\r\n        --font-size: 14px;\r\n    }\r\n}\r\n\r\nbody {\r\n    font-size: var(--font-size);\r\n}\r\n\r\n/* Using variables with calc() */\r\n.container {\r\n    width: calc(100% - var(--padding) * 2);\r\n    padding: 0 var(--padding);\r\n}\r\n\r\n/* Dynamic variables with JavaScript */\r\n/*\r\n// JavaScript example\r\ndocument.documentElement.style.setProperty(\'--primary-color\', \'#e74c3c\');\r\n*/\r\n\r\n/* Theming with CSS Variables */\r\n.light-theme {\r\n    --primary-color: #3498db;\r\n    --secondary-color: #2ecc71;\r\n    --text-color: #333333;\r\n    --background-color: #f5f5f5;\r\n}\r\n\r\n.dark-theme {\r\n    --primary-color: #2980b9;\r\n    --secondary-color: #27ae60;\r\n    --text-color: #f5f5f5;\r\n    --background-color: #333333;\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>CSS Variables Benefits</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Benefit</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Reusability</td>\r\n        <td>Define once, use multiple times</td>\r\n        <td>Define --primary-color and use throughout</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Maintainability</td>\r\n        <td>Easy to update values in one place</td>\r\n        <td>Change --font-size to update all text</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Dynamic Theming</td>\r\n        <td>Can be changed with JavaScript</td>\r\n        <td>Switch between light/dark themes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Cascade</td>\r\n        <td>Variables follow CSS cascade rules</td>\r\n        <td>Override variables in specific contexts</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Inheritance</td>\r\n        <td>Variables are inherited by child elements</td>\r\n        <td>Define on :root for global use</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Fallback Values</td>\r\n        <td>Provide fallback if variable is not defined</td>\r\n        <td>color: var(--text-color, #333);</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>13. Pseudo-classes and Pseudo-elements</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Pseudo-classes */\r\n\r\n/* Link pseudo-classes */\r\na:link {\r\n    color: blue;\r\n}\r\n\r\na:visited {\r\n    color: purple;\r\n}\r\n\r\na:hover {\r\n    color: red;\r\n    text-decoration: underline;\r\n}\r\n\r\na:active {\r\n    color: orange;\r\n}\r\n\r\n/* Form pseudo-classes */\r\ninput:focus {\r\n    outline: 2px solid #3498db;\r\n    background-color: #f0f8ff;\r\n}\r\n\r\ninput:required {\r\n    border-left: 3px solid #e74c3c;\r\n}\r\n\r\ninput:valid {\r\n    border-left: 3px solid #2ecc71;\r\n}\r\n\r\ninput:invalid {\r\n    border-left: 3px solid #e74c3c;\r\n}\r\n\r\ninput:disabled {\r\n    background-color: #f5f5f5;\r\n    cursor: not-allowed;\r\n}\r\n\r\ninput:checked + label {\r\n    font-weight: bold;\r\n}\r\n\r\n/* Structural pseudo-classes */\r\nli:first-child {\r\n    font-weight: bold;\r\n}\r\n\r\nli:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\nli:nth-child(odd) {\r\n    background-color: #f9f9f9;\r\n}\r\n\r\nli:nth-child(even) {\r\n    background-color: #f0f0f0;\r\n}\r\n\r\nli:nth-child(3n) {\r\n    color: #3498db;\r\n}\r\n\r\nli:nth-child(2n+1) {\r\n    text-transform: uppercase;\r\n}\r\n\r\n/* Position-based pseudo-classes */\r\np:first-of-type {\r\n    font-size: 1.2em;\r\n}\r\n\r\np:last-of-type {\r\n    font-style: italic;\r\n}\r\n\r\np:nth-of-type(2) {\r\n    color: #e74c3c;\r\n}\r\n\r\np:nth-last-of-type(2) {\r\n    text-decoration: underline;\r\n}\r\n\r\n/* Other pseudo-classes */\r\ndiv:empty {\r\n    background-color: #ffdddd;\r\n    border: 1px dashed #ff0000;\r\n    height: 20px;\r\n}\r\n\r\n:not(.exclude) {\r\n    border: 1px solid #ccc;\r\n}\r\n\r\n:target {\r\n    background-color: #ffffcc;\r\n}\r\n\r\n/* Pseudo-elements */\r\n\r\n/* ::before and ::after */\r\n.box::before {\r\n    content: \"Before\";\r\n    display: block;\r\n    font-weight: bold;\r\n    color: #3498db;\r\n}\r\n\r\n.box::after {\r\n    content: \"After\";\r\n    display: block;\r\n    font-style: italic;\r\n    color: #2ecc71;\r\n}\r\n\r\n/* ::first-line */\r\np::first-line {\r\n    font-weight: bold;\r\n    color: #e74c3c;\r\n}\r\n\r\n/* ::first-letter */\r\np::first-letter {\r\n    font-size: 2em;\r\n    font-weight: bold;\r\n    float: left;\r\n    margin-right: 5px;\r\n}\r\n\r\n/* ::selection */\r\n::selection {\r\n    background-color: #3498db;\r\n    color: white;\r\n}\r\n\r\n/* ::placeholder */\r\ninput::placeholder {\r\n    color: #999999;\r\n    font-style: italic;\r\n}\r\n\r\n/* ::marker */\r\nli::marker {\r\n    color: #e74c3c;\r\n    font-weight: bold;\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Common Pseudo-classes</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Pseudo-class</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>:hover</td>\r\n        <td>Styles when mouse is over element</td>\r\n        <td>button:hover { background: blue; }</td>\r\n    </tr>\r\n    <tr>\r\n        <td>:focus</td>\r\n        <td>Styles when element has focus</td>\r\n        <td>input:focus { outline: none; }</td>\r\n    </tr>\r\n    <tr>\r\n        <td>:active</td>\r\n        <td>Styles when element is being activated</td>\r\n        <td>a:active { color: red; }</td>\r\n    </tr>\r\n    <tr>\r\n        <td>:visited</td>\r\n        <td>Styles for visited links</td>\r\n        <td>a:visited { color: purple; }</td>\r\n    </tr>\r\n    <tr>\r\n        <td>:first-child</td>\r\n        <td>Styles the first child of its parent</td>\r\n        <td>li:first-child { font-weight: bold; }</td>\r\n    </tr>\r\n    <tr>\r\n        <td>:last-child</td>\r\n        <td>Styles the last child of its parent</td>\r\n        <td>li:last-child { border: none; }</td>\r\n    </tr>\r\n    <tr>\r\n        <td>:nth-child()</td>\r\n        <td>Styles elements based on position</td>\r\n        <td>li:nth-child(odd) { background: #f0f0f0; }</td>\r\n    </tr>\r\n    <tr>\r\n        <td>:not()</td>\r\n        <td>Styles elements that don\'t match selector</td>\r\n        <td>:not(.exclude) { border: 1px solid; }</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>14. CSS Functions</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* calc() function */\r\n.container {\r\n    width: calc(100% - 40px);\r\n    padding: 20px;\r\n}\r\n\r\n.column {\r\n    width: calc(50% - 10px);\r\n    margin-right: 10px;\r\n}\r\n\r\n/* var() function */\r\n.button {\r\n    background-color: var(--primary-color, #3498db);\r\n    color: var(--text-color, #333333);\r\n}\r\n\r\n/* min() and max() functions */\r\n.responsive-text {\r\n    font-size: min(5vw, 24px);\r\n}\r\n\r\n.container {\r\n    width: max(50%, 300px);\r\n}\r\n\r\n/* clamp() function */\r\n.responsive-text {\r\n    font-size: clamp(16px, 5vw, 24px);\r\n}\r\n\r\n/* url() function */\r\n.background {\r\n    background-image: url(\'image.jpg\');\r\n}\r\n\r\n@font-face {\r\n    font-family: \'MyFont\';\r\n    src: url(\'myfont.woff2\') format(\'woff2\');\r\n}\r\n\r\n/* color functions */\r\n.element {\r\n    /* rgb() */\r\n    color: rgb(52, 152, 219);\r\n    \r\n    /* rgba() */\r\n    background-color: rgba(52, 152, 219, 0.7);\r\n    \r\n    /* hsl() */\r\n    color: hsl(204, 70%, 53%);\r\n    \r\n    /* hsla() */\r\n    background-color: hsla(204, 70%, 53%, 0.7);\r\n}\r\n\r\n/* transform functions */\r\n.transform-example {\r\n    transform: translate(20px, 10px);\r\n    transform: scale(1.5);\r\n    transform: rotate(45deg);\r\n    transform: skew(10deg, 5deg);\r\n}\r\n\r\n/* filter functions */\r\n.filter-example {\r\n    /* Blur */\r\n    filter: blur(5px);\r\n    \r\n    /* Brightness */\r\n    filter: brightness(150%);\r\n    \r\n    /* Contrast */\r\n    filter: contrast(200%);\r\n    \r\n    /* Drop shadow */\r\n    filter: drop-shadow(5px 5px 10px rgba(0, 0, 0, 0.3));\r\n    \r\n    /* Grayscale */\r\n    filter: grayscale(100%);\r\n    \r\n    /* Hue rotate */\r\n    filter: hue-rotate(90deg);\r\n    \r\n    /* Invert */\r\n    filter: invert(100%);\r\n    \r\n    /* Opacity */\r\n    filter: opacity(50%);\r\n    \r\n    /* Saturate */\r\n    filter: saturate(200%);\r\n    \r\n    /* Sepia */\r\n    filter: sepia(100%);\r\n    \r\n    /* Multiple filters */\r\n    filter: contrast(200%) brightness(150%);\r\n}\r\n\r\n/* gradient functions */\r\n.gradient-example {\r\n    /* Linear gradient */\r\n    background: linear-gradient(to right, #ff7e5f, #feb47b);\r\n    background: linear-gradient(45deg, #ff7e5f, #feb47b);\r\n    background: linear-gradient(to right, #ff7e5f 0%, #feb47b 50%, #ff7e5f 100%);\r\n    \r\n    /* Radial gradient */\r\n    background: radial-gradient(circle, #ff7e5f, #feb47b);\r\n    background: radial-gradient(ellipse at center, #ff7e5f, #feb47b);\r\n    \r\n    /* Conic gradient */\r\n    background: conic-gradient(#ff7e5f, #feb47b, #ff7e5f);\r\n}\r\n\r\n/* shape functions */\r\n.clip-path-example {\r\n    /* Circle */\r\n    clip-path: circle(50% at 50% 50%);\r\n    \r\n    /* Ellipse */\r\n    clip-path: ellipse(50% 30% at 50% 50%);\r\n    \r\n    /* Polygon */\r\n    clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\r\n    \r\n    /* Inset */\r\n    clip-path: inset(20px 10px 30px 15px round 5px);\r\n}\r\n\r\n/* counter() function */\r\n.counter-example {\r\n    counter-reset: section;\r\n}\r\n\r\nh2::before {\r\n    counter-increment: section;\r\n    content: \"Section \" counter(section) \": \";\r\n}\r\n\r\n/* attr() function */\r\n.tooltip {\r\n    position: relative;\r\n}\r\n\r\n.tooltip::after {\r\n    content: attr(data-tooltip);\r\n    position: absolute;\r\n    bottom: 100%;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    background-color: #333;\r\n    color: white;\r\n    padding: 5px 10px;\r\n    border-radius: 4px;\r\n    white-space: nowrap;\r\n    opacity: 0;\r\n    transition: opacity 0.3s;\r\n}\r\n\r\n.tooltip:hover::after {\r\n    opacity: 1;\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>CSS Functions Categories</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Category</th>\r\n        <th>Functions</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <th>Mathematical</th>\r\n        <td>calc(), min(), max(), clamp()</td>\r\n        <td>Perform calculations to determine CSS values</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Color</th>\r\n        <td>rgb(), rgba(), hsl(), hsla()</td>\r\n        <td>Define color values</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Transform</th>\r\n        <td>translate(), scale(), rotate(), skew(), etc.</td>\r\n        <td>Apply transformations to elements</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Filter</th>\r\n        <td>blur(), brightness(), contrast(), etc.</td>\r\n        <td>Apply graphical effects to elements</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Gradient</th>\r\n        <td>linear-gradient(), radial-gradient(), conic-gradient()</td>\r\n        <td>Create smooth color transitions</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Shape</th>\r\n        <td>circle(), ellipse(), polygon(), inset()</td>\r\n        <td>Define clipping paths</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Value</th>\r\n        <td>var(), attr(), counter()</td>\r\n        <td>Retrieve or generate values</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Resource</th>\r\n        <td>url()</td>\r\n        <td>Reference external resources</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>15. Advanced Techniques (Blend Modes, Filters, Clipping)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-css\">/* Blend Modes */\r\n.blend-mode-example {\r\n    /* Background blend mode */\r\n    background-blend-mode: normal; /* Default */\r\n    background-blend-mode: multiply;\r\n    background-blend-mode: screen;\r\n    background-blend-mode: overlay;\r\n    background-blend-mode: darken;\r\n    background-blend-mode: lighten;\r\n    background-blend-mode: color-dodge;\r\n    background-blend-mode: color-burn;\r\n    background-blend-mode: hard-light;\r\n    background-blend-mode: soft-light;\r\n    background-blend-mode: difference;\r\n    background-blend-mode: exclusion;\r\n    background-blend-mode: hue;\r\n    background-blend-mode: saturation;\r\n    background-blend-mode: color;\r\n    background-blend-mode: luminosity;\r\n    \r\n    /* Mix blend mode */\r\n    mix-blend-mode: normal; /* Default */\r\n    mix-blend-mode: multiply;\r\n    mix-blend-mode: screen;\r\n    mix-blend-mode: overlay;\r\n    mix-blend-mode: darken;\r\n    mix-blend-mode: lighten;\r\n    mix-blend-mode: color-dodge;\r\n    mix-blend-mode: color-burn;\r\n    mix-blend-mode: hard-light;\r\n    mix-blend-mode: soft-light;\r\n    mix-blend-mode: difference;\r\n    mix-blend-mode: exclusion;\r\n    mix-blend-mode: hue;\r\n    mix-blend-mode: saturation;\r\n    mix-blend-mode: color;\r\n    mix-blend-mode: luminosity;\r\n}\r\n\r\n/* Filters */\r\n.filter-example {\r\n    /* Basic filters */\r\n    filter: none; /* Default */\r\n    filter: blur(5px);\r\n    filter: brightness(150%);\r\n    filter: contrast(200%);\r\n    filter: drop-shadow(5px 5px 10px rgba(0, 0, 0, 0.3));\r\n    filter: grayscale(100%);\r\n    filter: hue-rotate(90deg);\r\n    filter: invert(100%);\r\n    filter: opacity(50%);\r\n    filter: saturate(200%);\r\n    filter: sepia(100%);\r\n    \r\n    /* Multiple filters */\r\n    filter: contrast(200%) brightness(150%) saturate(150%);\r\n    \r\n    /* SVG filters */\r\n    filter: url(#svg-filter);\r\n}\r\n\r\n/* Clipping and Masking */\r\n.clip-path-example {\r\n    /* Basic shapes */\r\n    clip-path: none; /* Default */\r\n    clip-path: circle(50% at 50% 50%);\r\n    clip-path: ellipse(50% 30% at 50% 50%);\r\n    clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);\r\n    clip-path: inset(20px 10px 30px 15px round 5px);\r\n    \r\n    /* Custom polygon */\r\n    clip-path: polygon(0% 0%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%);\r\n    \r\n    /* Using SVG path */\r\n    clip-path: path(\'M0,0 L100,0 L100,100 L0,100 Z\');\r\n}\r\n\r\n.mask-example {\r\n    /* Image mask */\r\n    mask-image: url(\'mask.png\');\r\n    mask-mode: luminance; /* or alpha */\r\n    mask-repeat: no-repeat;\r\n    mask-position: center;\r\n    mask-size: contain;\r\n    \r\n    /* Gradient mask */\r\n    mask-image: linear-gradient(to right, black, transparent);\r\n    \r\n    /* SVG mask */\r\n    mask-image: url(#svg-mask);\r\n}\r\n\r\n/* Backdrop Filter */\r\n.backdrop-filter-example {\r\n    backdrop-filter: blur(10px);\r\n    backdrop-filter: brightness(150%);\r\n    backdrop-filter: contrast(200%);\r\n    backdrop-filter: drop-shadow(5px 5px 10px rgba(0, 0, 0, 0.3));\r\n    backdrop-filter: grayscale(100%);\r\n    backdrop-filter: hue-rotate(90deg);\r\n    backdrop-filter: invert(100%);\r\n    backdrop-filter: opacity(50%);\r\n    backdrop-filter: saturate(200%);\r\n    backdrop-filter: sepia(100%);\r\n}\r\n\r\n/* Object Fit */\r\n.object-fit-example {\r\n    object-fit: fill; /* Default */\r\n    object-fit: contain;\r\n    object-fit: cover;\r\n    object-fit: none;\r\n    object-fit: scale-down;\r\n}\r\n\r\n/* Object Position */\r\n.object-position-example {\r\n    object-position: center center; /* Default */\r\n    object-position: top left;\r\n    object-position: bottom right;\r\n    object-position: 25% 75%;\r\n}\r\n\r\n/* Will-change Property */\r\n.will-change-example {\r\n    will-change: transform;\r\n    will-change: opacity;\r\n    will-change: transform, opacity;\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Advanced CSS Techniques</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Technique</th>\r\n        <th>Description</th>\r\n        <th>Use Case</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Blend Modes</td>\r\n        <td>Control how elements blend with their background</td>\r\n        <td>Creating overlays, image effects, artistic designs</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Filters</td>\r\n        <td>Apply graphical effects like blur, brightness, contrast</td>\r\n        <td>Image editing, visual effects, accessibility</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Clipping Paths</td>\r\n        <td>Clip elements to specific shapes</td>\r\n        <td>Non-rectangular layouts, creative designs</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Masks</td>\r\n        <td>Hide parts of an element using transparency</td>\r\n        <td>Complex shapes, gradient reveals, texture effects</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Backdrop Filters</td>\r\n        <td>Apply filters to the area behind an element</td>\r\n        <td>Frosted glass effects, modern UI designs</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Object Fit</td>\r\n        <td>Control how replaced elements fit in their container</td>\r\n        <td>Image and video sizing, responsive media</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Will-change</td>\r\n        <td>Hint to browsers about upcoming changes</td>\r\n        <td>Optimizing animations and transitions</td>\r\n    </tr>\r\n</table>\r\n\r\n<hr>\r\n<p>By following these lessons, you\'ll progress from CSS basics to advanced features like flexbox, grid, responsive design, animations, transforms, variables, and modern techniques. Keep practicing each example to build beautiful and responsive web designs step by step.</p>\r\n\r\n<!-- Prism.js core + CSS language component -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-css.min.js\"></script>\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n    position: relative;\r\n    margin: 1em 0;\r\n    background: #1e1e1e;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n.code-container pre {\r\n    margin: 0;\r\n    padding: 1em;\r\n    overflow-x: auto;\r\n    font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n}\r\n.copy-btn {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background: #007acc;\r\n    border: none;\r\n    color: #fff;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n}\r\n.copy-btn:hover {\r\n    background: #005f99;\r\n}\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin: 1em 0;\r\n}\r\ntable th, table td {\r\n    padding: 8px;\r\n    text-align: left;\r\n    border: 1px solid #ddd;\r\n}\r\ntable th {\r\n    background-color: #f2f2f2;\r\n    font-weight: bold;\r\n}\r\n</style>\r\n<script>\r\nfunction copyCode(button) {\r\n    const code = button.nextElementSibling.innerText;\r\n    navigator.clipboard.writeText(code).then(() => {\r\n        button.innerText = \"Copied!\";\r\n        setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n    });\r\n}\r\n</script>', 'CSS Programming Lessons – Beginner to Advanced', '1757847571_CSS.png', 9, 1, 'published', '2025-09-13 21:07:16', '2025-09-14 10:59:31');
INSERT INTO `posts` (`id`, `title`, `content`, `excerpt`, `featured_image`, `category_id`, `author_id`, `status`, `created_at`, `updated_at`) VALUES
(10, 'SQL Programming Lessons', '# SQL Programming Lessons – Beginner to Advanced\r\n\r\n<p>Welcome to the SQL programming lesson series! We\'ll learn SQL step by step — starting from the basics and moving toward advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n## SQL Course Outline\r\n\r\n<ul>\r\n    <li>Introduction to SQL and Databases</li>\r\n    <li>Basic SELECT Statements</li>\r\n    <li>Filtering with WHERE Clause</li>\r\n    <li>Sorting with ORDER BY</li>\r\n    <li>Aggregate Functions</li>\r\n    <li>Grouping with GROUP BY</li>\r\n    <li>JOINs (INNER, LEFT, RIGHT, FULL)</li>\r\n    <li>Subqueries</li>\r\n    <li>Set Operations (UNION, INTERSECT, EXCEPT)</li>\r\n    <li>Data Manipulation (INSERT, UPDATE, DELETE)</li>\r\n    <li>Data Definition (CREATE, ALTER, DROP)</li>\r\n    <li>Constraints and Keys</li>\r\n    <li>Indexes</li>\r\n    <li>Views</li>\r\n    <li>Stored Procedures and Functions</li>\r\n    <li>Transactions</li>\r\n    <li>Advanced SQL Topics</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (keeps your existing dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>1. Introduction to SQL and Databases</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- What is SQL?\r\n-- SQL (Structured Query Language) is a standard language for managing and manipulating databases.\r\n\r\n-- Types of SQL Commands:\r\n-- 1. DDL (Data Definition Language) - CREATE, ALTER, DROP, TRUNCATE\r\n-- 2. DML (Data Manipulation Language) - INSERT, UPDATE, DELETE\r\n-- 3. DQL (Data Query Language) - SELECT\r\n-- 4. DCL (Data Control Language) - GRANT, REVOKE\r\n-- 5. TCL (Transaction Control Language) - COMMIT, ROLLBACK, SAVEPOINT\r\n\r\n-- Sample Database Structure\r\n-- We\'ll use a simple e-commerce database for our examples:\r\n--   - Customers (customer_id, name, email, city)\r\n--   - Products (product_id, name, price, category_id)\r\n--   - Categories (category_id, name)\r\n--   - Orders (order_id, customer_id, order_date)\r\n--   - OrderItems (order_id, product_id, quantity)</code></pre>\r\n</div>\r\n\r\n<h4>Database Management Systems</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>DBMS</th>\r\n        <th>Description</th>\r\n        <th>SQL Dialect</th>\r\n    </tr>\r\n    <tr>\r\n        <td>MySQL</td>\r\n        <td>Open-source relational database</td>\r\n        <td>MySQL SQL</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PostgreSQL</td>\r\n        <td>Advanced open-source relational database</td>\r\n        <td>PostgreSQL SQL</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Oracle</td>\r\n        <td>Commercial enterprise database</td>\r\n        <td>PL/SQL</td>\r\n    </tr>\r\n    <tr>\r\n        <td>SQL Server</td>\r\n        <td>Microsoft\'s relational database</td>\r\n        <td>T-SQL</td>\r\n    </tr>\r\n    <tr>\r\n        <td>SQLite</td>\r\n        <td>Lightweight, serverless database</td>\r\n        <td>SQLite SQL</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>2. Basic SELECT Statements</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Select all columns from a table\r\nSELECT * FROM Customers;\r\n\r\n-- Select specific columns\r\nSELECT customer_id, name, email FROM Customers;\r\n\r\n-- Select with column aliases\r\nSELECT customer_id AS ID, name AS CustomerName, email AS EmailAddress \r\nFROM Customers;\r\n\r\n-- Select with calculated columns\r\nSELECT product_id, name, price, price * 1.10 AS price_with_tax\r\nFROM Products;\r\n\r\n-- Select with string concatenation\r\nSELECT first_name || \' \' || last_name AS full_name\r\nFROM Employees;\r\n\r\n-- Select with literal values\r\nSELECT \'Product Report\' AS report_title, product_id, name\r\nFROM Products;\r\n\r\n-- Select distinct values\r\nSELECT DISTINCT city FROM Customers;\r\n\r\n-- Select with limiting rows\r\nSELECT * FROM Products LIMIT 5;\r\n\r\n-- Select with conditional logic (CASE)\r\nSELECT \r\n    product_id,\r\n    name,\r\n    price,\r\n    CASE \r\n        WHEN price < 10 THEN \'Low\'\r\n        WHEN price BETWEEN 10 AND 50 THEN \'Medium\'\r\n        ELSE \'High\'\r\n    END AS price_category\r\nFROM Products;</code></pre>\r\n</div>\r\n\r\n<h4>SELECT Statement Components</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Clause</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>SELECT</td>\r\n        <td>Specifies columns to retrieve</td>\r\n        <td>SELECT name, price</td>\r\n    </tr>\r\n    <tr>\r\n        <td>FROM</td>\r\n        <td>Specifies the table(s) to retrieve data from</td>\r\n        <td>FROM Products</td>\r\n    </tr>\r\n    <tr>\r\n        <td>AS</td>\r\n        <td>Assigns an alias to a column or table</td>\r\n        <td>SELECT name AS product_name</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DISTINCT</td>\r\n        <td>Returns only unique values</td>\r\n        <td>SELECT DISTINCT category</td>\r\n    </tr>\r\n    <tr>\r\n        <td>LIMIT/TOP</td>\r\n        <td>Restricts the number of rows returned</td>\r\n        <td>LIMIT 10 or TOP 10</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CASE</td>\r\n        <td>Implements conditional logic</td>\r\n        <td>CASE WHEN condition THEN result END</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>3. Filtering with WHERE Clause</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Basic WHERE clause\r\nSELECT * FROM Customers WHERE city = \'New York\';\r\n\r\n-- WHERE with numeric comparison\r\nSELECT * FROM Products WHERE price > 50;\r\n\r\n-- WHERE with multiple conditions (AND)\r\nSELECT * FROM Products \r\nWHERE price > 20 AND category_id = 3;\r\n\r\n-- WHERE with multiple conditions (OR)\r\nSELECT * FROM Customers \r\nWHERE city = \'New York\' OR city = \'Los Angeles\';\r\n\r\n-- WHERE with combination of AND and OR\r\nSELECT * FROM Products \r\nWHERE (price > 50 OR category_id = 3) AND stock_quantity > 0;\r\n\r\n-- WHERE with BETWEEN\r\nSELECT * FROM Products \r\nWHERE price BETWEEN 10 AND 50;\r\n\r\n-- WHERE with IN\r\nSELECT * FROM Customers \r\nWHERE city IN (\'New York\', \'Los Angeles\', \'Chicago\');\r\n\r\n-- WHERE with LIKE (pattern matching)\r\nSELECT * FROM Customers \r\nWHERE name LIKE \'J%\';  -- Starts with \'J\'\r\n\r\nSELECT * FROM Customers \r\nWHERE email LIKE \'%@gmail.com\';  -- Ends with \'@gmail.com\'\r\n\r\nSELECT * FROM Products \r\nWHERE name LIKE \'%chair%\';  -- Contains \'chair\'\r\n\r\n-- WHERE with NOT\r\nSELECT * FROM Products \r\nWHERE NOT category_id = 3;\r\n\r\n-- WHERE with IS NULL\r\nSELECT * FROM Customers \r\nWHERE phone_number IS NULL;\r\n\r\n-- WHERE with IS NOT NULL\r\nSELECT * FROM Customers \r\nWHERE phone_number IS NOT NULL;</code></pre>\r\n</div>\r\n\r\n<h4>WHERE Clause Operators</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Operator</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>=</td>\r\n        <td>Equal to</td>\r\n        <td>WHERE city = \'New York\'</td>\r\n    </tr>\r\n    <tr>\r\n        <td>!= or &lt;&gt;</td>\r\n        <td>Not equal to</td>\r\n        <td>WHERE city != \'New York\'</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&gt;</td>\r\n        <td>Greater than</td>\r\n        <td>WHERE price &gt; 50</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;</td>\r\n        <td>Less than</td>\r\n        <td>WHERE price &lt; 50</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&gt;=</td>\r\n        <td>Greater than or equal to</td>\r\n        <td>WHERE price &gt;= 50</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;=</td>\r\n        <td>Less than or equal to</td>\r\n        <td>WHERE price &lt;= 50</td>\r\n    </tr>\r\n    <tr>\r\n        <td>BETWEEN</td>\r\n        <td>Between a range (inclusive)</td>\r\n        <td>WHERE price BETWEEN 10 AND 50</td>\r\n    </tr>\r\n    <tr>\r\n        <td>IN</td>\r\n        <td>Match any value in a list</td>\r\n        <td>WHERE city IN (\'NY\', \'LA\')</td>\r\n    </tr>\r\n    <tr>\r\n        <td>LIKE</td>\r\n        <td>Pattern matching with wildcards</td>\r\n        <td>WHERE name LIKE \'J%\'</td>\r\n    </tr>\r\n    <tr>\r\n        <td>IS NULL</td>\r\n        <td>Check for NULL values</td>\r\n        <td>WHERE phone IS NULL</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>4. Sorting with ORDER BY</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Sort by a single column (ascending)\r\nSELECT * FROM Products ORDER BY price;\r\n\r\n-- Sort by a single column (descending)\r\nSELECT * FROM Products ORDER BY price DESC;\r\n\r\n-- Sort by multiple columns\r\nSELECT * FROM Products ORDER BY category_id, price;\r\n\r\n-- Sort by multiple columns with different directions\r\nSELECT * FROM Products ORDER BY category_id ASC, price DESC;\r\n\r\n-- Sort by expression\r\nSELECT \r\n    product_id, \r\n    name, \r\n    price, \r\n    price * 1.10 AS price_with_tax\r\nFROM Products\r\nORDER BY price_with_tax;\r\n\r\n-- Sort by column position (not recommended, but possible)\r\nSELECT product_id, name, price FROM Products ORDER BY 3;\r\n\r\n-- Sort with NULLS first or last\r\nSELECT * FROM Customers \r\nORDER BY phone_number ASC NULLS LAST;\r\n\r\n-- Sort with CASE expression\r\nSELECT \r\n    product_id,\r\n    name,\r\n    price,\r\n    CASE \r\n        WHEN price < 10 THEN 1\r\n        WHEN price BETWEEN 10 AND 50 THEN 2\r\n        ELSE 3\r\n    END AS price_rank\r\nFROM Products\r\nORDER BY price_rank;\r\n\r\n-- Combining WHERE and ORDER BY\r\nSELECT * FROM Products \r\nWHERE category_id = 3\r\nORDER BY price DESC\r\nLIMIT 10;</code></pre>\r\n</div>\r\n\r\n<h4>ORDER BY Clause Features</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Feature</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>ASC</td>\r\n        <td>Sort in ascending order (default)</td>\r\n        <td>ORDER BY price ASC</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DESC</td>\r\n        <td>Sort in descending order</td>\r\n        <td>ORDER BY price DESC</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Multiple Columns</td>\r\n        <td>Sort by multiple columns in sequence</td>\r\n        <td>ORDER BY category_id, price</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Expressions</td>\r\n        <td>Sort by calculated values</td>\r\n        <td>ORDER BY price * 1.10</td>\r\n    </tr>\r\n    <tr>\r\n        <td>NULLS FIRST/LAST</td>\r\n        <td>Control placement of NULL values</td>\r\n        <td>ORDER BY phone NULLS LAST</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CASE Expression</td>\r\n        <td>Sort based on conditional logic</td>\r\n        <td>ORDER BY CASE WHEN condition THEN value END</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>5. Aggregate Functions</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- COUNT() - Count the number of rows\r\nSELECT COUNT(*) AS total_products FROM Products;\r\n\r\n-- COUNT() with DISTINCT\r\nSELECT COUNT(DISTINCT category_id) AS unique_categories FROM Products;\r\n\r\n-- SUM() - Calculate the sum of values\r\nSELECT SUM(price) AS total_value FROM Products;\r\n\r\n-- AVG() - Calculate the average value\r\nSELECT AVG(price) AS average_price FROM Products;\r\n\r\n-- MIN() - Find the minimum value\r\nSELECT MIN(price) AS lowest_price FROM Products;\r\n\r\n-- MAX() - Find the maximum value\r\nSELECT MAX(price) AS highest_price FROM Products;\r\n\r\n-- Aggregate functions with WHERE\r\nSELECT AVG(price) AS average_price FROM Products \r\nWHERE category_id = 3;\r\n\r\n-- Aggregate functions with expressions\r\nSELECT SUM(price * quantity) AS total_revenue \r\nFROM OrderItems;\r\n\r\n-- Aggregate functions with CASE\r\nSELECT \r\n    SUM(CASE WHEN category_id = 1 THEN 1 ELSE 0 END) AS electronics_count,\r\n    SUM(CASE WHEN category_id = 2 THEN 1 ELSE 0 END) AS clothing_count,\r\n    SUM(CASE WHEN category_id = 3 THEN 1 ELSE 0 END) AS books_count\r\nFROM Products;\r\n\r\n-- Aggregate functions with GROUP BY (see next lesson for details)\r\nSELECT category_id, COUNT(*) AS product_count, AVG(price) AS avg_price\r\nFROM Products\r\nGROUP BY category_id;</code></pre>\r\n</div>\r\n\r\n<h4>Common Aggregate Functions</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Function</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>COUNT()</td>\r\n        <td>Counts the number of rows</td>\r\n        <td>SELECT COUNT(*) FROM Products</td>\r\n    </tr>\r\n    <tr>\r\n        <td>SUM()</td>\r\n        <td>Calculates the sum of values</td>\r\n        <td>SELECT SUM(price) FROM Products</td>\r\n    </tr>\r\n    <tr>\r\n        <td>AVG()</td>\r\n        <td>Calculates the average value</td>\r\n        <td>SELECT AVG(price) FROM Products</td>\r\n    </tr>\r\n    <tr>\r\n        <td>MIN()</td>\r\n        <td>Finds the minimum value</td>\r\n        <td>SELECT MIN(price) FROM Products</td>\r\n    </tr>\r\n    <tr>\r\n        <td>MAX()</td>\r\n        <td>Finds the maximum value</td>\r\n        <td>SELECT MAX(price) FROM Products</td>\r\n    </tr>\r\n    <tr>\r\n        <td>GROUP_CONCAT()</td>\r\n        <td>Concatenates values from multiple rows (MySQL/SQLite)</td>\r\n        <td>SELECT GROUP_CONCAT(name) FROM Products</td>\r\n    </tr>\r\n    <tr>\r\n        <td>STRING_AGG()</td>\r\n        <td>Concatenates values with a separator (PostgreSQL/SQL Server)</td>\r\n        <td>SELECT STRING_AGG(name, \', \') FROM Products</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>6. Grouping with GROUP BY</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Basic GROUP BY\r\nSELECT category_id, COUNT(*) AS product_count\r\nFROM Products\r\nGROUP BY category_id;\r\n\r\n-- GROUP BY with multiple columns\r\nSELECT category_id, supplier_id, COUNT(*) AS product_count\r\nFROM Products\r\nGROUP BY category_id, supplier_id;\r\n\r\n-- GROUP BY with aggregate functions\r\nSELECT \r\n    category_id, \r\n    COUNT(*) AS product_count,\r\n    AVG(price) AS avg_price,\r\n    MIN(price) AS min_price,\r\n    MAX(price) AS max_price\r\nFROM Products\r\nGROUP BY category_id;\r\n\r\n-- GROUP BY with HAVING (filtering groups)\r\nSELECT category_id, COUNT(*) AS product_count\r\nFROM Products\r\nGROUP BY category_id\r\nHAVING COUNT(*) > 5;\r\n\r\n-- GROUP BY with ORDER BY\r\nSELECT category_id, COUNT(*) AS product_count\r\nFROM Products\r\nGROUP BY category_id\r\nORDER BY product_count DESC;\r\n\r\n-- GROUP BY with WHERE and HAVING\r\nSELECT \r\n    category_id, \r\n    COUNT(*) AS product_count,\r\n    AVG(price) AS avg_price\r\nFROM Products\r\nWHERE price > 10\r\nGROUP BY category_id\r\nHAVING COUNT(*) > 3\r\nORDER BY avg_price DESC;\r\n\r\n-- GROUP BY with ROLLUP (subtotal rows)\r\nSELECT \r\n    category_id, \r\n    supplier_id,\r\n    COUNT(*) AS product_count\r\nFROM Products\r\nGROUP BY ROLLUP (category_id, supplier_id);\r\n\r\n-- GROUP BY with CUBE (all combinations)\r\nSELECT \r\n    category_id, \r\n    supplier_id,\r\n    COUNT(*) AS product_count\r\nFROM Products\r\nGROUP BY CUBE (category_id, supplier_id);\r\n\r\n-- GROUP BY with GROUPING SETS (specific groupings)\r\nSELECT \r\n    category_id, \r\n    supplier_id,\r\n    COUNT(*) AS product_count\r\nFROM Products\r\nGROUP BY GROUPING SETS ((category_id), (supplier_id), ());</code></pre>\r\n</div>\r\n\r\n<h4>GROUP BY Clause Components</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Component</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>GROUP BY</td>\r\n        <td>Groups rows that have the same values</td>\r\n        <td>GROUP BY category_id</td>\r\n    </tr>\r\n    <tr>\r\n        <td>HAVING</td>\r\n        <td>Filters groups based on aggregate results</td>\r\n        <td>HAVING COUNT(*) > 5</td>\r\n    </tr>\r\n    <tr>\r\n        <td>ROLLUP</td>\r\n        <td>Creates subtotals and grand totals</td>\r\n        <td>GROUP BY ROLLUP (category_id, supplier_id)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CUBE</td>\r\n        <td>Creates subtotals for all combinations</td>\r\n        <td>GROUP BY CUBE (category_id, supplier_id)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>GROUPING SETS</td>\r\n        <td>Specifies multiple groupings in one query</td>\r\n        <td>GROUP BY GROUPING SETS ((category_id), (supplier_id))</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>7. JOINs (INNER, LEFT, RIGHT, FULL)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- INNER JOIN - Returns rows with matching values in both tables\r\nSELECT \r\n    p.product_id,\r\n    p.name AS product_name,\r\n    c.name AS category_name\r\nFROM Products p\r\nINNER JOIN Categories c ON p.category_id = c.category_id;\r\n\r\n-- LEFT JOIN - Returns all rows from the left table and matched rows from the right\r\nSELECT \r\n    c.customer_id,\r\n    c.name AS customer_name,\r\n    o.order_id,\r\n    o.order_date\r\nFROM Customers c\r\nLEFT JOIN Orders o ON c.customer_id = o.customer_id;\r\n\r\n-- RIGHT JOIN - Returns all rows from the right table and matched rows from the left\r\nSELECT \r\n    e.employee_id,\r\n    e.name AS employee_name,\r\n    d.department_id,\r\n    d.name AS department_name\r\nFROM Employees e\r\nRIGHT JOIN Departments d ON e.department_id = d.department_id;\r\n\r\n-- FULL OUTER JOIN - Returns all rows when there\'s a match in either table\r\nSELECT \r\n    c.customer_id,\r\n    c.name AS customer_name,\r\n    o.order_id,\r\n    o.order_date\r\nFROM Customers c\r\nFULL OUTER JOIN Orders o ON c.customer_id = o.customer_id;\r\n\r\n-- Multiple JOINs\r\nSELECT \r\n    o.order_id,\r\n    c.name AS customer_name,\r\n    p.name AS product_name,\r\n    oi.quantity,\r\n    oi.price\r\nFROM Orders o\r\nJOIN Customers c ON o.customer_id = c.customer_id\r\nJOIN OrderItems oi ON o.order_id = oi.order_id\r\nJOIN Products p ON oi.product_id = p.product_id;\r\n\r\n-- Self JOIN - Joining a table to itself\r\nSELECT \r\n    e1.employee_id,\r\n    e1.name AS employee_name,\r\n    e2.name AS manager_name\r\nFROM Employees e1\r\nLEFT JOIN Employees e2 ON e1.manager_id = e2.employee_id;\r\n\r\n-- CROSS JOIN - Returns the Cartesian product of tables\r\nSELECT \r\n    c.name AS customer_name,\r\n    p.name AS product_name\r\nFROM Customers c\r\nCROSS JOIN Products p;\r\n\r\n-- JOIN with WHERE filtering\r\nSELECT \r\n    p.product_id,\r\n    p.name AS product_name,\r\n    c.name AS category_name\r\nFROM Products p\r\nINNER JOIN Categories c ON p.category_id = c.category_id\r\nWHERE p.price > 50 AND c.name = \'Electronics\';</code></pre>\r\n</div>\r\n\r\n<h4>Types of JOINs</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>JOIN Type</th>\r\n        <th>Description</th>\r\n        <th>Venn Diagram</th>\r\n    </tr>\r\n    <tr>\r\n        <td>INNER JOIN</td>\r\n        <td>Returns only rows with matching values in both tables</td>\r\n        <td>Intersection of two circles</td>\r\n    </tr>\r\n    <tr>\r\n        <td>LEFT JOIN (LEFT OUTER JOIN)</td>\r\n        <td>Returns all rows from the left table and matched rows from the right table</td>\r\n        <td>Entire left circle plus intersection</td>\r\n    </tr>\r\n    <tr>\r\n        <td>RIGHT JOIN (RIGHT OUTER JOIN)</td>\r\n        <td>Returns all rows from the right table and matched rows from the left table</td>\r\n        <td>Entire right circle plus intersection</td>\r\n    </tr>\r\n    <tr>\r\n        <td>FULL OUTER JOIN</td>\r\n        <td>Returns all rows when there\'s a match in either table</td>\r\n        <td>Union of both circles</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CROSS JOIN</td>\r\n        <td>Returns the Cartesian product of both tables (all possible combinations)</td>\r\n        <td>All combinations of elements from both sets</td>\r\n    </tr>\r\n    <tr>\r\n        <td>SELF JOIN</td>\r\n        <td>Joins a table to itself, typically for hierarchical data</td>\r\n        <td>N/A</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>8. Subqueries</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Subquery in SELECT clause\r\nSELECT \r\n    product_id,\r\n    name,\r\n    price,\r\n    (SELECT AVG(price) FROM Products) AS avg_price,\r\n    price - (SELECT AVG(price) FROM Products) AS price_difference\r\nFROM Products;\r\n\r\n-- Subquery in FROM clause (Derived Table)\r\nSELECT \r\n    category_id,\r\n    AVG(price) AS avg_price\r\nFROM (\r\n    SELECT category_id, price\r\n    FROM Products\r\n    WHERE stock_quantity > 0\r\n) AS available_products\r\nGROUP BY category_id;\r\n\r\n-- Subquery in WHERE clause (with comparison operator)\r\nSELECT product_id, name, price\r\nFROM Products\r\nWHERE price > (SELECT AVG(price) FROM Products);\r\n\r\n-- Subquery with IN operator\r\nSELECT customer_id, name, city\r\nFROM Customers\r\nWHERE customer_id IN (\r\n    SELECT DISTINCT customer_id\r\n    FROM Orders\r\n    WHERE order_date > \'2023-01-01\'\r\n);\r\n\r\n-- Subquery with ANY operator\r\nSELECT product_id, name, price\r\nFROM Products\r\nWHERE price > ANY (\r\n    SELECT price\r\n    FROM Products\r\n    WHERE category_id = 3\r\n);\r\n\r\n-- Subquery with ALL operator\r\nSELECT product_id, name, price\r\nFROM Products\r\nWHERE price > ALL (\r\n    SELECT price\r\n    FROM Products\r\n    WHERE category_id = 3\r\n);\r\n\r\n-- Correlated subquery\r\nSELECT \r\n    c.customer_id,\r\n    c.name,\r\n    (SELECT COUNT(*)\r\n     FROM Orders o\r\n     WHERE o.customer_id = c.customer_id) AS order_count\r\nFROM Customers c;\r\n\r\n-- EXISTS operator\r\nSELECT c.customer_id, c.name\r\nFROM Customers c\r\nWHERE EXISTS (\r\n    SELECT 1\r\n    FROM Orders o\r\n    WHERE o.customer_id = c.customer_id\r\n    AND o.order_date > \'2023-01-01\'\r\n);\r\n\r\n-- NOT EXISTS operator\r\nSELECT c.customer_id, c.name\r\nFROM Customers c\r\nWHERE NOT EXISTS (\r\n    SELECT 1\r\n    FROM Orders o\r\n    WHERE o.customer_id = c.customer_id\r\n);\r\n\r\n-- Subquery with INSERT statement\r\nINSERT INTO PremiumCustomers (customer_id, name, email)\r\nSELECT customer_id, name, email\r\nFROM Customers\r\nWHERE total_orders > 10;\r\n\r\n-- Subquery with UPDATE statement\r\nUPDATE Products\r\nSET price = price * 1.05\r\nWHERE category_id = (\r\n    SELECT category_id\r\n    FROM Categories\r\n    WHERE name = \'Electronics\'\r\n);\r\n\r\n-- Subquery with DELETE statement\r\nDELETE FROM OrderItems\r\nWHERE order_id IN (\r\n    SELECT order_id\r\n    FROM Orders\r\n    WHERE order_date < \'2022-01-01\'\r\n);</code></pre>\r\n</div>\r\n\r\n<h4>Subquery Types and Usage</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Scalar Subquery</td>\r\n        <td>Returns a single value (used in SELECT or WHERE)</td>\r\n        <td>SELECT (SELECT MAX(price) FROM Products)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Row Subquery</td>\r\n        <td>Returns a single row (used with comparison operators)</td>\r\n        <td>WHERE (col1, col2) = (SELECT col1, col2 FROM table)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Table Subquery</td>\r\n        <td>Returns multiple rows and columns (used in FROM clause)</td>\r\n        <td>FROM (SELECT * FROM Products WHERE price > 10) AS p</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Correlated Subquery</td>\r\n        <td>References outer query columns (executes for each row)</td>\r\n        <td>SELECT c.name, (SELECT COUNT(*) FROM Orders o WHERE o.customer_id = c.customer_id)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>EXISTS/NOT EXISTS</td>\r\n        <td>Checks for existence of rows in subquery</td>\r\n        <td>WHERE EXISTS (SELECT 1 FROM Orders WHERE customer_id = c.customer_id)</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>9. Set Operations (UNION, INTERSECT, EXCEPT)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- UNION - Combines results from multiple SELECT statements, removing duplicates\r\nSELECT customer_id, name, email FROM Customers\r\nUNION\r\nSELECT customer_id, name, email FROM Suppliers;\r\n\r\n-- UNION ALL - Combines results including duplicates\r\nSELECT product_id, name, price FROM Products WHERE category_id = 1\r\nUNION ALL\r\nSELECT product_id, name, price FROM Products WHERE category_id = 2;\r\n\r\n-- INTERSECT - Returns only rows that appear in both result sets\r\nSELECT customer_id FROM Customers WHERE city = \'New York\'\r\nINTERSECT\r\nSELECT customer_id FROM Orders WHERE order_date > \'2023-01-01\';\r\n\r\n-- EXCEPT/MINUS - Returns rows from the first result set that are not in the second\r\nSELECT customer_id FROM Customers\r\nEXCEPT\r\nSELECT customer_id FROM Orders;\r\n\r\n-- Set operations with ORDER BY\r\nSELECT product_id, name, price FROM Products WHERE category_id = 1\r\nUNION\r\nSELECT product_id, name, price FROM Products WHERE category_id = 2\r\nORDER BY name;\r\n\r\n-- Set operations with different columns (must have same number and compatible types)\r\nSELECT customer_id, name, NULL AS order_date FROM Customers\r\nUNION\r\nSELECT customer_id, NULL AS name, order_date FROM Orders;\r\n\r\n-- Complex set operations with parentheses\r\n(SELECT customer_id FROM Customers WHERE city = \'New York\'\r\nINTERSECT\r\nSELECT customer_id FROM Orders WHERE order_date > \'2023-01-01\')\r\nUNION\r\nSELECT customer_id FROM Customers WHERE city = \'Los Angeles\';\r\n\r\n-- Set operations with GROUP BY\r\nSELECT category_id, COUNT(*) AS product_count FROM Products\r\nGROUP BY category_id\r\nUNION\r\nSELECT category_id, COUNT(*) AS product_count FROM ArchivedProducts\r\nGROUP BY category_id;\r\n\r\n-- Set operations with HAVING\r\nSELECT category_id, AVG(price) AS avg_price FROM Products\r\nGROUP BY category_id\r\nHAVING AVG(price) > 50\r\nUNION\r\nSELECT category_id, AVG(price) AS avg_price FROM ArchivedProducts\r\nGROUP BY category_id\r\nHAVING AVG(price) > 50;</code></pre>\r\n</div>\r\n\r\n<h4>Set Operations Comparison</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Operation</th>\r\n        <th>Description</th>\r\n        <th>Venn Diagram</th>\r\n        <th>Duplicates</th>\r\n    </tr>\r\n    <tr>\r\n        <td>UNION</td>\r\n        <td>Combines rows from multiple result sets</td>\r\n        <td>Union of sets</td>\r\n        <td>Removed</td>\r\n    </tr>\r\n    <tr>\r\n        <td>UNION ALL</td>\r\n        <td>Combines rows from multiple result sets</td>\r\n        <td>Union of sets</td>\r\n        <td>Kept</td>\r\n    </tr>\r\n    <tr>\r\n        <td>INTERSECT</td>\r\n        <td>Returns rows common to all result sets</td>\r\n        <td>Intersection of sets</td>\r\n        <td>Removed</td>\r\n    </tr>\r\n    <tr>\r\n        <td>EXCEPT/MINUS</td>\r\n        <td>Returns rows from first set not in others</td>\r\n        <td>Difference of sets</td>\r\n        <td>Removed</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>10. Data Manipulation (INSERT, UPDATE, DELETE)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- INSERT - Adding new rows to a table\r\n\r\n-- Insert a single row with explicit column names\r\nINSERT INTO Customers (customer_id, name, email, city)\r\nVALUES (101, \'John Smith\', \'john@example.com\', \'New York\');\r\n\r\n-- Insert a single row without specifying column names (must provide all values)\r\nINSERT INTO Customers\r\nVALUES (102, \'Jane Doe\', \'jane@example.com\', \'Los Angeles\');\r\n\r\n-- Insert multiple rows\r\nINSERT INTO Products (product_id, name, price, category_id)\r\nVALUES \r\n    (201, \'Laptop\', 999.99, 1),\r\n    (202, \'Smartphone\', 699.99, 1),\r\n    (203, \'Headphones\', 149.99, 1);\r\n\r\n-- Insert with DEFAULT values\r\nINSERT INTO Customers (customer_id, name, email, city, registration_date)\r\nVALUES (103, \'Bob Johnson\', \'bob@example.com\', \'Chicago\', DEFAULT);\r\n\r\n-- Insert with subquery\r\nINSERT INTO PremiumCustomers (customer_id, name, email)\r\nSELECT customer_id, name, email\r\nFROM Customers\r\nWHERE total_orders > 10;\r\n\r\n-- UPDATE - Modifying existing rows\r\n\r\n-- Update a single column for all rows\r\nUPDATE Products\r\nSET price = price * 1.05;  -- Increase all prices by 5%\r\n\r\n-- Update specific columns for specific rows\r\nUPDATE Products\r\nSET price = 899.99, stock_quantity = 50\r\nWHERE product_id = 201;\r\n\r\n-- Update with a condition\r\nUPDATE Customers\r\nSET city = \'New York City\'\r\nWHERE city = \'New York\';\r\n\r\n-- Update with expression\r\nUPDATE OrderItems\r\nSET total_price = quantity * unit_price;\r\n\r\n-- Update with subquery\r\nUPDATE Products\r\nSET category_name = (SELECT name FROM Categories WHERE category_id = 1)\r\nWHERE category_id = 1;\r\n\r\n-- Update with JOIN (syntax varies by database)\r\n-- MySQL/PostgreSQL:\r\nUPDATE Products p\r\nJOIN Categories c ON p.category_id = c.category_id\r\nSET p.category_name = c.name;\r\n\r\n-- SQL Server:\r\nUPDATE p\r\nSET p.category_name = c.name\r\nFROM Products p\r\nJOIN Categories c ON p.category_id = c.category_id;\r\n\r\n-- DELETE - Removing rows from a table\r\n\r\n-- Delete all rows (use with caution!)\r\nDELETE FROM Customers;\r\n\r\n-- Delete specific rows\r\nDELETE FROM Products\r\nWHERE product_id = 203;\r\n\r\n-- Delete with a condition\r\nDELETE FROM OrderItems\r\nWHERE quantity = 0;\r\n\r\n-- Delete with subquery\r\nDELETE FROM Customers\r\nWHERE customer_id IN (\r\n    SELECT customer_id\r\n    FROM Orders\r\n    WHERE order_date < \'2022-01-01\'\r\n);\r\n\r\n-- Delete with JOIN (syntax varies by database)\r\n-- MySQL:\r\nDELETE Customers\r\nFROM Customers\r\nJOIN Orders ON Customers.customer_id = Orders.customer_id\r\nWHERE Orders.order_date < \'2022-01-01\';\r\n\r\n-- SQL Server:\r\nDELETE FROM Customers\r\nFROM Customers c\r\nJOIN Orders o ON c.customer_id = o.customer_id\r\nWHERE o.order_date < \'2022-01-01\';\r\n\r\n-- TRUNCATE - Remove all rows quickly (cannot be undone)\r\nTRUNCATE TABLE TemporaryData;</code></pre>\r\n</div>\r\n\r\n<h4>Data Manipulation Operations</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Operation</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>INSERT</td>\r\n        <td>Adds new rows to a table</td>\r\n        <td>INSERT INTO Customers (name, email) VALUES (\'John\', \'john@example.com\')</td>\r\n    </tr>\r\n    <tr>\r\n        <td>UPDATE</td>\r\n        <td>Modifies existing rows in a table</td>\r\n        <td>UPDATE Products SET price = price * 1.05</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DELETE</td>\r\n        <td>Removes rows from a table</td>\r\n        <td>DELETE FROM Orders WHERE order_date < \'2022-01-01\'</td>\r\n    </tr>\r\n    <tr>\r\n        <td>TRUNCATE</td>\r\n        <td>Removes all rows from a table quickly</td>\r\n        <td>TRUNCATE TABLE TemporaryData</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>11. Data Definition (CREATE, ALTER, DROP)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- CREATE TABLE - Creating a new table\r\n\r\n-- Basic table creation\r\nCREATE TABLE Customers (\r\n    customer_id INT PRIMARY KEY,\r\n    name VARCHAR(100) NOT NULL,\r\n    email VARCHAR(100) UNIQUE,\r\n    city VARCHAR(50),\r\n    registration_date DATE DEFAULT CURRENT_DATE\r\n);\r\n\r\n-- Table with foreign key\r\nCREATE TABLE Orders (\r\n    order_id INT PRIMARY KEY,\r\n    customer_id INT,\r\n    order_date DATE NOT NULL,\r\n    total_amount DECIMAL(10, 2),\r\n    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)\r\n);\r\n\r\n-- Table with auto-increment (syntax varies by database)\r\n-- MySQL:\r\nCREATE TABLE Products (\r\n    product_id INT AUTO_INCREMENT PRIMARY KEY,\r\n    name VARCHAR(100) NOT NULL,\r\n    price DECIMAL(10, 2) NOT NULL,\r\n    category_id INT,\r\n    FOREIGN KEY (category_id) REFERENCES Categories(category_id)\r\n);\r\n\r\n-- PostgreSQL:\r\nCREATE TABLE Products (\r\n    product_id SERIAL PRIMARY KEY,\r\n    name VARCHAR(100) NOT NULL,\r\n    price DECIMAL(10, 2) NOT NULL,\r\n    category_id INT REFERENCES Categories(category_id)\r\n);\r\n\r\n-- SQL Server:\r\nCREATE TABLE Products (\r\n    product_id INT IDENTITY(1,1) PRIMARY KEY,\r\n    name VARCHAR(100) NOT NULL,\r\n    price DECIMAL(10, 2) NOT NULL,\r\n    category_id INT REFERENCES Categories(category_id)\r\n);\r\n\r\n-- CREATE TABLE AS - Creating a table from a query result\r\nCREATE TABLE HighValueProducts AS\r\nSELECT * FROM Products WHERE price > 100;\r\n\r\n-- ALTER TABLE - Modifying an existing table\r\n\r\n-- Add a new column\r\nALTER TABLE Customers ADD phone_number VARCHAR(20);\r\n\r\n-- Drop a column\r\nALTER TABLE Customers DROP COLUMN phone_number;\r\n\r\n-- Modify a column (syntax varies by database)\r\n-- MySQL:\r\nALTER TABLE Customers MODIFY name VARCHAR(150) NOT NULL;\r\n\r\n-- PostgreSQL:\r\nALTER TABLE Customers ALTER COLUMN name TYPE VARCHAR(150);\r\n\r\n-- SQL Server:\r\nALTER TABLE Customers ALTER COLUMN name VARCHAR(150) NOT NULL;\r\n\r\n-- Add a constraint\r\nALTER TABLE Products ADD CONSTRAINT chk_price_positive CHECK (price > 0);\r\n\r\n-- Drop a constraint\r\nALTER TABLE Products DROP CONSTRAINT chk_price_positive;\r\n\r\n-- Add a foreign key\r\nALTER TABLE OrderItems ADD CONSTRAINT fk_product\r\nFOREIGN KEY (product_id) REFERENCES Products(product_id);\r\n\r\n-- DROP TABLE - Removing a table\r\n\r\n-- Drop a table\r\nDROP TABLE TemporaryData;\r\n\r\n-- Drop a table if it exists (syntax varies by database)\r\n-- MySQL/PostgreSQL:\r\nDROP TABLE IF EXISTS TemporaryData;\r\n\r\n-- SQL Server:\r\nIF OBJECT_ID(\'TemporaryData\', \'U\') IS NOT NULL\r\n    DROP TABLE TemporaryData;\r\n\r\n-- CREATE INDEX - Creating an index for performance\r\n\r\n-- Create a basic index\r\nCREATE INDEX idx_customers_name ON Customers(name);\r\n\r\n-- Create a unique index\r\nCREATE UNIQUE INDEX idx_customers_email ON Customers(email);\r\n\r\n-- Create a composite index\r\nCREATE INDEX idx_orders_customer_date ON Orders(customer_id, order_date);\r\n\r\n-- DROP INDEX - Removing an index\r\n\r\n-- Drop an index (syntax varies by database)\r\n-- MySQL:\r\nDROP INDEX idx_customers_name ON Customers;\r\n\r\n-- PostgreSQL:\r\nDROP INDEX idx_customers_name;\r\n\r\n-- SQL Server:\r\nDROP INDEX idx_customers_name ON Customers;\r\n\r\n-- CREATE VIEW - Creating a virtual table\r\n\r\n-- Create a simple view\r\nCREATE VIEW CustomerOrderSummary AS\r\nSELECT \r\n    c.customer_id,\r\n    c.name,\r\n    COUNT(o.order_id) AS order_count,\r\n    SUM(o.total_amount) AS total_spent\r\nFROM Customers c\r\nLEFT JOIN Orders o ON c.customer_id = o.customer_id\r\nGROUP BY c.customer_id, c.name;\r\n\r\n-- Create a view with JOINs\r\nCREATE VIEW ProductDetails AS\r\nSELECT \r\n    p.product_id,\r\n    p.name AS product_name,\r\n    p.price,\r\n    c.name AS category_name\r\nFROM Products p\r\nJOIN Categories c ON p.category_id = c.category_id;\r\n\r\n-- DROP VIEW - Removing a view\r\nDROP VIEW CustomerOrderSummary;</code></pre>\r\n</div>\r\n\r\n<h4>Data Definition Operations</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Operation</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>CREATE TABLE</td>\r\n        <td>Creates a new table in the database</td>\r\n        <td>CREATE TABLE Customers (id INT PRIMARY KEY, name VARCHAR(100))</td>\r\n    </tr>\r\n    <tr>\r\n        <td>ALTER TABLE</td>\r\n        <td>Modifies the structure of an existing table</td>\r\n        <td>ALTER TABLE Customers ADD email VARCHAR(100)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DROP TABLE</td>\r\n        <td>Removes a table from the database</td>\r\n        <td>DROP TABLE Customers</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CREATE INDEX</td>\r\n        <td>Creates an index to improve query performance</td>\r\n        <td>CREATE INDEX idx_customers_name ON Customers(name)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DROP INDEX</td>\r\n        <td>Removes an index from the database</td>\r\n        <td>DROP INDEX idx_customers_name</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CREATE VIEW</td>\r\n        <td>Creates a virtual table based on a query</td>\r\n        <td>CREATE VIEW CustomerView AS SELECT * FROM Customers</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DROP VIEW</td>\r\n        <td>Removes a view from the database</td>\r\n        <td>DROP VIEW CustomerView</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>12. Constraints and Keys</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- PRIMARY KEY - Uniquely identifies each row in a table\r\n\r\n-- Define primary key at column level\r\nCREATE TABLE Customers (\r\n    customer_id INT PRIMARY KEY,\r\n    name VARCHAR(100) NOT NULL,\r\n    email VARCHAR(100)\r\n);\r\n\r\n-- Define primary key at table level (for composite keys)\r\nCREATE TABLE OrderItems (\r\n    order_id INT,\r\n    product_id INT,\r\n    quantity INT,\r\n    price DECIMAL(10, 2),\r\n    PRIMARY KEY (order_id, product_id)\r\n);\r\n\r\n-- FOREIGN KEY - Enforces referential integrity between tables\r\n\r\n-- Define foreign key at column level\r\nCREATE TABLE Orders (\r\n    order_id INT PRIMARY KEY,\r\n    customer_id INT REFERENCES Customers(customer_id),\r\n    order_date DATE NOT NULL\r\n);\r\n\r\n-- Define foreign key at table level with name\r\nCREATE TABLE OrderItems (\r\n    order_id INT,\r\n    product_id INT,\r\n    quantity INT,\r\n    price DECIMAL(10, 2),\r\n    PRIMARY KEY (order_id, product_id),\r\n    CONSTRAINT fk_order\r\n        FOREIGN KEY (order_id) REFERENCES Orders(order_id),\r\n    CONSTRAINT fk_product\r\n        FOREIGN KEY (product_id) REFERENCES Products(product_id)\r\n);\r\n\r\n-- FOREIGN KEY with ON DELETE/UPDATE actions\r\nCREATE TABLE OrderItems (\r\n    order_id INT,\r\n    product_id INT,\r\n    quantity INT,\r\n    price DECIMAL(10, 2),\r\n    PRIMARY KEY (order_id, product_id),\r\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\r\n        ON DELETE CASCADE\r\n        ON UPDATE CASCADE,\r\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\r\n        ON DELETE SET NULL\r\n        ON UPDATE SET NULL\r\n);\r\n\r\n-- UNIQUE - Ensures all values in a column are unique\r\nCREATE TABLE Customers (\r\n    customer_id INT PRIMARY KEY,\r\n    name VARCHAR(100) NOT NULL,\r\n    email VARCHAR(100) UNIQUE,\r\n    phone VARCHAR(20)\r\n);\r\n\r\n-- Composite UNIQUE constraint\r\nCREATE TABLE ProductSuppliers (\r\n    product_id INT,\r\n    supplier_id INT,\r\n    supply_date DATE,\r\n    PRIMARY KEY (product_id, supplier_id),\r\n    CONSTRAINT uc_product_supplier UNIQUE (product_id, supplier_id)\r\n);\r\n\r\n-- NOT NULL - Ensures a column cannot have NULL values\r\nCREATE TABLE Products (\r\n    product_id INT PRIMARY KEY,\r\n    name VARCHAR(100) NOT NULL,\r\n    price DECIMAL(10, 2) NOT NULL,\r\n    description TEXT\r\n);\r\n\r\n-- CHECK - Ensures values in a column satisfy a specific condition\r\nCREATE TABLE Products (\r\n    product_id INT PRIMARY KEY,\r\n    name VARCHAR(100) NOT NULL,\r\n    price DECIMAL(10, 2) NOT NULL,\r\n    stock_quantity INT,\r\n    CONSTRAINT chk_price_positive CHECK (price > 0),\r\n    CONSTRAINT chk_stock_nonnegative CHECK (stock_quantity >= 0)\r\n);\r\n\r\n-- DEFAULT - Sets a default value for a column\r\nCREATE TABLE Customers (\r\n    customer_id INT PRIMARY KEY,\r\n    name VARCHAR(100) NOT NULL,\r\n    email VARCHAR(100),\r\n    registration_date DATE DEFAULT CURRENT_DATE,\r\n    status VARCHAR(20) DEFAULT \'Active\'\r\n);\r\n\r\n-- Adding constraints to existing tables\r\nALTER TABLE Products ADD CONSTRAINT chk_price_positive CHECK (price > 0);\r\nALTER TABLE Customers ADD CONSTRAINT uc_email UNIQUE (email);\r\nALTER TABLE Orders ADD CONSTRAINT fk_customer FOREIGN KEY (customer_id) REFERENCES Customers(customer_id);\r\n\r\n-- Dropping constraints\r\nALTER TABLE Products DROP CONSTRAINT chk_price_positive;\r\nALTER TABLE Customers DROP CONSTRAINT uc_email;\r\nALTER TABLE Orders DROP CONSTRAINT fk_customer;</code></pre>\r\n</div>\r\n\r\n<h4>Types of Constraints</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Constraint</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>PRIMARY KEY</td>\r\n        <td>Uniquely identifies each row in a table</td>\r\n        <td>customer_id INT PRIMARY KEY</td>\r\n    </tr>\r\n    <tr>\r\n        <td>FOREIGN KEY</td>\r\n        <td>Ensures referential integrity between tables</td>\r\n        <td>FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>UNIQUE</td>\r\n        <td>Ensures all values in a column are unique</td>\r\n        <td>email VARCHAR(100) UNIQUE</td>\r\n    </tr>\r\n    <tr>\r\n        <td>NOT NULL</td>\r\n        <td>Ensures a column cannot have NULL values</td>\r\n        <td>name VARCHAR(100) NOT NULL</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CHECK</td>\r\n        <td>Ensures values satisfy a specific condition</td>\r\n        <td>CHECK (price > 0)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DEFAULT</td>\r\n        <td>Sets a default value for a column</td>\r\n        <td>status VARCHAR(20) DEFAULT \'Active\'</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>13. Indexes</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- CREATE INDEX - Creating indexes to improve query performance\r\n\r\n-- Basic index on a single column\r\nCREATE INDEX idx_customers_name ON Customers(name);\r\n\r\n-- Unique index (also enforces uniqueness)\r\nCREATE UNIQUE INDEX idx_customers_email ON Customers(email);\r\n\r\n-- Composite index on multiple columns\r\nCREATE INDEX idx_orders_customer_date ON Orders(customer_id, order_date);\r\n\r\n-- Index with a specific name\r\nCREATE INDEX idx_products_category_price ON Products(category_id, price);\r\n\r\n-- Partial index (PostgreSQL)\r\nCREATE INDEX idx_active_customers ON Customers(customer_id, name) WHERE status = \'Active\';\r\n\r\n-- Filtered index (SQL Server)\r\nCREATE INDEX idx_high_value_products ON Products(product_id, name) WHERE price > 100;\r\n\r\n-- Clustered index (SQL Server/PostgreSQL)\r\n-- In PostgreSQL, primary keys are automatically clustered\r\n-- In SQL Server, you can specify:\r\nCREATE CLUSTERED INDEX idx_orders_order_id ON Orders(order_id);\r\n\r\n-- Non-clustered index (SQL Server)\r\nCREATE NONCLUSTERED INDEX idx_orders_customer_id ON Orders(customer_id);\r\n\r\n-- Function-based index (PostgreSQL/Oracle)\r\nCREATE INDEX idx_customers_lower_name ON Customers(LOWER(name));\r\n\r\n-- DROP INDEX - Removing indexes\r\n\r\n-- Drop an index (syntax varies by database)\r\n-- MySQL:\r\nDROP INDEX idx_customers_name ON Customers;\r\n\r\n-- PostgreSQL:\r\nDROP INDEX idx_customers_name;\r\n\r\n-- SQL Server:\r\nDROP INDEX idx_customers_name ON Customers;\r\n\r\n-- Index usage examples\r\n\r\n-- Query that can use the idx_customers_name index\r\nSELECT * FROM Customers WHERE name = \'John Smith\';\r\n\r\n-- Query that can use the idx_orders_customer_date index\r\nSELECT * FROM Orders WHERE customer_id = 101 ORDER BY order_date;\r\n\r\n-- Query that can use the idx_products_category_price index\r\nSELECT * FROM Products WHERE category_id = 3 AND price > 50;\r\n\r\n-- Query that might not use an index effectively\r\nSELECT * FROM Customers WHERE name LIKE \'%Smith%\';  -- Leading wildcard\r\n\r\n-- Index maintenance\r\n\r\n-- Rebuild an index (syntax varies by database)\r\n-- MySQL:\r\nALTER TABLE Customers ENGINE=InnoDB;  -- Rebuilds table and indexes\r\n\r\n-- PostgreSQL:\r\nREINDEX TABLE Customers;\r\n\r\n-- SQL Server:\r\nALTER INDEX idx_customers_name ON Customers REBUILD;\r\n\r\n-- Analyze index usage (PostgreSQL)\r\nSELECT \r\n    schemaname,\r\n    tablename,\r\n    indexname,\r\n    idx_scan\r\nFROM pg_stat_user_indexes\r\nWHERE schemaname = \'public\'\r\nORDER BY idx_scan;\r\n\r\n-- Index fragmentation (SQL Server)\r\nSELECT \r\n    OBJECT_NAME(i.object_id) AS table_name,\r\n    i.name AS index_name,\r\n    ips.avg_fragmentation_in_percent\r\nFROM sys.dm_db_index_physical_stats(DB_ID(), NULL, NULL, NULL, \'LIMITED\') ips\r\nJOIN sys.indexes i ON ips.object_id = i.object_id AND ips.index_id = i.index_id\r\nWHERE ips.avg_fragmentation_in_percent > 5\r\nORDER BY ips.avg_fragmentation_in_percent DESC;</code></pre>\r\n</div>\r\n\r\n<h4>Index Types and Characteristics</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Index Type</th>\r\n        <th>Description</th>\r\n        <th>Best For</th>\r\n    </tr>\r\n    <tr>\r\n        <td>B-Tree</td>\r\n        <td>Standard index structure that maintains data in sorted order</td>\r\n        <td>Equality and range queries, most common use cases</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Hash</td>\r\n        <td>Uses a hash function to map values to locations</td>\r\n        <td>Equality queries only, not range queries</td>\r\n    </tr>\r\n    <tr>\r\n        <td>GiST</td>\r\n        <td>Generalized Search Tree for indexing complex data types</td>\r\n        <td>Geometric data, full-text search (PostgreSQL)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>SP-GiST</td>\r\n        <td>Space-Partitioned GiST for non-balanced data structures</td>\r\n        <td>Phone numbers, network routing (PostgreSQL)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>GIN</td>\r\n        <td>Generalized Inverted Index for multi-value data types</td>\r\n        <td>Arrays, JSONB, full-text search (PostgreSQL)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>BRIN</td>\r\n        <td>Block Range Index for large tables with sorted data</td>\r\n        <td>Time-series data, large tables with natural ordering (PostgreSQL)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Clustered</td>\r\n        <td>Physically reorders table data based on index</td>\r\n        <td>Frequently accessed columns, range queries</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Non-clustered</td>\r\n        <td>Separate structure from table data</td>\r\n        <td>Most queries, doesn\'t affect physical table order</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>14. Views</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- CREATE VIEW - Creating virtual tables based on queries\r\n\r\n-- Simple view\r\nCREATE VIEW CustomerView AS\r\nSELECT customer_id, name, email, city\r\nFROM Customers\r\nWHERE status = \'Active\';\r\n\r\n-- View with JOIN\r\nCREATE VIEW ProductDetailsView AS\r\nSELECT \r\n    p.product_id,\r\n    p.name AS product_name,\r\n    p.price,\r\n    c.name AS category_name\r\nFROM Products p\r\nJOIN Categories c ON p.category_id = c.category_id;\r\n\r\n-- View with aggregate functions\r\nCREATE VIEW CustomerOrderSummary AS\r\nSELECT \r\n    c.customer_id,\r\n    c.name,\r\n    COUNT(o.order_id) AS order_count,\r\n    SUM(o.total_amount) AS total_spent\r\nFROM Customers c\r\nLEFT JOIN Orders o ON c.customer_id = o.customer_id\r\nGROUP BY c.customer_id, c.name;\r\n\r\n-- View with subquery\r\nCREATE VIEW HighValueOrders AS\r\nSELECT \r\n    o.order_id,\r\n    o.customer_id,\r\n    o.order_date,\r\n    o.total_amount\r\nFROM Orders o\r\nWHERE o.total_amount > (\r\n    SELECT AVG(total_amount) * 2 \r\n    FROM Orders\r\n);\r\n\r\n-- Materialized view (PostgreSQL)\r\nCREATE MATERIALIZED VIEW ProductSalesSummary AS\r\nSELECT \r\n    p.product_id,\r\n    p.name,\r\n    SUM(oi.quantity) AS total_sold,\r\n    SUM(oi.quantity * oi.price) AS total_revenue\r\nFROM Products p\r\nJOIN OrderItems oi ON p.product_id = oi.product_id\r\nGROUP BY p.product_id, p.name;\r\n\r\n-- Refresh materialized view\r\nREFRESH MATERIALIZED VIEW ProductSalesSummary;\r\n\r\n-- View with CHECK OPTION (prevents rows that don\'t satisfy view definition)\r\nCREATE VIEW ActiveCustomers AS\r\nSELECT customer_id, name, email, city\r\nFROM Customers\r\nWHERE status = \'Active\'\r\nWITH CHECK OPTION;\r\n\r\n-- Updating through a view\r\n-- Simple view update (allowed)\r\nUPDATE CustomerView\r\nSET email = \'newemail@example.com\'\r\nWHERE customer_id = 101;\r\n\r\n-- Complex view update (may not be allowed in all databases)\r\n-- Generally, views with JOINs, aggregates, or DISTINCT cannot be updated\r\n\r\n-- DROP VIEW - Removing views\r\nDROP VIEW CustomerView;\r\n\r\n-- Drop materialized view (PostgreSQL)\r\nDROP MATERIALIZED VIEW ProductSalesSummary;\r\n\r\n-- View information queries\r\n\r\n-- List all views (PostgreSQL)\r\nSELECT table_name \r\nFROM information_schema.views \r\nWHERE table_schema NOT IN (\'information_schema\', \'pg_catalog\');\r\n\r\n-- View definition (PostgreSQL)\r\nSELECT view_definition \r\nFROM information_schema.views \r\nWHERE table_name = \'customerview\';\r\n\r\n-- View dependencies (SQL Server)\r\nSELECT \r\n    OBJECT_NAME(referencing_id) AS referencing_object,\r\n    OBJECT_NAME(referenced_id) AS referenced_object\r\nFROM sys.sql_expression_dependencies\r\nWHERE referenced_id = OBJECT_ID(\'Customers\');</code></pre>\r\n</div>\r\n\r\n<h4>View Types and Features</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>View Type</th>\r\n        <th>Description</th>\r\n        <th>Characteristics</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Simple View</td>\r\n        <td>Based on a single table with no aggregations or GROUP BY</td>\r\n        <td>Can be updated, reflects data changes in real-time</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Complex View</td>\r\n        <td>Contains JOINs, aggregations, or DISTINCT</td>\r\n        <td>Often cannot be updated, more complex queries</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Materialized View</td>\r\n        <td>Physical copy of the query result stored on disk</td>\r\n        <td>Improves performance for complex queries, needs refreshing</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Indexed View</td>\r\n        <td>View with a unique clustered index (SQL Server)</td>\r\n        <td>Improves query performance, uses storage</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Partitioned View</td>\r\n        <td>Combines data from multiple tables (horizontal partitioning)</td>\r\n        <td>Improves manageability of large datasets</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>15. Stored Procedures and Functions</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Stored Procedures\r\n\r\n-- Create a simple stored procedure (MySQL)\r\nDELIMITER //\r\nCREATE PROCEDURE GetCustomerOrders(IN customerId INT)\r\nBEGIN\r\n    SELECT \r\n        o.order_id,\r\n        o.order_date,\r\n        o.total_amount\r\n    FROM Orders o\r\n    WHERE o.customer_id = customerId;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Call the stored procedure\r\nCALL GetCustomerOrders(101);\r\n\r\n-- Stored procedure with multiple parameters (MySQL)\r\nDELIMITER //\r\nCREATE PROCEDURE GetOrdersByDateRange(\r\n    IN startDate DATE,\r\n    IN endDate DATE\r\n)\r\nBEGIN\r\n    SELECT \r\n        o.order_id,\r\n        o.customer_id,\r\n        c.name AS customer_name,\r\n        o.order_date,\r\n        o.total_amount\r\n    FROM Orders o\r\n    JOIN Customers c ON o.customer_id = c.customer_id\r\n    WHERE o.order_date BETWEEN startDate AND endDate\r\n    ORDER BY o.order_date;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Call with parameters\r\nCALL GetOrdersByDateRange(\'2023-01-01\', \'2023-12-31\');\r\n\r\n-- Stored procedure with OUT parameter (MySQL)\r\nDELIMITER //\r\nCREATE PROCEDURE GetCustomerOrderCount(\r\n    IN customerId INT,\r\n    OUT orderCount INT\r\n)\r\nBEGIN\r\n    SELECT COUNT(*) INTO orderCount\r\n    FROM Orders\r\n    WHERE customer_id = customerId;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Call with OUT parameter\r\nCALL GetCustomerOrderCount(101, @count);\r\nSELECT @count;\r\n\r\n-- Stored procedure with conditional logic (MySQL)\r\nDELIMITER //\r\nCREATE PROCEDURE UpdateProductPrice(\r\n    IN productId INT,\r\n    IN newPrice DECIMAL(10,2),\r\n    IN percentageIncrease BOOLEAN\r\n)\r\nBEGIN\r\n    IF percentageIncrease THEN\r\n        UPDATE Products\r\n        SET price = price * (1 + newPrice/100)\r\n        WHERE product_id = productId;\r\n    ELSE\r\n        UPDATE Products\r\n        SET price = newPrice\r\n        WHERE product_id = productId;\r\n    END IF;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Functions\r\n\r\n-- Create a simple function (PostgreSQL)\r\nCREATE OR REPLACE FUNCTION CalculateTax(price DECIMAL(10,2)) \r\nRETURNS DECIMAL(10,2) AS $$\r\nBEGIN\r\n    RETURN price * 0.08; -- 8% tax\r\nEND;\r\n$$ LANGUAGE plpgsql;\r\n\r\n-- Use the function in a query\r\nSELECT \r\n    product_id,\r\n    name,\r\n    price,\r\n    CalculateTax(price) AS tax_amount,\r\n    price + CalculateTax(price) AS total_price\r\nFROM Products;\r\n\r\n-- Function with multiple parameters (SQL Server)\r\nCREATE FUNCTION CalculateDiscount(\r\n    @price DECIMAL(10,2),\r\n    @discount_percent DECIMAL(5,2)\r\n)\r\nRETURNS DECIMAL(10,2)\r\nAS\r\nBEGIN\r\n    RETURN @price * (@discount_percent / 100);\r\nEND;\r\n\r\n-- Use in query\r\nSELECT \r\n    product_id,\r\n    name,\r\n    price,\r\n    dbo.CalculateDiscount(price, 10) AS discount_amount,\r\n    price - dbo.CalculateDiscount(price, 10) AS discounted_price\r\nFROM Products;\r\n\r\n-- Table-valued function (SQL Server)\r\nCREATE FUNCTION GetProductsByCategory(@categoryId INT)\r\nRETURNS TABLE\r\nAS\r\nRETURN\r\n(\r\n    SELECT \r\n        product_id,\r\n        name,\r\n        price\r\n    FROM Products\r\n    WHERE category_id = @categoryId\r\n);\r\n\r\n-- Use the table-valued function\r\nSELECT * FROM GetProductsByCategory(3);\r\n\r\n-- Drop procedures and functions\r\n\r\n-- Drop stored procedure (MySQL)\r\nDROP PROCEDURE IF EXISTS GetCustomerOrders;\r\n\r\n-- Drop function (PostgreSQL)\r\nDROP FUNCTION IF EXISTS CalculateTax(DECIMAL(10,2));\r\n\r\n-- Drop function (SQL Server)\r\nDROP FUNCTION IF EXISTS CalculateDiscount;</code></pre>\r\n</div>\r\n\r\n<h4>Stored Procedures vs Functions</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Feature</th>\r\n        <th>Stored Procedures</th>\r\n        <th>Functions</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Return Value</td>\r\n        <td>Can return multiple values or none</td>\r\n        <td>Must return a single value</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Usage in Queries</td>\r\n        <td>Cannot be used in SELECT statements</td>\r\n        <td>Can be used in SELECT statements</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Parameters</td>\r\n        <td>Can have IN, OUT, INOUT parameters</td>\r\n        <td>Only IN parameters</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Transaction Control</td>\r\n        <td>Can contain transaction statements</td>\r\n        <td>Cannot contain transaction statements</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Data Modification</td>\r\n        <td>Can perform DML operations</td>\r\n        <td>Limited DML operations (varies by DBMS)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Calling</td>\r\n        <td>Called using EXEC or CALL</td>\r\n        <td>Called directly in expressions</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>16. Transactions</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Transaction Control Statements\r\n\r\n-- Start a transaction\r\nBEGIN TRANSACTION;  -- SQL Server\r\n-- or\r\nSTART TRANSACTION;  -- MySQL/PostgreSQL\r\n\r\n-- Perform multiple operations\r\nINSERT INTO Orders (order_id, customer_id, order_date, total_amount)\r\nVALUES (1001, 101, CURRENT_DATE, 150.00);\r\n\r\nINSERT INTO OrderItems (order_id, product_id, quantity, price)\r\nVALUES (1001, 201, 1, 100.00);\r\n\r\nINSERT INTO OrderItems (order_id, product_id, quantity, price)\r\nVALUES (1001, 202, 1, 50.00);\r\n\r\n-- Commit the transaction (make changes permanent)\r\nCOMMIT;\r\n\r\n-- Rollback the transaction (undo changes)\r\n-- ROLLBACK;\r\n\r\n-- Transaction with error handling (SQL Server)\r\nBEGIN TRY\r\n    BEGIN TRANSACTION;\r\n    \r\n    -- Operations\r\n    UPDATE Products SET stock_quantity = stock_quantity - 1 WHERE product_id = 201;\r\n    UPDATE Products SET stock_quantity = stock_quantity - 1 WHERE product_id = 202;\r\n    \r\n    -- If we get here, commit\r\n    COMMIT;\r\nEND TRY\r\nBEGIN CATCH\r\n    -- If there\'s an error, rollback\r\n    IF @@TRANCOUNT > 0\r\n        ROLLBACK;\r\n    \r\n    -- Log the error\r\n    PRINT \'Transaction rolled back due to error: \' + ERROR_MESSAGE();\r\nEND CATCH;\r\n\r\n-- Transaction with SAVEPOINT (MySQL)\r\nSTART TRANSACTION;\r\n\r\n-- First operation\r\nINSERT INTO Orders (order_id, customer_id, order_date, total_amount)\r\nVALUES (1002, 102, CURRENT_DATE, 75.00);\r\n\r\n-- Set a savepoint\r\nSAVEPOINT after_order;\r\n\r\n-- Second operation\r\nINSERT INTO OrderItems (order_id, product_id, quantity, price)\r\nVALUES (1002, 203, 1, 75.00);\r\n\r\n-- If there\'s a problem with the second operation, rollback to savepoint\r\n-- ROLLBACK TO after_order;\r\n\r\n-- If everything is fine, commit\r\nCOMMIT;\r\n\r\n-- Transaction isolation levels\r\n\r\n-- Set transaction isolation level (SQL Server)\r\nSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\nSET TRANSACTION ISOLATION LEVEL READ COMMITTED;\r\nSET TRANSACTION ISOLATION LEVEL REPEATABLE READ;\r\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\r\n\r\n-- Transaction with explicit isolation level (PostgreSQL)\r\nBEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;\r\n\r\n-- Operations\r\nSELECT * FROM Products WHERE product_id = 201 FOR UPDATE;\r\n\r\n-- Commit\r\nCOMMIT;\r\n\r\n-- Transaction with explicit locking (PostgreSQL)\r\nBEGIN;\r\n\r\n-- Lock a row for update\r\nSELECT * FROM Products WHERE product_id = 201 FOR UPDATE;\r\n\r\n-- Update the row\r\nUPDATE Products SET price = 105.00 WHERE product_id = 201;\r\n\r\n-- Commit (releases the lock)\r\nCOMMIT;\r\n\r\n-- Transaction with deadlock handling (SQL Server)\r\nBEGIN TRY\r\n    BEGIN TRANSACTION;\r\n    \r\n    -- Operations that might cause deadlock\r\n    UPDATE Products SET stock_quantity = stock_quantity - 1 WHERE product_id = 201;\r\n    \r\n    -- Small delay to increase chance of deadlock (for demonstration)\r\n    WAITFOR DELAY \'00:00:01\';\r\n    \r\n    UPDATE Orders SET total_amount = total_amount + 100 WHERE order_id = 1001;\r\n    \r\n    COMMIT;\r\nEND TRY\r\nBEGIN CATCH\r\n    IF @@TRANCOUNT > 0\r\n        ROLLBACK;\r\n    \r\n    IF ERROR_NUMBER() = 1205  -- Deadlock error number\r\n        PRINT \'Transaction aborted due to deadlock. Retrying...\';\r\n    ELSE\r\n        PRINT \'Transaction aborted due to error: \' + ERROR_MESSAGE();\r\nEND CATCH;</code></pre>\r\n</div>\r\n\r\n<h4>Transaction Isolation Levels</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Isolation Level</th>\r\n        <th>Dirty Reads</th>\r\n        <th>Non-repeatable Reads</th>\r\n        <th>Phantom Reads</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>READ UNCOMMITTED</td>\r\n        <td>Possible</td>\r\n        <td>Possible</td>\r\n        <td>Possible</td>\r\n        <td>Lowest isolation, can read uncommitted changes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>READ COMMITTED</td>\r\n        <td>Not possible</td>\r\n        <td>Possible</td>\r\n        <td>Possible</td>\r\n        <td>Only reads committed data (default in many DBMS)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>REPEATABLE READ</td>\r\n        <td>Not possible</td>\r\n        <td>Not possible</td>\r\n        <td>Possible</td>\r\n        <td>Ensures consistent reads during transaction</td>\r\n    </tr>\r\n    <tr>\r\n        <td>SERIALIZABLE</td>\r\n        <td>Not possible</td>\r\n        <td>Not possible</td>\r\n        <td>Not possible</td>\r\n        <td>Highest isolation, transactions are completely isolated</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>17. Advanced SQL Topics</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Window Functions\r\n\r\n-- Basic window function with OVER()\r\nSELECT \r\n    product_id,\r\n    name,\r\n    price,\r\n    category_id,\r\n    AVG(price) OVER (PARTITION BY category_id) AS avg_category_price\r\nFROM Products;\r\n\r\n-- Window functions with ordering\r\nSELECT \r\n    product_id,\r\n    name,\r\n    price,\r\n    RANK() OVER (ORDER BY price DESC) AS price_rank,\r\n    DENSE_RANK() OVER (ORDER BY price DESC) AS dense_rank,\r\n    ROW_NUMBER() OVER (ORDER BY price DESC) AS row_num\r\nFROM Products;\r\n\r\n-- Window functions with frame clauses\r\nSELECT \r\n    order_id,\r\n    customer_id,\r\n    order_date,\r\n    total_amount,\r\n    SUM(total_amount) OVER (\r\n        PARTITION BY customer_id \r\n        ORDER BY order_date \r\n        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW\r\n    ) AS running_total\r\nFROM Orders;\r\n\r\n-- LEAD and LAG functions\r\nSELECT \r\n    product_id,\r\n    name,\r\n    price,\r\n    LAG(price, 1, 0) OVER (ORDER BY price) AS prev_price,\r\n    LEAD(price, 1, 0) OVER (ORDER BY price) AS next_price\r\nFROM Products;\r\n\r\n-- Common Table Expressions (CTEs)\r\n\r\n-- Simple CTE\r\nWITH ActiveCustomers AS (\r\n    SELECT customer_id, name, email\r\n    FROM Customers\r\n    WHERE status = \'Active\'\r\n)\r\nSELECT * FROM ActiveCustomers;\r\n\r\n-- CTE with multiple references\r\nWITH CategoryStats AS (\r\n    SELECT \r\n        category_id,\r\n        COUNT(*) AS product_count,\r\n        AVG(price) AS avg_price\r\n    FROM Products\r\n    GROUP BY category_id\r\n)\r\nSELECT \r\n    c.name AS category_name,\r\n    cs.product_count,\r\n    cs.avg_price,\r\n    CASE \r\n        WHEN cs.avg_price > 100 THEN \'High\'\r\n        WHEN cs.avg_price > 50 THEN \'Medium\'\r\n        ELSE \'Low\'\r\n    END AS price_level\r\nFROM CategoryStats cs\r\nJOIN Categories c ON cs.category_id = c.category_id;\r\n\r\n-- Recursive CTE (hierarchical data)\r\nWITH RECURSIVE EmployeeHierarchy AS (\r\n    -- Base case: top-level employees (no manager)\r\n    SELECT \r\n        employee_id,\r\n        name,\r\n        manager_id,\r\n        1 AS level\r\n    FROM Employees\r\n    WHERE manager_id IS NULL\r\n    \r\n    UNION ALL\r\n    \r\n    -- Recursive case: employees with managers\r\n    SELECT \r\n        e.employee_id,\r\n        e.name,\r\n        e.manager_id,\r\n        eh.level + 1\r\n    FROM Employees e\r\n    JOIN EmployeeHierarchy eh ON e.manager_id = eh.employee_id\r\n)\r\nSELECT * FROM EmployeeHierarchy ORDER BY level, name;\r\n\r\n-- Pivot Tables (SQL Server)\r\n\r\n-- Static pivot\r\nSELECT *\r\nFROM (\r\n    SELECT \r\n        c.name AS category_name,\r\n        p.name AS product_name,\r\n        p.price\r\n    FROM Products p\r\n    JOIN Categories c ON p.category_id = c.category_id\r\n) AS SourceTable\r\nPIVOT (\r\n    AVG(price)\r\n    FOR category_name IN ([Electronics], [Clothing], [Books])\r\n) AS PivotTable;\r\n\r\n-- Dynamic pivot (SQL Server)\r\nDECLARE @columns NVARCHAR(MAX), @sql NVARCHAR(MAX);\r\n\r\n-- Get the dynamic column list\r\nSET @columns = STUFF((\r\n    SELECT DISTINCT \',\' + QUOTENAME(name) \r\n    FROM Categories\r\n    FOR XML PATH(\'\'), TYPE\r\n).value(\'.\', \'NVARCHAR(MAX)\'), 1, 1, \'\');\r\n\r\n-- Create the dynamic SQL\r\nSET @sql = N\'\r\nSELECT *\r\nFROM (\r\n    SELECT \r\n        c.name AS category_name,\r\n        p.name AS product_name,\r\n        p.price\r\n    FROM Products p\r\n    JOIN Categories c ON p.category_id = c.category_id\r\n) AS SourceTable\r\nPIVOT (\r\n    AVG(price)\r\n    FOR category_name IN (\' + @columns + \')\r\n) AS PivotTable\';\r\n\r\n-- Execute the dynamic SQL\r\nEXEC sp_executesql @sql;\r\n\r\n-- JSON Functions (PostgreSQL/MySQL)\r\n\r\n-- Query JSON data (PostgreSQL)\r\nSELECT \r\n    product_id,\r\n    name,\r\n    attributes->>\'color\' AS color,\r\n    attributes->>\'weight\' AS weight,\r\n    attributes->\'dimensions\'->>\'width\' AS width\r\nFROM Products\r\nWHERE attributes ? \'color\';\r\n\r\n-- Query JSON data (MySQL)\r\nSELECT \r\n    product_id,\r\n    name,\r\n    JSON_EXTRACT(attributes, \'$.color\') AS color,\r\n    JSON_EXTRACT(attributes, \'$.weight\') AS weight,\r\n    JSON_EXTRACT(attributes, \'$.dimensions.width\') AS width\r\nFROM Products\r\nWHERE JSON_CONTAINS_PATH(attributes, \'one\', \'$.color\');\r\n\r\n-- Full-Text Search\r\n\r\n-- Create a full-text index (PostgreSQL)\r\nCREATE EXTENSION IF NOT EXISTS pg_trgm;\r\nCREATE INDEX idx_products_name_trgm ON Products USING gin (name gin_trgm_ops);\r\n\r\n-- Full-text search query (PostgreSQL)\r\nSELECT product_id, name\r\nFROM Products\r\nWHERE name % \'laptop\';  -- Similarity search\r\n\r\n-- Create a full-text index (MySQL)\r\nCREATE FULLTEXT INDEX idx_products_name ON Products(name);\r\n\r\n-- Full-text search query (MySQL)\r\nSELECT product_id, name\r\nFROM Products\r\nWHERE MATCH(name) AGAINST(\'laptop\' IN NATURAL LANGUAGE MODE);\r\n\r\n-- XML Functions (SQL Server)\r\n\r\n-- Query XML data\r\nSELECT \r\n    product_id,\r\n    name,\r\n    attributes.value(\'(/product/color)[1]\', \'varchar(50)\') AS color,\r\n    attributes.value(\'(/product/weight)[1]\', \'decimal(10,2)\') AS weight\r\nFROM Products\r\nWHERE attributes.exist(\'/product/color\') = 1;</code></pre>\r\n</div>\r\n\r\n<h4>Advanced SQL Features</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Feature</th>\r\n        <th>Description</th>\r\n        <th>Use Case</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Window Functions</td>\r\n        <td>Perform calculations across a set of table rows related to the current row</td>\r\n        <td>Running totals, rankings, moving averages</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Common Table Expressions</td>\r\n        <td>Temporary result sets that can be referenced within a SELECT, INSERT, UPDATE, or DELETE</td>\r\n        <td>Complex queries, recursive queries, readability</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Pivot Tables</td>\r\n        <td>Transform rows into columns for data analysis and reporting</td>\r\n        <td>Cross-tab reports, data summarization</td>\r\n    </tr>\r\n    <tr>\r\n        <td>JSON Functions</td>\r\n        <td>Query and manipulate JSON data stored in database columns</td>\r\n        <td>Semi-structured data, web applications</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Full-Text Search</td>\r\n        <td>Advanced text searching capabilities beyond simple LIKE</td>\r\n        <td>Document search, content management systems</td>\r\n    </tr>\r\n    <tr>\r\n        <td>XML Functions</td>\r\n        <td>Query and manipulate XML data stored in database columns</td>\r\n        <td>Document storage, integration with XML systems</td>\r\n    </tr>\r\n</table>\r\n\r\n<hr>\r\n<p>By following these lessons, you\'ll progress from SQL basics to advanced features like joins, subqueries, transactions, stored procedures, and advanced SQL techniques. Keep practicing each example to build real database applications step by step.</p>\r\n\r\n<!-- Prism.js core + SQL language component -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-sql.min.js\"></script>\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n    position: relative;\r\n    margin: 1em 0;\r\n    background: #1e1e1e;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n.code-container pre {\r\n    margin: 0;\r\n    padding: 1em;\r\n    overflow-x: auto;\r\n    font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n}\r\n.copy-btn {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background: #007acc;\r\n    border: none;\r\n    color: #fff;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n}\r\n.copy-btn:hover {\r\n    background: #005f99;\r\n}\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin: 1em 0;\r\n}\r\ntable th, table td {\r\n    padding: 8px;\r\n    text-align: left;\r\n    border: 1px solid #ddd;\r\n}\r\ntable th {\r\n    background-color: #f2f2f2;\r\n    font-weight: bold;\r\n}\r\n</style>\r\n<script>\r\nfunction copyCode(button) {\r\n    const code = button.nextElementSibling.innerText;\r\n    navigator.clipboard.writeText(code).then(() => {\r\n        button.innerText = \"Copied!\";\r\n        setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n    });\r\n}\r\n</script>', 'SQL Programming Lessons – Beginner to Advanced', '1757847464_SQL.png', 10, 1, 'published', '2025-09-14 09:58:19', '2025-09-14 10:57:44');
INSERT INTO `posts` (`id`, `title`, `content`, `excerpt`, `featured_image`, `category_id`, `author_id`, `status`, `created_at`, `updated_at`) VALUES
(11, 'React Programming Lessons', '# React Programming Lessons – Beginner to Advanced\r\n\r\n<p>Welcome to the React programming lesson series! We\'ll learn React step by step — starting from the basics and moving toward advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n## React Course Outline\r\n\r\n<ul>\r\n    <li>Introduction to React and JSX</li>\r\n    <li>Components and Props</li>\r\n    <li>State and Lifecycle</li>\r\n    <li>Handling Events</li>\r\n    <li>Conditional Rendering</li>\r\n    <li>Lists and Keys</li>\r\n    <li>Forms</li>\r\n    <li>Lifting State Up</li>\r\n    <li>Composition vs Inheritance</li>\r\n    <li>React Hooks (useState, useEffect, useContext)</li>\r\n    <li>Advanced Hooks (useReducer, useCallback, useMemo)</li>\r\n    <li>Context API</li>\r\n    <li>Error Boundaries</li>\r\n    <li>Fragments</li>\r\n    <li>Higher-Order Components</li>\r\n    <li>Render Props</li>\r\n    <li>React Router</li>\r\n    <li>State Management with Redux</li>\r\n    <li>Testing React Applications</li>\r\n    <li>Performance Optimization</li>\r\n    <li>Server-Side Rendering with Next.js</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (keeps your existing dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>1. Introduction to React and JSX</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// React is a JavaScript library for building user interfaces\r\n// JSX is a syntax extension for JavaScript that looks similar to HTML\r\n\r\n// Basic React component with JSX\r\nimport React from \'react\';\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Hello, React!&lt;/h1&gt;\r\n      &lt;p&gt;This is my first React component.&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// JSX expressions\r\nfunction Greeting({ name }) {\r\n  return &lt;h1&gt;Hello, {name}!&lt;/h1&gt;;\r\n}\r\n\r\n// Using JavaScript expressions in JSX\r\nfunction CurrentDate() {\r\n  const date = new Date().toLocaleDateString();\r\n  return &lt;p&gt;Today is {date}&lt;/p&gt;;\r\n}\r\n\r\n// JSX attributes\r\nfunction Avatar({ src, alt }) {\r\n  return &lt;img src={src} alt={alt} className=\"avatar\" /&gt;;\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>JSX Features</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Feature</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>HTML-like syntax</td>\r\n        <td>JSX allows you to write HTML-like code in JavaScript</td>\r\n        <td>&lt;div&gt;Hello&lt;/div&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Expressions</td>\r\n        <td>Embed JavaScript expressions using curly braces</td>\r\n        <td>&lt;h1&gt;{name}&lt;/h1&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Attributes</td>\r\n        <td>Use JSX attributes similar to HTML</td>\r\n        <td>&lt;img src={url} /&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Self-closing tags</td>\r\n        <td>Self-closing tags must end with /&gt;</td>\r\n        <td>&lt;br /&gt;, &lt;img src=\"...\" /&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Conditional rendering</td>\r\n        <td>Use JavaScript conditionals to render elements</td>\r\n        <td>{isLoggedIn && &lt;Profile /&gt;}</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>2. Components and Props</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Functional Components\r\nfunction Welcome(props) {\r\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\r\n}\r\n\r\n// Arrow function component\r\nconst Welcome = (props) => &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\r\n\r\n// Class component\r\nimport React, { Component } from \'react\';\r\n\r\nclass Welcome extends Component {\r\n  render() {\r\n    return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;\r\n  }\r\n}\r\n\r\n// Using components\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;Welcome name=\"Alice\" /&gt;\r\n      &lt;Welcome name=\"Bob\" /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Destructuring props\r\nfunction Greeting({ name, age }) {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h2&gt;Hello, {name}!&lt;/h2&gt;\r\n      &lt;p&gt;You are {age} years old.&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Default props\r\nWelcome.defaultProps = {\r\n  name: \'Guest\'\r\n};\r\n\r\n// Prop types for type checking\r\nimport PropTypes from \'prop-types\';\r\n\r\nWelcome.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  age: PropTypes.number\r\n};</code></pre>\r\n</div>\r\n\r\n<h4>Component Types Comparison</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Feature</th>\r\n        <th>Functional Components</th>\r\n        <th>Class Components</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Syntax</td>\r\n        <td>Simple function syntax</td>\r\n        <td>ES6 class extending React.Component</td>\r\n    </tr>\r\n    <tr>\r\n        <td>State Management</td>\r\n        <td>Uses useState hook</td>\r\n        <td>Uses this.state and this.setState</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Lifecycle Methods</td>\r\n        <td>Uses useEffect hook</td>\r\n        <td>Has dedicated lifecycle methods</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Performance</td>\r\n        <td>Generally more performant</td>\r\n        <td>Slightly more overhead</td>\r\n    </tr>\r\n    <tr>\r\n        <td>When to Use</td>\r\n        <td>Most cases, especially with hooks</td>\r\n        <td>When you need error boundaries or specific lifecycle methods</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>3. State and Lifecycle</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// State with functional components and useState hook\r\nimport React, { useState } from \'react\';\r\n\r\nfunction Counter() {\r\n  // Declare state variable\r\n  const [count, setCount] = useState(0);\r\n  \r\n  return (\r\n    &lt;div&gt;\r\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\r\n      &lt;button onClick={() => setCount(count + 1)}&gt;\r\n        Click me\r\n      &lt;/button&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// State with class components\r\nimport React, { Component } from \'react\';\r\n\r\nclass Counter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { count: 0 };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;\r\n        &lt;button onClick={() => this.setState({ count: this.state.count + 1 })}&gt;\r\n          Click me\r\n        &lt;/button&gt;\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}\r\n\r\n// Lifecycle methods in class components\r\nclass LifecycleExample extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data: null };\r\n    console.log(\'Constructor\');\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Called after the component is mounted\r\n    console.log(\'Component did mount\');\r\n    // Fetch data or set up subscriptions\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Called after the component updates\r\n    console.log(\'Component did update\');\r\n    // Can perform side effects when props or state change\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // Called before the component is unmounted\r\n    console.log(\'Component will unmount\');\r\n    // Clean up subscriptions, timers, etc.\r\n  }\r\n\r\n  render() {\r\n    console.log(\'Render\');\r\n    return &lt;div&gt;Lifecycle Example&lt;/div&gt;;\r\n  }\r\n}\r\n\r\n// useEffect hook for lifecycle in functional components\r\nimport React, { useState, useEffect } from \'react\';\r\n\r\nfunction DataFetcher() {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Similar to componentDidMount and componentDidUpdate\r\n  useEffect(() => {\r\n    fetch(\'https://api.example.com/data\')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setData(data);\r\n        setLoading(false);\r\n      });\r\n\r\n    // Cleanup function (similar to componentWillUnmount)\r\n    return () => {\r\n      console.log(\'Cleanup\');\r\n    };\r\n  }, []); // Empty dependency array means this effect runs once on mount\r\n\r\n  if (loading) return &lt;div&gt;Loading...&lt;/div&gt;;\r\n  return &lt;div&gt;{JSON.stringify(data)}&lt;/div&gt;;\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Lifecycle Methods Comparison</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Phase</th>\r\n        <th>Class Component Method</th>\r\n        <th>Functional Component Hook</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Mounting</td>\r\n        <td>constructor()</td>\r\n        <td>useState()</td>\r\n        <td>Initial state setup</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Mounting</td>\r\n        <td>componentDidMount()</td>\r\n        <td>useEffect(..., [])</td>\r\n        <td>After component mounts, good for data fetching</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Updating</td>\r\n        <td>componentDidUpdate()</td>\r\n        <td>useEffect(..., [deps])</td>\r\n        <td>After component updates</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Unmounting</td>\r\n        <td>componentWillUnmount()</td>\r\n        <td>useEffect(() => { return cleanup; }, [])</td>\r\n        <td>Before component unmounts, for cleanup</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>4. Handling Events</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Event handling in functional components\r\nfunction Button() {\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    console.log(\'Button clicked\');\r\n  };\r\n\r\n  return &lt;button onClick={handleClick}&gt;Click me&lt;/button&gt;;\r\n}\r\n\r\n// Event handling in class components\r\nclass Button extends React.Component {\r\n  handleClick = (e) => {\r\n    e.preventDefault();\r\n    console.log(\'Button clicked\');\r\n  };\r\n\r\n  render() {\r\n    return &lt;button onClick={this.handleClick}&gt;Click me&lt;/button&gt;;\r\n  }\r\n}\r\n\r\n// Passing arguments to event handlers\r\nfunction ListItem({ item, onDelete }) {\r\n  const handleDelete = (id) => {\r\n    onDelete(id);\r\n  };\r\n\r\n  return (\r\n    &lt;li&gt;\r\n      {item.text}\r\n      &lt;button onClick={() => handleDelete(item.id)}&gt;Delete&lt;/button&gt;\r\n    &lt;/li&gt;\r\n  );\r\n}\r\n\r\n// Synthetic events\r\nfunction Form() {\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData(e.target);\r\n    console.log(\'Form submitted:\', Object.fromEntries(formData));\r\n  };\r\n\r\n  return (\r\n    &lt;form onSubmit={handleSubmit}&gt;\r\n      &lt;input type=\"text\" name=\"username\" placeholder=\"Username\" /&gt;\r\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\r\n    &lt;/form&gt;\r\n  );\r\n}\r\n\r\n// Common event handlers\r\nfunction EventExamples() {\r\n  const [inputValue, setInputValue] = React.useState(\'\');\r\n\r\n  const handleChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \'Enter\') {\r\n      console.log(\'Enter key pressed\');\r\n    }\r\n  };\r\n\r\n  const handleMouseOver = () => {\r\n    console.log(\'Mouse over element\');\r\n  };\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;input \r\n        type=\"text\" \r\n        value={inputValue}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n        placeholder=\"Type something\"\r\n      /&gt;\r\n      &lt;div onMouseOver={handleMouseOver}&gt;\r\n        Hover over me\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Common React Events</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Event Category</th>\r\n        <th>Event Handlers</th>\r\n        <th>Description</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Clipboard Events</td>\r\n        <td>onCopy, onCut, onPaste</td>\r\n        <td>Handling clipboard operations</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Keyboard Events</td>\r\n        <td>onKeyDown, onKeyPress, onKeyUp</td>\r\n        <td>Handling keyboard input</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Focus Events</td>\r\n        <td>onFocus, onBlur</td>\r\n        <td>Handling element focus</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Form Events</td>\r\n        <td>onChange, onInput, onSubmit</td>\r\n        <td>Handling form interactions</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Mouse Events</td>\r\n        <td>onClick, onDoubleClick, onMouseDown, onMouseUp, onMouseOver, onMouseOut</td>\r\n        <td>Handling mouse interactions</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Touch Events</td>\r\n        <td>onTouchStart, onTouchMove, onTouchEnd</td>\r\n        <td>Handling touch interactions</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>5. Conditional Rendering</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// If-else conditional rendering\r\nfunction Greeting({ isLoggedIn }) {\r\n  if (isLoggedIn) {\r\n    return &lt;h1&gt;Welcome back!&lt;/h1&gt;;\r\n  }\r\n  return &lt;h1&gt;Please sign in.&lt;/h1&gt;;\r\n}\r\n\r\n// Element variables\r\nfunction LoginControl() {\r\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\r\n  \r\n  let button;\r\n  if (isLoggedIn) {\r\n    button = &lt;button onClick={() => setIsLoggedIn(false)}&gt;Logout&lt;/button&gt;;\r\n  } else {\r\n    button = &lt;button onClick={() => setIsLoggedIn(true)}&gt;Login&lt;/button&gt;;\r\n  }\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;Greeting isLoggedIn={isLoggedIn} /&gt;\r\n      {button}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Ternary operator\r\nfunction UserStatus({ user }) {\r\n  return (\r\n    &lt;div&gt;\r\n      {user ? &lt;p&gt;Welcome, {user.name}!&lt;/p&gt; : &lt;p&gt;Please log in.&lt;/p&gt;}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Logical && operator\r\nfunction Notification({ message }) {\r\n  return (\r\n    &lt;div&gt;\r\n      {message && &lt;div className=\"notification\"&gt;{message}&lt;/div&gt;}\r\n      &lt;p&gt;Content goes here&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Preventing component from rendering\r\nfunction WarningBanner({ warn }) {\r\n  if (!warn) {\r\n    return null;\r\n  }\r\n\r\n  return &lt;div className=\"warning\"&gt;Warning!&lt;/div&gt;;\r\n}\r\n\r\n// Conditional rendering with lists\r\nfunction TodoList({ todos }) {\r\n  return (\r\n    &lt;ul&gt;\r\n      {todos.length > 0 ? (\r\n        todos.map(todo => &lt;li key={todo.id}&gt;{todo.text}&lt;/li&gt;)\r\n      ) : (\r\n        &lt;li&gt;No todos found&lt;/li&gt;\r\n      )}\r\n    &lt;/ul&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Conditional Rendering Techniques</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Technique</th>\r\n        <th>Syntax</th>\r\n        <th>Best Use Case</th>\r\n    </tr>\r\n    <tr>\r\n        <td>If-Else</td>\r\n        <td>if (condition) { return A; } else { return B; }</td>\r\n        <td>Complex conditions with multiple branches</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Element Variables</td>\r\n        <td>let element; if (condition) { element = A; } else { element = B; }</td>\r\n        <td>When you need to assign elements to variables</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Ternary Operator</td>\r\n        <td>condition ? A : B</td>\r\n        <td>Simple either/or conditions</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Logical &&</td>\r\n        <td>condition && A</td>\r\n        <td>Rendering something only when condition is true</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Return Null</td>\r\n        <td>if (!condition) return null;</td>\r\n        <td>Preventing component from rendering</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>6. Lists and Keys</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Basic list rendering\r\nfunction NumberList({ numbers }) {\r\n  return (\r\n    &lt;ul&gt;\r\n      {numbers.map((number) => (\r\n        &lt;li key={number.toString()}&gt;{number}&lt;/li&gt;\r\n      ))}\r\n    &lt;/ul&gt;\r\n  );\r\n}\r\n\r\n// Using lists with components\r\nfunction TodoItem({ todo }) {\r\n  return &lt;li&gt;{todo.text}&lt;/li&gt;;\r\n}\r\n\r\nfunction TodoList({ todos }) {\r\n  return (\r\n    &lt;ul&gt;\r\n      {todos.map(todo => (\r\n        &lt;TodoItem key={todo.id} todo={todo} /&gt;\r\n      ))}\r\n    &lt;/ul&gt;\r\n  );\r\n}\r\n\r\n// Keys help React identify which items have changed\r\nfunction Blog({ posts }) {\r\n  const sidebar = (\r\n    &lt;ul&gt;\r\n      {posts.map(post => (\r\n        &lt;li key={post.id}&gt;\r\n          {post.title}\r\n        &lt;/li&gt;\r\n      ))}\r\n    &lt;/ul&gt;\r\n  );\r\n\r\n  const content = posts.map(post => (\r\n    &lt;div key={post.id}&gt;\r\n      &lt;h3&gt;{post.title}&lt;/h3&gt;\r\n      &lt;p&gt;{post.content}&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  ));\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      {sidebar}\r\n      &lt;hr /&gt;\r\n      {content}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Using index as key (only when items have no stable IDs)\r\nfunction ListWithIndex({ items }) {\r\n  return (\r\n    &lt;ul&gt;\r\n      {items.map((item, index) => (\r\n        &lt;li key={index}&gt;{item.text}&lt;/li&gt;\r\n      ))}\r\n    &lt;/ul&gt;\r\n  );\r\n}\r\n\r\n// Filtering lists\r\nfunction FilterableList({ items, filter }) {\r\n  const filteredItems = items.filter(item => \r\n    item.text.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    &lt;ul&gt;\r\n      {filteredItems.map(item => (\r\n        &lt;li key={item.id}&gt;{item.text}&lt;/li&gt;\r\n      ))}\r\n    &lt;/ul&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>List Rendering Best Practices</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Practice</th>\r\n        <th>Recommended</th>\r\n        <th>Not Recommended</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Key Selection</td>\r\n        <td>Use stable, unique IDs from data</td>\r\n        <td>Use array index (except for static lists)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Performance</td>\r\n        <td>Use React.memo for list items that don\'t change often</td>\r\n        <td>Re-render entire list on small changes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Large Lists</td>\r\n        <td>Use virtualization (react-window, react-virtualized)</td>\r\n        <td>Render thousands of items at once</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Component Structure</td>\r\n        <td>Extract list items into separate components</td>\r\n        <td>Define list items inline in the parent component</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>7. Forms</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Controlled components\r\nfunction NameForm() {\r\n  const [value, setValue] = React.useState(\'\');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    alert(\'A name was submitted: \' + value);\r\n  };\r\n\r\n  return (\r\n    &lt;form onSubmit={handleSubmit}&gt;\r\n      &lt;label&gt;\r\n        Name:\r\n        &lt;input type=\"text\" value={value} onChange={handleChange} /&gt;\r\n      &lt;/label&gt;\r\n      &lt;input type=\"submit\" value=\"Submit\" /&gt;\r\n    &lt;/form&gt;\r\n  );\r\n}\r\n\r\n// Textarea tag\r\nfunction EssayForm() {\r\n  const [value, setValue] = React.useState(\'Please write an essay about your favorite DOM element.\');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    &lt;form&gt;\r\n      &lt;label&gt;\r\n        Essay:\r\n        &lt;textarea value={value} onChange={handleChange} /&gt;\r\n      &lt;/label&gt;\r\n    &lt;/form&gt;\r\n  );\r\n}\r\n\r\n// Select tag\r\nfunction FlavorForm() {\r\n  const [value, setValue] = React.useState(\'coconut\');\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    &lt;form&gt;\r\n      &lt;label&gt;\r\n        Pick your favorite flavor:\r\n        &lt;select value={value} onChange={handleChange}&gt;\r\n          &lt;option value=\"grapefruit\"&gt;Grapefruit&lt;/option&gt;\r\n          &lt;option value=\"lime\"&gt;Lime&lt;/option&gt;\r\n          &lt;option value=\"coconut\"&gt;Coconut&lt;/option&gt;\r\n          &lt;option value=\"mango\"&gt;Mango&lt;/option&gt;\r\n        &lt;/select&gt;\r\n      &lt;/label&gt;\r\n    &lt;/form&gt;\r\n  );\r\n}\r\n\r\n// Multiple select\r\nfunction MultiSelectForm() {\r\n  const [flavors, setFlavors] = React.useState([\'coconut\', \'mango\']);\r\n\r\n  const handleChange = (event) => {\r\n    const options = event.target.options;\r\n    const selectedFlavors = [];\r\n    for (let i = 0; i < options.length; i++) {\r\n      if (options[i].selected) {\r\n        selectedFlavors.push(options[i].value);\r\n      }\r\n    }\r\n    setFlavors(selectedFlavors);\r\n  };\r\n\r\n  return (\r\n    &lt;form&gt;\r\n      &lt;label&gt;\r\n        Pick your favorite flavors:\r\n        &lt;select multiple={true} value={flavors} onChange={handleChange}&gt;\r\n          &lt;option value=\"grapefruit\"&gt;Grapefruit&lt;/option&gt;\r\n          &lt;option value=\"lime\"&gt;Lime&lt;/option&gt;\r\n          &lt;option value=\"coconut\"&gt;Coconut&lt;/option&gt;\r\n          &lt;option value=\"mango\"&gt;Mango&lt;/option&gt;\r\n        &lt;/select&gt;\r\n      &lt;/label&gt;\r\n    &lt;/form&gt;\r\n  );\r\n}\r\n\r\n// File input (uncontrolled)\r\nfunction FileInput() {\r\n  const fileInputRef = React.useRef(null);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    alert(`Selected file: ${fileInputRef.current.files[0].name}`);\r\n  };\r\n\r\n  return (\r\n    &lt;form onSubmit={handleSubmit}&gt;\r\n      &lt;label&gt;\r\n        Upload file:\r\n        &lt;input type=\"file\" ref={fileInputRef} /&gt;\r\n      &lt;/label&gt;\r\n      &lt;br /&gt;\r\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\r\n    &lt;/form&gt;\r\n  );\r\n}\r\n\r\n// Handling multiple inputs\r\nfunction Reservation() {\r\n  const [formData, setFormData] = React.useState({\r\n    isGoing: true,\r\n    numberOfGuests: 2\r\n  });\r\n\r\n  const handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === \'checkbox\' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    setFormData(prevState => ({\r\n      ...prevState,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  return (\r\n    &lt;form&gt;\r\n      &lt;label&gt;\r\n        Is going:\r\n        &lt;input\r\n          name=\"isGoing\"\r\n          type=\"checkbox\"\r\n          checked={formData.isGoing}\r\n          onChange={handleInputChange} /&gt;\r\n      &lt;/label&gt;\r\n      &lt;br /&gt;\r\n      &lt;label&gt;\r\n        Number of guests:\r\n        &lt;input\r\n          name=\"numberOfGuests\"\r\n          type=\"number\"\r\n          value={formData.numberOfGuests}\r\n          onChange={handleInputChange} /&gt;\r\n      &lt;/label&gt;\r\n    &lt;/form&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Form Input Types</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Input Type</th>\r\n        <th>Controlled Component Example</th>\r\n        <th>Uncontrolled Component Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Text</td>\r\n        <td>&lt;input type=\"text\" value={value} onChange={handleChange} /&gt;</td>\r\n        <td>&lt;input type=\"text\" defaultValue=\"Hello\" ref={inputRef} /&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Textarea</td>\r\n        <td>&lt;textarea value={value} onChange={handleChange} /&gt;</td>\r\n        <td>&lt;textarea defaultValue=\"Hello\" ref={textareaRef} /&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Select</td>\r\n        <td>&lt;select value={value} onChange={handleChange}&gt;...&lt;/select&gt;</td>\r\n        <td>&lt;select defaultValue=\"option1\" ref={selectRef}&gt;...&lt;/select&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Checkbox</td>\r\n        <td>&lt;input type=\"checkbox\" checked={checked} onChange={handleChange} /&gt;</td>\r\n        <td>&lt;input type=\"checkbox\" defaultChecked={true} ref={checkboxRef} /&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Radio</td>\r\n        <td>&lt;input type=\"radio\" checked={selected === \'option1\'} onChange={handleChange} /&gt;</td>\r\n        <td>&lt;input type=\"radio\" defaultChecked={true} ref={radioRef} /&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>File</td>\r\n        <td>Not recommended (use uncontrolled)</td>\r\n        <td>&lt;input type=\"file\" ref={fileRef} /&gt;</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>8. Lifting State Up</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Example of lifting state up to share between components\r\n\r\n// Temperature input component\r\nfunction TemperatureInput({ temperature, scale, onTemperatureChange }) {\r\n  return (\r\n    &lt;fieldset&gt;\r\n      &lt;legend&gt;Enter temperature in {scaleNames[scale]}:&lt;/legend&gt;\r\n      &lt;input\r\n        value={temperature}\r\n        onChange={(e) => onTemperatureChange(e.target.value)}\r\n      /&gt;\r\n    &lt;/fieldset&gt;\r\n  );\r\n}\r\n\r\n// Calculator component that holds the shared state\r\nfunction Calculator() {\r\n  const [temperature, setTemperature] = React.useState(\'\');\r\n  const [scale, setScale] = React.useState(\'c\');\r\n\r\n  const handleCelsiusChange = (temperature) => {\r\n    setTemperature(temperature);\r\n    setScale(\'c\');\r\n  };\r\n\r\n  const handleFahrenheitChange = (temperature) => {\r\n    setTemperature(temperature);\r\n    setScale(\'f\');\r\n  };\r\n\r\n  // Convert temperature based on the current scale\r\n  const celsius = scale === \'f\' ? tryConvert(temperature, toCelsius) : temperature;\r\n  const fahrenheit = scale === \'c\' ? tryConvert(temperature, toFahrenheit) : temperature;\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;TemperatureInput\r\n        scale=\"c\"\r\n        temperature={celsius}\r\n        onTemperatureChange={handleCelsiusChange}\r\n      /&gt;\r\n      &lt;TemperatureInput\r\n        scale=\"f\"\r\n        temperature={fahrenheit}\r\n        onTemperatureChange={handleFahrenheitChange}\r\n      /&gt;\r\n      &lt;BoilingVerdict celsius={parseFloat(celsius)} /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Helper functions\r\nfunction toCelsius(fahrenheit) {\r\n  return (fahrenheit - 32) * 5 / 9;\r\n}\r\n\r\nfunction toFahrenheit(celsius) {\r\n  return (celsius * 9 / 5) + 32;\r\n}\r\n\r\nfunction tryConvert(temperature, convert) {\r\n  const input = parseFloat(temperature);\r\n  if (Number.isNaN(input)) {\r\n    return \'\';\r\n  }\r\n  const output = convert(input);\r\n  const rounded = Math.round(output * 1000) / 1000;\r\n  return rounded.toString();\r\n}\r\n\r\n// Another example: Todo list with state lifting\r\nfunction TodoApp() {\r\n  const [todos, setTodos] = React.useState([\r\n    { id: 1, text: \'Learn React\', completed: false },\r\n    { id: 2, text: \'Build a React app\', completed: false }\r\n  ]);\r\n\r\n  const addTodo = (text) => {\r\n    const newTodo = {\r\n      id: Date.now(),\r\n      text,\r\n      completed: false\r\n    };\r\n    setTodos([...todos, newTodo]);\r\n  };\r\n\r\n  const toggleTodo = (id) => {\r\n    setTodos(\r\n      todos.map(todo =>\r\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\r\n      )\r\n    );\r\n  };\r\n\r\n  const deleteTodo = (id) => {\r\n    setTodos(todos.filter(todo => todo.id !== id));\r\n  };\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Todo List&lt;/h1&gt;\r\n      &lt;TodoForm addTodo={addTodo} /&gt;\r\n      &lt;TodoList todos={todos} toggleTodo={toggleTodo} deleteTodo={deleteTodo} /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Todo form component\r\nfunction TodoForm({ addTodo }) {\r\n  const [value, setValue] = React.useState(\'\');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!value.trim()) return;\r\n    addTodo(value);\r\n    setValue(\'\');\r\n  };\r\n\r\n  return (\r\n    &lt;form onSubmit={handleSubmit}&gt;\r\n      &lt;input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => setValue(e.target.value)}\r\n        placeholder=\"Add a new todo\"\r\n      /&gt;\r\n      &lt;button type=\"submit\"&gt;Add&lt;/button&gt;\r\n    &lt;/form&gt;\r\n  );\r\n}\r\n\r\n// Todo list component\r\nfunction TodoList({ todos, toggleTodo, deleteTodo }) {\r\n  return (\r\n    &lt;ul&gt;\r\n      {todos.map(todo => (\r\n        &lt;TodoItem\r\n          key={todo.id}\r\n          todo={todo}\r\n          toggleTodo={toggleTodo}\r\n          deleteTodo={deleteTodo}\r\n        /&gt;\r\n      ))}\r\n    &lt;/ul&gt;\r\n  );\r\n}\r\n\r\n// Todo item component\r\nfunction TodoItem({ todo, toggleTodo, deleteTodo }) {\r\n  return (\r\n    &lt;li style={{ textDecoration: todo.completed ? \'line-through\' : \'none\' }}&gt;\r\n      {todo.text}\r\n      &lt;button onClick={() => toggleTodo(todo.id)}&gt;\r\n        {todo.completed ? \'Undo\' : \'Complete\'}\r\n      &lt;/button&gt;\r\n      &lt;button onClick={() => deleteTodo(todo.id)}&gt;Delete&lt;/button&gt;\r\n    &lt;/li&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>State Lifting Best Practices</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Practice</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Single Source of Truth</td>\r\n        <td>Keep state in the nearest common ancestor</td>\r\n        <td>Parent component holds state for children</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Downward Data Flow</td>\r\n        <td>Pass data down through props</td>\r\n        <td>&lt;Child data={data} /&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Upward Actions</td>\r\n        <td>Pass functions to modify state</td>\r\n        <td>&lt;Child onUpdate={handleUpdate} /&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Minimize State</td>\r\n        <td>Only store what\'s necessary in state</td>\r\n        <td>Calculate derived values instead of storing them</td>\r\n    </tr>\r\n    <tr>\r\n        <td>State Colocation</td>\r\n        <td>Place state as close as possible to where it\'s needed</td>\r\n        <td>Local component state vs. global state</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>9. Composition vs Inheritance</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Composition - Containment (special children prop)\r\nfunction FancyBorder(props) {\r\n  return (\r\n    &lt;div className={\'FancyBorder FancyBorder-\' + props.color}&gt;\r\n      {props.children}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction WelcomeDialog() {\r\n  return (\r\n    &lt;FancyBorder color=\"blue\"&gt;\r\n      &lt;h1 className=\"Dialog-title\"&gt;\r\n        Welcome\r\n      &lt;/h1&gt;\r\n      &lt;p className=\"Dialog-message\"&gt;\r\n        Thank you for visiting our spacecraft!\r\n      &lt;/p&gt;\r\n    &lt;/FancyBorder&gt;\r\n  );\r\n}\r\n\r\n// Composition - Specialization\r\nfunction Dialog(props) {\r\n  return (\r\n    &lt;FancyBorder color=\"blue\"&gt;\r\n      &lt;h1 className=\"Dialog-title\"&gt;\r\n        {props.title}\r\n      &lt;/h1&gt;\r\n      &lt;p className=\"Dialog-message\"&gt;\r\n        {props.message}\r\n      &lt;/p&gt;\r\n      {props.children}\r\n    &lt;/FancyBorder&gt;\r\n  );\r\n}\r\n\r\nfunction SignUpDialog() {\r\n  const [nickname, setNickname] = React.useState(\'\');\r\n\r\n  const handleChange = (e) => {\r\n    setNickname(e.target.value);\r\n  };\r\n\r\n  const handleSignUp = () => {\r\n    alert(`Welcome aboard, ${nickname}!`);\r\n  };\r\n\r\n  return (\r\n    &lt;Dialog\r\n      title=\"Mars Exploration Program\"\r\n      message=\"How should we refer to you?\"\r\n    &gt;\r\n      &lt;input value={nickname} onChange={handleChange} /&gt;\r\n      &lt;button onClick={handleSignUp}&gt;Sign Me Up!&lt;/button&gt;\r\n    &lt;/Dialog&gt;\r\n  );\r\n}\r\n\r\n// Composition - Multiple \"slots\" with named props\r\nfunction SplitPane(props) {\r\n  return (\r\n    &lt;div className=\"SplitPane\"&gt;\r\n      &lt;div className=\"SplitPane-left\"&gt;\r\n        {props.left}\r\n      &lt;/div&gt;\r\n      &lt;div className=\"SplitPane-right\"&gt;\r\n        {props.right}\r\n      &lt;/div&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;SplitPane\r\n      left={\r\n        &lt;Contacts /&gt;\r\n      }\r\n      right={\r\n        &lt;Chat /&gt;\r\n      }\r\n    /&gt;\r\n  );\r\n}\r\n\r\n// Inheritance (less common in React)\r\n// Instead of inheritance, use composition\r\nfunction ParentComponent() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Parent Component&lt;/h1&gt;\r\n      &lt;ChildComponent /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction ChildComponent() {\r\n  return &lt;p&gt;Child Component&lt;/p&gt;;\r\n}\r\n\r\n// Instead of:\r\n// class ChildComponent extends ParentComponent {\r\n//   render() {\r\n//     return (\r\n//       &lt;div&gt;\r\n//         {super.render()}\r\n//         &lt;p&gt;Additional child content&lt;/p&gt;\r\n//       &lt;/div&gt;\r\n//     );\r\n//   }\r\n// }\r\n\r\n// Use composition:\r\nfunction EnhancedParent(props) {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Parent Component&lt;/h1&gt;\r\n      {props.children}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;EnhancedParent&gt;\r\n      &lt;p&gt;Additional child content&lt;/p&gt;\r\n    &lt;/EnhancedParent&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Composition vs Inheritance</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Aspect</th>\r\n        <th>Composition</th>\r\n        <th>Inheritance</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Philosophy</td>\r\n        <td>\"Has-a\" relationship</td>\r\n        <td>\"Is-a\" relationship</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Flexibility</td>\r\n        <td>More flexible, components can be combined in many ways</td>\r\n        <td>Less flexible, rigid hierarchy</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Reusability</td>\r\n        <td>Higher reusability, components can be reused independently</td>\r\n        <td>Limited reusability, tied to parent class</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Complexity</td>\r\n        <td>Can become complex with many props</td>\r\n        <td>Can lead to deep inheritance hierarchies</td>\r\n    </tr>\r\n    <tr>\r\n        <td>React Recommendation</td>\r\n        <td>Preferred approach</td>\r\n        <td>Use sparingly, only when necessary</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>10. React Hooks (useState, useEffect, useContext)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// useState Hook\r\nimport React, { useState } from \'react\';\r\n\r\nfunction Counter() {\r\n  // Declare a new state variable\r\n  const [count, setCount] = useState(0);\r\n  \r\n  return (\r\n    &lt;div&gt;\r\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\r\n      &lt;button onClick={() => setCount(count + 1)}&gt;\r\n        Click me\r\n      &lt;/button&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Multiple state variables\r\nfunction ManyStates() {\r\n  const [age, setAge] = useState(42);\r\n  const [fruit, setFruit] = useState(\'banana\');\r\n  const [todos, setTodos] = useState([{ text: \'Learn Hooks\' }]);\r\n  \r\n  return (\r\n    &lt;div&gt;\r\n      ...\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// useEffect Hook\r\nimport React, { useState, useEffect } from \'react\';\r\n\r\nfunction Example() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    document.title = `You clicked ${count} times`;\r\n  });\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\r\n      &lt;button onClick={() => setCount(count + 1)}&gt;\r\n        Click me\r\n      &lt;/button&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Effect with cleanup\r\nfunction FriendStatus(props) {\r\n  const [isOnline, setIsOnline] = useState(null);\r\n\r\n  useEffect(() => {\r\n    function handleStatusChange(status) {\r\n      setIsOnline(status.isOnline);\r\n    }\r\n\r\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\r\n    \r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\r\n    };\r\n  });\r\n\r\n  if (isOnline === null) {\r\n    return \'Loading...\';\r\n  }\r\n  return isOnline ? \'Online\' : \'Offline\';\r\n}\r\n\r\n// Conditional effects\r\nfunction Example({ user }) {\r\n  const [count, setCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    document.title = `You clicked ${count} times`;\r\n  }, [count]); // Only re-run the effect if count changes\r\n\r\n  useEffect(() => {\r\n    // This effect runs only when user changes\r\n    console.log(`User changed to ${user.name}`);\r\n  }, [user]);\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\r\n      &lt;button onClick={() => setCount(count + 1)}&gt;\r\n        Click me\r\n      &lt;/button&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// useContext Hook\r\nimport React, { createContext, useContext } from \'react\';\r\n\r\n// Create a context\r\nconst ThemeContext = createContext(\'light\');\r\n\r\nfunction App() {\r\n  // Use a Provider to pass the current theme to the tree below\r\n  return (\r\n    &lt;ThemeContext.Provider value=\"dark\"&gt;\r\n      &lt;Toolbar /&gt;\r\n    &lt;/ThemeContext.Provider&gt;\r\n  );\r\n}\r\n\r\nfunction Toolbar() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;ThemedButton /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction ThemedButton() {\r\n  // Use the context to read the current theme\r\n  const theme = useContext(ThemeContext);\r\n  \r\n  return (\r\n    &lt;button style={{ background: theme === \'dark\' ? \'#333\' : \'#FFF\' }}&gt;\r\n      I am styled by theme context!\r\n    &lt;/button&gt;\r\n  );\r\n}\r\n\r\n// Combining multiple hooks\r\nfunction UserProfile({ userId }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const theme = useContext(ThemeContext);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchUser(userId)\r\n      .then(data => {\r\n        setUser(data);\r\n        setError(null);\r\n      })\r\n      .catch(err => {\r\n        setError(err.message);\r\n        setUser(null);\r\n      })\r\n      .finally(() => {\r\n        setLoading(false);\r\n      });\r\n  }, [userId]);\r\n\r\n  if (loading) return &lt;div&gt;Loading...&lt;/div&gt;;\r\n  if (error) return &lt;div&gt;Error: {error}&lt;/div&gt;;\r\n  \r\n  return (\r\n    &lt;div style={{ color: theme === \'dark\' ? \'white\' : \'black\' }}&gt;\r\n      &lt;h2&gt;{user.name}&lt;/h2&gt;\r\n      &lt;p&gt;{user.email}&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Basic React Hooks</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Hook</th>\r\n        <th>Purpose</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>useState</td>\r\n        <td>Add state to functional components</td>\r\n        <td>const [count, setCount] = useState(0);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useEffect</td>\r\n        <td>Perform side effects in functional components</td>\r\n        <td>useEffect(() => { document.title = title; }, [title]);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useContext</td>\r\n        <td>Access context values without nesting</td>\r\n        <td>const theme = useContext(ThemeContext);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useReducer</td>\r\n        <td>Manage complex state logic</td>\r\n        <td>const [state, dispatch] = useReducer(reducer, initialState);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useCallback</td>\r\n        <td>Memoize functions to prevent unnecessary re-renders</td>\r\n        <td>const memoizedCallback = useCallback(() => { doSomething(a, b); }, [a, b]);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useMemo</td>\r\n        <td>Memoize expensive calculations</td>\r\n        <td>const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useRef</td>\r\n        <td>Access DOM elements or store mutable values</td>\r\n        <td>const inputRef = useRef(null);</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>11. Advanced Hooks (useReducer, useCallback, useMemo)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// useReducer Hook\r\nimport React, { useReducer } from \'react\';\r\n\r\nconst initialState = { count: 0 };\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \'increment\':\r\n      return { count: state.count + 1 };\r\n    case \'decrement\':\r\n      return { count: state.count - 1 };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction Counter() {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    &lt;&gt;\r\n      Count: {state.count}\r\n      &lt;button onClick={() => dispatch({ type: \'decrement\' })}&gt;-&lt;/button&gt;\r\n      &lt;button onClick={() => dispatch({ type: \'increment\' })}&gt;+&lt;/button&gt;\r\n    &lt;/&gt;\r\n  );\r\n}\r\n\r\n// Complex state with useReducer\r\nfunction init(initialCount) {\r\n  return { count: initialCount };\r\n}\r\n\r\nfunction reducer(state, action) {\r\n  switch (action.type) {\r\n    case \'increment\':\r\n      return { count: state.count + 1 };\r\n    case \'decrement\':\r\n      return { count: state.count - 1 };\r\n    case \'reset\':\r\n      return init(action.payload);\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction Counter({ initialCount }) {\r\n  const [state, dispatch] = useReducer(reducer, initialCount, init);\r\n\r\n  return (\r\n    &lt;&gt;\r\n      Count: {state.count}\r\n      &lt;button\r\n        onClick={() => dispatch({ type: \'reset\', payload: initialCount })}\r\n      &gt;\r\n        Reset\r\n      &lt;/button&gt;\r\n      &lt;button onClick={() => dispatch({ type: \'decrement\' })}&gt;-&lt;/button&gt;\r\n      &lt;button onClick={() => dispatch({ type: \'increment\' })}&gt;+&lt;/button&gt;\r\n    &lt;/&gt;\r\n  );\r\n}\r\n\r\n// useCallback Hook\r\nimport React, { useState, useCallback } from \'react\';\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n  \r\n  // Without useCallback, this function would be recreated on every render\r\n  const increment = useCallback(() => {\r\n    setCount(c => c + 1);\r\n  }, []); // Empty dependency array means this function never changes\r\n\r\n  // With dependencies\r\n  const incrementBy = useCallback((amount) => {\r\n    setCount(c => c + amount);\r\n  }, []); // No dependencies, so it never changes\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;p&gt;Count: {count}&lt;/p&gt;\r\n      &lt;button onClick={increment}&gt;Increment&lt;/button&gt;\r\n      &lt;button onClick={() => incrementBy(5)}&gt;Increment by 5&lt;/button&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Example with child component\r\nfunction ParentComponent() {\r\n  const [count, setCount] = useState(0);\r\n  \r\n  // Memoized callback to prevent unnecessary child re-renders\r\n  const handleClick = useCallback(() => {\r\n    setCount(c => c + 1);\r\n  }, []);\r\n\r\n  return &lt;ChildComponent onClick={handleClick} count={count} /&gt;;\r\n}\r\n\r\nfunction ChildComponent({ onClick, count }) {\r\n  // This component only re-renders when count changes, not when onClick changes\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;p&gt;Count: {count}&lt;/p&gt;\r\n      &lt;button onClick={onClick}&gt;Increment&lt;/button&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// useMemo Hook\r\nimport React, { useState, useMemo } from \'react\';\r\n\r\nfunction ExpensiveComponent({ a, b }) {\r\n  // Without useMemo, this would be recalculated on every render\r\n  const expensiveValue = useMemo(() => {\r\n    // Simulate expensive calculation\r\n    console.log(\'Expensive calculation\');\r\n    return a * b;\r\n  }, [a, b]); // Only recalculate when a or b change\r\n\r\n  return &lt;div&gt;Result: {expensiveValue}&lt;/div&gt;;\r\n}\r\n\r\nfunction App() {\r\n  const [a, setA] = useState(2);\r\n  const [b, setB] = useState(3);\r\n  const [unrelated, setUnrelated] = useState(0);\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;ExpensiveComponent a={a} b={b} /&gt;\r\n      &lt;button onClick={() => setA(a + 1)}&gt;Increment A&lt;/button&gt;\r\n      &lt;button onClick={() => setB(b + 1)}&gt;Increment B&lt;/button&gt;\r\n      &lt;button onClick={() => setUnrelated(u => u + 1)}&gt;\r\n        Increment Unrelated (causes re-render but not recalculation)\r\n      &lt;/button&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Memoizing complex objects\r\nfunction UserProfile({ user }) {\r\n  const memoizedUser = useMemo(() => ({\r\n    fullName: `${user.firstName} ${user.lastName}`,\r\n    initials: `${user.firstName[0]}${user.lastName[0]}`,\r\n    age: new Date().getFullYear() - user.birthYear\r\n  }), [user.firstName, user.lastName, user.birthYear]);\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h2&gt;{memoizedUser.fullName}&lt;/h2&gt;\r\n      &lt;p&gt;Initials: {memoizedUser.initials}&lt;/p&gt;\r\n      &lt;p&gt;Age: {memoizedUser.age}&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Advanced Hooks Comparison</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Hook</th>\r\n        <th>Best For</th>\r\n        <th>When to Use</th>\r\n    </tr>\r\n    <tr>\r\n        <td>useReducer</td>\r\n        <td>Complex state logic, state transitions</td>\r\n        <td>When state has multiple sub-values or next state depends on previous</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useCallback</td>\r\n        <td>Preventing unnecessary re-renders</td>\r\n        <td>When passing callbacks to optimized child components</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useMemo</td>\r\n        <td>Optimizing expensive calculations</td>\r\n        <td>When a calculation is slow and depends on specific inputs</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useRef</td>\r\n        <td>Accessing DOM elements, storing mutable values</td>\r\n        <td>When you need to persist values across renders without triggering re-renders</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useImperativeHandle</td>\r\n        <td>Customizing instance value exposed to parent</td>\r\n        <td>When using forwardRef and need to expose specific functions</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useLayoutEffect</td>\r\n        <td>DOM measurements before browser paint</td>\r\n        <td>When you need to read layout from the DOM and synchronously re-render</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>12. Context API</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Creating a context\r\nimport React, { createContext, useContext, useState } from \'react\';\r\n\r\nconst ThemeContext = createContext();\r\nconst UserContext = createContext();\r\n\r\n// Provider component\r\nfunction App() {\r\n  const [theme, setTheme] = useState(\'light\');\r\n  const [user, setUser] = useState({ name: \'Guest\' });\r\n\r\n  return (\r\n    &lt;ThemeContext.Provider value={{ theme, setTheme }}&gt;\r\n      &lt;UserContext.Provider value={{ user, setUser }}&gt;\r\n        &lt;div className={`App ${theme}`}&gt;\r\n          &lt;Header /&gt;\r\n          &lt;Main /&gt;\r\n          &lt;Footer /&gt;\r\n        &lt;/div&gt;\r\n      &lt;/UserContext.Provider&gt;\r\n    &lt;/ThemeContext.Provider&gt;\r\n  );\r\n}\r\n\r\n// Consumer component using useContext hook\r\nfunction Header() {\r\n  const { theme } = useContext(ThemeContext);\r\n  const { user } = useContext(UserContext);\r\n\r\n  return (\r\n    &lt;header className={`header ${theme}`}&gt;\r\n      &lt;h1&gt;Welcome, {user.name}&lt;/h1&gt;\r\n    &lt;/header&gt;\r\n  );\r\n}\r\n\r\n// Consumer component with context update\r\nfunction ThemeToggle() {\r\n  const { theme, setTheme } = useContext(ThemeContext);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme === \'light\' ? \'dark\' : \'light\');\r\n  };\r\n\r\n  return (\r\n    &lt;button onClick={toggleTheme}&gt;\r\n      Switch to {theme === \'light\' ? \'dark\' : \'light\'} theme\r\n    &lt;/button&gt;\r\n  );\r\n}\r\n\r\n// Nested context consumers\r\nfunction UserProfile() {\r\n  const { theme } = useContext(ThemeContext);\r\n  const { user, setUser } = useContext(UserContext);\r\n\r\n  const handleLogin = () => {\r\n    setUser({ name: \'John Doe\' });\r\n  };\r\n\r\n  return (\r\n    &lt;div className={`profile ${theme}`}&gt;\r\n      {user.name === \'Guest\' ? (\r\n        &lt;button onClick={handleLogin}&gt;Login&lt;/button&gt;\r\n      ) : (\r\n        &lt;div&gt;\r\n          &lt;h2&gt;{user.name}&lt;/h2&gt;\r\n          &lt;button onClick={() => setUser({ name: \'Guest\' })}&gt;Logout&lt;/button&gt;\r\n        &lt;/div&gt;\r\n      )}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Default values for context\r\nconst ThemeContext = createContext(\'light\'); // Default theme is \'light\'\r\n\r\n// Context with complex objects\r\nfunction App() {\r\n  const [state, setState] = useState({\r\n    theme: \'light\',\r\n    language: \'en\',\r\n    user: { name: \'Guest\' }\r\n  });\r\n\r\n  // Create a single context for the entire app state\r\n  const AppContext = createContext();\r\n\r\n  return (\r\n    &lt;AppContext.Provider value={{ state, setState }}&gt;\r\n      &lt;div className={`App ${state.theme}`}&gt;\r\n        &lt;Header /&gt;\r\n        &lt;Main /&gt;\r\n      &lt;/div&gt;\r\n    &lt;/AppContext.Provider&gt;\r\n  );\r\n}\r\n\r\n// Higher-order component for context consumption\r\nfunction withTheme(Component) {\r\n  return function ThemedComponent(props) {\r\n    const { theme } = useContext(ThemeContext);\r\n    return &lt;Component {...props} theme={theme} /&gt;;\r\n  };\r\n}\r\n\r\n// Using the HOC\r\nfunction Button({ theme, children }) {\r\n  return &lt;button className={`btn ${theme}`}&gt;{children}&lt;/button&gt;;\r\n}\r\n\r\nconst ThemedButton = withTheme(Button);\r\n\r\n// Context with reducer\r\nimport React, { createContext, useContext, useReducer } from \'react\';\r\n\r\nconst initialState = {\r\n  theme: \'light\',\r\n  user: { name: \'Guest\' }\r\n};\r\n\r\nfunction appReducer(state, action) {\r\n  switch (action.type) {\r\n    case \'SET_THEME\':\r\n      return { ...state, theme: action.payload };\r\n    case \'SET_USER\':\r\n      return { ...state, user: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst AppContext = createContext();\r\n\r\nfunction AppProvider({ children }) {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n  return (\r\n    &lt;AppContext.Provider value={{ state, dispatch }}&gt;\r\n      {children}\r\n    &lt;/AppContext.Provider&gt;\r\n  );\r\n}\r\n\r\nfunction ThemeToggle() {\r\n  const { state, dispatch } = useContext(AppContext);\r\n\r\n  const toggleTheme = () => {\r\n    dispatch({\r\n      type: \'SET_THEME\',\r\n      payload: state.theme === \'light\' ? \'dark\' : \'light\'\r\n    });\r\n  };\r\n\r\n  return (\r\n    &lt;button onClick={toggleTheme}&gt;\r\n      Switch to {state.theme === \'light\' ? \'dark\' : \'light\'} theme\r\n    &lt;/button&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Context API Best Practices</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Practice</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Context Separation</td>\r\n        <td>Create separate contexts for different concerns</td>\r\n        <td>ThemeContext, UserContext, LanguageContext</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Provider Placement</td>\r\n        <td>Place providers as close to where they\'re needed as possible</td>\r\n        <td>Wrap only components that need the context</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Default Values</td>\r\n        <td>Provide meaningful default values for contexts</td>\r\n        <td>const ThemeContext = createContext(\'light\');</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Context with Reducer</td>\r\n        <td>Combine context with useReducer for complex state</td>\r\n        <td>value={{ state, dispatch }}</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Avoid Performance Issues</td>\r\n        <td>Split contexts to prevent unnecessary re-renders</td>\r\n        <td>Separate static and frequently changing contexts</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>13. Error Boundaries</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Creating an error boundary component\r\nimport React, { Component } from \'react\';\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false, error: null, errorInfo: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    this.setState({\r\n      error: error,\r\n      errorInfo: errorInfo\r\n    });\r\n    console.error(\"Error caught by ErrorBoundary:\", error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return (\r\n        &lt;div className=\"error-boundary\"&gt;\r\n          &lt;h2&gt;Something went wrong.&lt;/h2&gt;\r\n          &lt;details style={{ whiteSpace: \'pre-wrap\' }}&gt;\r\n            {this.state.error && this.state.error.toString()}\r\n            &lt;br /&gt;\r\n            {this.state.errorInfo.componentStack}\r\n          &lt;/details&gt;\r\n        &lt;/div&gt;\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// Using the error boundary\r\nfunction App() {\r\n  return (\r\n    &lt;ErrorBoundary&gt;\r\n      &lt;BuggyComponent /&gt;\r\n    &lt;/ErrorBoundary&gt;\r\n  );\r\n}\r\n\r\n// A component that throws an error\r\nclass BuggyComponent extends React.Component {\r\n  state = { counter: 0 };\r\n\r\n  handleClick = () => {\r\n    this.setState(({ counter }) => ({\r\n      counter: counter + 1\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    if (this.state.counter === 5) {\r\n      // Simulate a JS error\r\n      throw new Error(\'I crashed!\');\r\n    }\r\n    return &lt;h1 onClick={this.handleClick}&gt;{this.state.counter}&lt;/h1&gt;;\r\n  }\r\n}\r\n\r\n// Error boundary with recovery\r\nclass ErrorBoundaryWithReset extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.error(\"Error caught by ErrorBoundary:\", error, errorInfo);\r\n  }\r\n\r\n  handleReset = () => {\r\n    this.setState({ hasError: false });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        &lt;div className=\"error-boundary\"&gt;\r\n          &lt;h2&gt;Something went wrong.&lt;/h2&gt;\r\n          &lt;p&gt;We\'re sorry for the inconvenience. Please try again.&lt;/p&gt;\r\n          &lt;button onClick={this.handleReset}&gt;Try Again&lt;/button&gt;\r\n        &lt;/div&gt;\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// Multiple error boundaries\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;ErrorBoundary&gt;\r\n        &lt;Navbar /&gt;\r\n      &lt;/ErrorBoundary&gt;\r\n      \r\n      &lt;ErrorBoundary&gt;\r\n        &lt;MainContent /&gt;\r\n      &lt;/ErrorBoundary&gt;\r\n      \r\n      &lt;ErrorBoundary&gt;\r\n        &lt;Footer /&gt;\r\n      &lt;/ErrorBoundary&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Error boundary with error logging service\r\nclass ErrorBoundaryWithLogging extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // Log error to an error reporting service\r\n    logErrorToService(error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return &lt;ErrorFallback /&gt;;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nfunction logErrorToService(error, errorInfo) {\r\n  // Implementation depends on the error tracking service\r\n  console.log(\'Logging error to service:\', error, errorInfo);\r\n  // Example: Sentry, LogRocket, etc.\r\n  // Sentry.captureException(error, { extra: errorInfo });\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Error Boundary Features</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Feature</th>\r\n        <th>Description</th>\r\n        <th>Implementation</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Error Detection</td>\r\n        <td>Catches JavaScript errors in child components</td>\r\n        <td>componentDidCatch(error, errorInfo)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Fallback UI</td>\r\n        <td>Displays a fallback UI when an error occurs</td>\r\n        <td>Conditional rendering based on hasError state</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Error Logging</td>\r\n        <td>Logs errors to external services</td>\r\n        <td>Integrate with error tracking services</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Recovery</td>\r\n        <td>Allows users to recover from errors</td>\r\n        <td>Reset button to clear error state</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Granularity</td>\r\n        <td>Can be placed at different levels in the component tree</td>\r\n        <td>Wrap specific components or entire app sections</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>14. Fragments</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Using fragments to return multiple elements\r\nfunction Columns() {\r\n  return (\r\n    &lt;React.Fragment&gt;\r\n      &lt;td&gt;Hello&lt;/td&gt;\r\n      &lt;td&gt;World&lt;/td&gt;\r\n    &lt;/React.Fragment&gt;\r\n  );\r\n}\r\n\r\n// Short syntax for fragments\r\nfunction Columns() {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;td&gt;Hello&lt;/td&gt;\r\n      &lt;td&gt;World&lt;/td&gt;\r\n    &lt;/&gt;\r\n  );\r\n}\r\n\r\n// Fragments with keys\r\nfunction Glossary(props) {\r\n  return (\r\n    &lt;dl&gt;\r\n      {props.items.map(item => (\r\n        // Without the key, React will fire a key warning\r\n        &lt;React.Fragment key={item.id}&gt;\r\n          &lt;dt&gt;{item.term}&lt;/dt&gt;\r\n          &lt;dd&gt;{item.description}&lt;/dd&gt;\r\n        &lt;/React.Fragment&gt;\r\n      ))}\r\n    &lt;/dl&gt;\r\n  );\r\n}\r\n\r\n// Fragments vs. divs\r\nfunction Table() {\r\n  return (\r\n    &lt;table&gt;\r\n      &lt;tbody&gt;\r\n        &lt;tr&gt;\r\n          &lt;Columns /&gt;\r\n        &lt;/tr&gt;\r\n      &lt;/tbody&gt;\r\n    &lt;/table&gt;\r\n  );\r\n}\r\n\r\n// Without fragments (invalid HTML)\r\nfunction InvalidTable() {\r\n  return (\r\n    &lt;table&gt;\r\n      &lt;tbody&gt;\r\n        &lt;tr&gt;\r\n          &lt;div&gt;  // This will cause a warning\r\n            &lt;td&gt;Hello&lt;/td&gt;\r\n            &lt;td&gt;World&lt;/td&gt;\r\n          &lt;/div&gt;\r\n        &lt;/tr&gt;\r\n      &lt;/tbody&gt;\r\n    &lt;/table&gt;\r\n  );\r\n}\r\n\r\n// Fragments with CSS\r\nfunction StyledComponent() {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;div className=\"header\"&gt;Header&lt;/div&gt;\r\n      &lt;div className=\"content\"&gt;Content&lt;/div&gt;\r\n      &lt;div className=\"footer\"&gt;Footer&lt;/div&gt;\r\n    &lt;/&gt;\r\n  );\r\n}\r\n\r\n// Fragments with refs (not supported in short syntax)\r\nfunction ComponentWithRef() {\r\n  const ref = React.useRef(null);\r\n  \r\n  React.useEffect(() => {\r\n    // ref.current will be null with short syntax\r\n    console.log(ref.current);\r\n  }, []);\r\n  \r\n  return (\r\n    &lt;React.Fragment ref={ref}&gt;\r\n      &lt;div&gt;Content&lt;/div&gt;\r\n    &lt;/React.Fragment&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Fragments Usage</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Scenario</th>\r\n        <th>Without Fragments</th>\r\n        <th>With Fragments</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Multiple elements in component</td>\r\n        <td>Wrap in unnecessary div</td>\r\n        <td>Use &lt;&gt;...&lt;/&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Table elements</td>\r\n        <td>Invalid HTML structure</td>\r\n        <td>Valid HTML with fragments</td>\r\n    </tr>\r\n    <tr>\r\n        <td>List rendering</td>\r\n        <td>Extra wrapper elements</td>\r\n        <td>Clean DOM structure</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CSS styling</td>\r\n        <td>Unnecessary wrapper affecting layout</td>\r\n        <td>No layout impact</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Keyed fragments</td>\r\n        <td>Not possible</td>\r\n        <td>&lt;React.Fragment key={id}&gt;...&lt;/React.Fragment&gt;</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>15. Higher-Order Components</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Simple higher-order component\r\nfunction withCounter(WrappedComponent) {\r\n  return function WithCounter(props) {\r\n    const [count, setCount] = React.useState(0);\r\n    \r\n    return (\r\n      &lt;WrappedComponent \r\n        count={count} \r\n        increment={() => setCount(c => c + 1)}\r\n        {...props} \r\n      /&gt;\r\n    );\r\n  };\r\n}\r\n\r\n// Using the HOC\r\nfunction ClickCounter({ count, increment, name }) {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h2&gt;{name}&lt;/h2&gt;\r\n      &lt;p&gt;Button clicked {count} times&lt;/p&gt;\r\n      &lt;button onClick={increment}&gt;Click me&lt;/button&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nconst EnhancedClickCounter = withCounter(ClickCounter);\r\n\r\n// HOC with props modification\r\nfunction withLogger(WrappedComponent) {\r\n  return function WithLogger(props) {\r\n    React.useEffect(() => {\r\n      console.log(`Component ${WrappedComponent.name} mounted with props:`, props);\r\n    }, [props]);\r\n    \r\n    return &lt;WrappedComponent {...props} /&gt;;\r\n  };\r\n}\r\n\r\nconst LoggedComponent = withLogger(ClickCounter);\r\n\r\n// HOC with conditional rendering\r\nfunction withAuth(WrappedComponent) {\r\n  return function WithAuth(props) {\r\n    const [isAuthenticated, setIsAuthenticated] = React.useState(false);\r\n    \r\n    if (!isAuthenticated) {\r\n      return &lt;div&gt;Please log in to view this content&lt;/div&gt;;\r\n    }\r\n    \r\n    return (\r\n      &lt;&gt;\r\n        &lt;button onClick={() => setIsAuthenticated(false)}&gt;Logout&lt;/button&gt;\r\n        &lt;WrappedComponent {...props} /&gt;\r\n      &lt;/&gt;\r\n    );\r\n  };\r\n}\r\n\r\nconst ProtectedComponent = withAuth(ClickCounter);\r\n\r\n// HOC with props proxy\r\nfunction withData(WrappedComponent, dataSource) {\r\n  return function WithData(props) {\r\n    const [data, setData] = React.useState(null);\r\n    const [loading, setLoading] = React.useState(true);\r\n    \r\n    React.useEffect(() => {\r\n      fetchData(dataSource)\r\n        .then(result => {\r\n          setData(result);\r\n          setLoading(false);\r\n        })\r\n        .catch(error => {\r\n          console.error(\'Error fetching data:\', error);\r\n          setLoading(false);\r\n        });\r\n    }, [dataSource]);\r\n    \r\n    if (loading) return &lt;div&gt;Loading...&lt;/div&gt;;\r\n    if (!data) return &lt;div&gt;Error loading data&lt;/div&gt;;\r\n    \r\n    return &lt;WrappedComponent data={data} {...props} /&gt;;\r\n  };\r\n}\r\n\r\nconst UserProfileWithData = withData(UserProfile, \'/api/user/123\');\r\n\r\n// Composing HOCs\r\nfunction enhance(Component) {\r\n  return withAuth(withLogger(withCounter(Component)));\r\n}\r\n\r\nconst EnhancedComponent = enhance(ClickCounter);\r\n\r\n// HOC with ref forwarding\r\nimport React from \'react\';\r\n\r\nfunction withRefForwarding(WrappedComponent) {\r\n  class WithRefForwarding extends React.Component {\r\n    render() {\r\n      const { forwardedRef, ...rest } = this.props;\r\n      return &lt;WrappedComponent ref={forwardedRef} {...rest} /&gt;;\r\n    }\r\n  }\r\n  \r\n  return React.forwardRef((props, ref) => {\r\n    return &lt;WithRefForwarding {...props} forwardedRef={ref} /&gt;;\r\n  });\r\n}\r\n\r\n// Using the ref forwarding HOC\r\nclass FancyButton extends React.Component {\r\n  focus() {\r\n    // Implementation of focus method\r\n  }\r\n  \r\n  render() {\r\n    return &lt;button className=\"FancyButton\"&gt;{this.props.children}&lt;/button&gt;;\r\n  }\r\n}\r\n\r\nconst EnhancedFancyButton = withRefForwarding(FancyButton);\r\n\r\n// Ref usage\r\nconst ref = React.createRef();\r\n&lt;EnhancedFancyButton ref={ref}&gt;Click me!&lt;/EnhancedFancyButton&gt;;</code></pre>\r\n</div>\r\n\r\n<h4>Higher-Order Component Patterns</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Pattern</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Props Proxy</td>\r\n        <td>HOC that manipulates props passed to the wrapped component</td>\r\n        <td>Adding, removing, or modifying props</td>\r\n    </tr>\r\n    <tr>\r\n        <td>State Management</td>\r\n        <td>HOC that manages state for the wrapped component</td>\r\n        <td>withCounter, withFormState</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Conditional Rendering</td>\r\n        <td>HOC that conditionally renders the wrapped component</td>\r\n        <td>withAuth, withPermission</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Data Fetching</th>\r\n        <td>HOC that fetches data and passes it as props</td>\r\n        <td>withData, withSubscription</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Lifecycle Injection</td>\r\n        <td>HOC that injects lifecycle methods</td>\r\n        <td>withLogger, withAnalytics</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Ref Forwarding</td>\r\n        <td>HOC that forwards refs to the wrapped component</td>\r\n        <td>withRefForwarding</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>16. Render Props</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Basic render prop component\r\nclass MouseTracker extends React.Component {\r\n  state = { x: 0, y: 0 };\r\n\r\n  handleMouseMove = (event) => {\r\n    this.setState({\r\n      x: event.clientX,\r\n      y: event.clientY\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      &lt;div style={{ height: \'100vh\' }} onMouseMove={this.handleMouseMove}&gt;\r\n        {this.props.render(this.state)}\r\n      &lt;/div&gt;\r\n    );\r\n  }\r\n}\r\n\r\n// Using the render prop component\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Move the mouse around&lt;/h1&gt;\r\n      &lt;MouseTracker\r\n        render={({ x, y }) => (\r\n          &lt;h1&gt;The mouse position is ({x}, {y})&lt;/h1&gt;\r\n        )}\r\n      /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Using children as a render prop\r\nfunction MouseTracker({ children }) {\r\n  const [state, setState] = React.useState({ x: 0, y: 0 });\r\n\r\n  const handleMouseMove = (event) => {\r\n    setState({\r\n      x: event.clientX,\r\n      y: event.clientY\r\n    });\r\n  };\r\n\r\n  return (\r\n    &lt;div style={{ height: \'100vh\' }} onMouseMove={handleMouseMove}&gt;\r\n      {children(state)}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Using the children render prop\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Move the mouse around&lt;/h1&gt;\r\n      &lt;MouseTracker&gt;\r\n        {({ x, y }) => (\r\n          &lt;h1&gt;The mouse position is ({x}, {y})&lt;/h1&gt;\r\n        )}\r\n      &lt;/MouseTracker&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Render prop with multiple render methods\r\nclass DataFetcher extends React.Component {\r\n  state = {\r\n    data: null,\r\n    loading: true,\r\n    error: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData = async () => {\r\n    try {\r\n      const response = await fetch(this.props.url);\r\n      const data = await response.json();\r\n      this.setState({ data, loading: false });\r\n    } catch (error) {\r\n      this.setState({ error, loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.loading) {\r\n      return this.props.renderLoading();\r\n    }\r\n    \r\n    if (this.state.error) {\r\n      return this.props.renderError(this.state.error);\r\n    }\r\n    \r\n    return this.props.renderSuccess(this.state.data);\r\n  }\r\n}\r\n\r\n// Using the DataFetcher component\r\nfunction App() {\r\n  return (\r\n    &lt;DataFetcher\r\n      url=\"/api/user/123\"\r\n      renderLoading={() => &lt;div&gt;Loading...&lt;/div&gt;}\r\n      renderError={(error) => &lt;div&gt;Error: {error.message}&lt;/div&gt;}\r\n      renderSuccess={(data) => &lt;div&gt;Name: {data.name}&lt;/div&gt;}\r\n    /&gt;\r\n  );\r\n}\r\n\r\n// Render prop with hooks\r\nfunction useMousePosition() {\r\n  const [position, setPosition] = React.useState({ x: 0, y: 0 });\r\n\r\n  React.useEffect(() => {\r\n    const handleMouseMove = (e) => {\r\n      setPosition({ x: e.clientX, y: e.clientY });\r\n    };\r\n\r\n    window.addEventListener(\'mousemove\', handleMouseMove);\r\n    return () => {\r\n      window.removeEventListener(\'mousemove\', handleMouseMove);\r\n    };\r\n  }, []);\r\n\r\n  return position;\r\n}\r\n\r\n// Using the hook instead of render prop\r\nfunction MousePosition() {\r\n  const { x, y } = useMousePosition();\r\n  return &lt;h1&gt;The mouse position is ({x}, {y})&lt;/h1&gt;;\r\n}\r\n\r\n// Render prop vs. HOC comparison\r\n// HOC approach\r\nfunction withMousePosition(Component) {\r\n  return function WithMousePosition(props) {\r\n    const [position, setPosition] = React.useState({ x: 0, y: 0 });\r\n\r\n    React.useEffect(() => {\r\n      const handleMouseMove = (e) => {\r\n        setPosition({ x: e.clientX, y: e.clientY });\r\n      };\r\n\r\n      window.addEventListener(\'mousemove\', handleMouseMove);\r\n      return () => {\r\n        window.removeEventListener(\'mousemove\', handleMouseMove);\r\n      };\r\n    }, []);\r\n\r\n    return &lt;Component {...props} mousePosition={position} /&gt;;\r\n  };\r\n}\r\n\r\n// Using the HOC\r\nfunction MousePositionDisplay({ mousePosition }) {\r\n  return &lt;h1&gt;The mouse position is ({mousePosition.x}, {mousePosition.y})&lt;/h1&gt;;\r\n}\r\n\r\nconst EnhancedMousePositionDisplay = withMousePosition(MousePositionDisplay);</code></pre>\r\n</div>\r\n\r\n<h4>Render Props vs. Other Patterns</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Pattern</th>\r\n        <th>Pros</th>\r\n        <th>Cons</th>\r\n        <th>Best For</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Render Props</td>\r\n        <td>Flexible, explicit, doesn\'t require wrapper components</td>\r\n        <td>Can lead to callback hell, less composable than hooks</td>\r\n        <td>Sharing stateful logic between components</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Higher-Order Components</td>\r\n        <td>Can be composed, familiar pattern</td>\r\n        <td>Props collision, wrapper hell, less explicit</td>\r\n        <td>Reusing component logic across multiple components</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Hooks</td>\r\n        <td>Most flexible, no wrapper components, composable</td>\r\n        <td>Can\'t be used in class components, learning curve</td>\r\n        <td>Stateful logic, side effects, reusable logic</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>17. React Router</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Basic routing setup\r\nimport { BrowserRouter as Router, Routes, Route, Link } from \'react-router-dom\';\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Router&gt;\r\n      &lt;div&gt;\r\n        &lt;nav&gt;\r\n          &lt;ul&gt;\r\n            &lt;li&gt;&lt;Link to=\"/\"&gt;Home&lt;/Link&gt;&lt;/li&gt;\r\n            &lt;li&gt;&lt;Link to=\"/about\"&gt;About&lt;/Link&gt;&lt;/li&gt;\r\n            &lt;li&gt;&lt;Link to=\"/users\"&gt;Users&lt;/Link&gt;&lt;/li&gt;\r\n          &lt;/ul&gt;\r\n        &lt;/nav&gt;\r\n\r\n        &lt;Routes&gt;\r\n          &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\r\n          &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\r\n          &lt;Route path=\"/users\" element={&lt;Users /&gt;} /&gt;\r\n        &lt;/Routes&gt;\r\n      &lt;/div&gt;\r\n    &lt;/Router&gt;\r\n  );\r\n}\r\n\r\n// Route parameters\r\nfunction User() {\r\n  const { userId } = useParams();\r\n  \r\n  return &lt;h2&gt;User ID: {userId}&lt;/h2&gt;\r\n}\r\n\r\n// In the Routes:\r\n&lt;Route path=\"/users/:userId\" element={&lt;User /&gt;} /&gt;\r\n\r\n// Nested routes\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=\"/\" element={&lt;Layout /&gt;}&gt;\r\n        &lt;Route index element={&lt;Home /&gt;} /&gt;\r\n        &lt;Route path=\"about\" element={&lt;About /&gt;} /&gt;\r\n        &lt;Route path=\"users\" element={&lt;Users /&gt;}&gt;\r\n          &lt;Route path=\":userId\" element={&lt;User /&gt;} /&gt;\r\n          &lt;Route path=\"new\" element={&lt;NewUser /&gt;} /&gt;\r\n        &lt;/Route&gt;\r\n      &lt;/Route&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}\r\n\r\nfunction Layout() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;nav&gt;\r\n        &lt;Link to=\"/\"&gt;Home&lt;/Link&gt; | \r\n        &lt;Link to=\"/about\"&gt;About&lt;/Link&gt; | \r\n        &lt;Link to=\"/users\"&gt;Users&lt;/Link&gt;\r\n      &lt;/nav&gt;\r\n      \r\n      &lt;Outlet /&gt;  {/* Nested routes will render here */}\r\n      \r\n      &lt;footer&gt;Footer content&lt;/footer&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Navigation with useNavigate\r\nfunction LoginButton() {\r\n  const navigate = useNavigate();\r\n  \r\n  const handleLogin = () => {\r\n    // After successful login\r\n    navigate(\'/dashboard\');\r\n  };\r\n  \r\n  return &lt;button onClick={handleLogin}&gt;Login&lt;/button&gt;;\r\n}\r\n\r\n// Programmatic navigation with state\r\nfunction Product({ id }) {\r\n  const navigate = useNavigate();\r\n  \r\n  const handleViewDetails = () => {\r\n    navigate(\'/product-details\', {\r\n      state: { productId: id }\r\n    });\r\n  };\r\n  \r\n  return &lt;button onClick={handleViewDetails}&gt;View Details&lt;/button&gt;;\r\n}\r\n\r\n// Accessing navigation state\r\nfunction ProductDetails() {\r\n  const location = useLocation();\r\n  const { productId } = location.state || {};\r\n  \r\n  return &lt;div&gt;Product ID: {productId}&lt;/div&gt;;\r\n}\r\n\r\n// Route protection with custom components\r\nfunction ProtectedRoute({ children }) {\r\n  const auth = useAuth();\r\n  \r\n  if (!auth.user) {\r\n    return &lt;Navigate to=\"/login\" replace /&gt;;\r\n  }\r\n  \r\n  return children;\r\n}\r\n\r\n// Using the protected route\r\n&lt;Route\r\n  path=\"/dashboard\"\r\n  element={\r\n    &lt;ProtectedRoute&gt;\r\n      &lt;Dashboard /&gt;\r\n    &lt;/ProtectedRoute&gt;\r\n  }\r\n/&gt;\r\n\r\n// Query parameters\r\nfunction SearchResults() {\r\n  const location = useLocation();\r\n  const query = new URLSearchParams(location.search);\r\n  const term = query.get(\'term\');\r\n  \r\n  return &lt;div&gt;Search results for: {term}&lt;/div&gt;\r\n}\r\n\r\n// Link to search page\r\n&lt;Link to=\"/search?term=react\"&gt;Search for React&lt;/Link&gt;\r\n\r\n// Custom Link component with active styling\r\nfunction CustomLink({ to, children, ...props }) {\r\n  const resolvedPath = useResolvedPath(to);\r\n  const isActive = useMatch({ path: resolvedPath.pathname, end: true });\r\n  \r\n  return (\r\n    &lt;Link \r\n      to={to} \r\n      style={{ color: isActive ? \'red\' : \'black\' }}\r\n      {...props}\r\n    &gt;\r\n      {children}\r\n    &lt;/Link&gt;\r\n  );\r\n}\r\n\r\n// Lazy loading routes\r\nconst LazyComponent = React.lazy(() => import(\'./LazyComponent\'));\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Routes&gt;\r\n      &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\r\n      &lt;Route \r\n        path=\"/lazy\" \r\n        element={\r\n          &lt;React.Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\r\n            &lt;LazyComponent /&gt;\r\n          &lt;/React.Suspense&gt;\r\n        } \r\n      /&gt;\r\n    &lt;/Routes&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>React Router Components and Hooks</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Component/Hook</th>\r\n        <th>Purpose</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>BrowserRouter</td>\r\n        <td>Router that uses the HTML5 history API</td>\r\n        <td>&lt;BrowserRouter&gt;...&lt;/BrowserRouter&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Routes</td>\r\n        <td>Container for a collection of routes</td>\r\n        <td>&lt;Routes&gt;...&lt;/Routes&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Route</td>\r\n        <td>Maps a URL path to a React component</td>\r\n        <td>&lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Link</td>\r\n        <td>Navigates to a new route without page reload</td>\r\n        <td>&lt;Link to=\"/about\"&gt;About&lt;/Link&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>NavLink</td>\r\n        <td>Link with styling for active state</td>\r\n        <td>&lt;NavLink to=\"/about\"&gt;About&lt;/NavLink&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Outlet</td>\r\n        <td>Renders child route elements</td>\r\n        <td>&lt;Outlet /&gt;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useNavigate</td>\r\n        <td>Programmatic navigation</td>\r\n        <td>const navigate = useNavigate(); navigate(\'/path\');</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useParams</td>\r\n        <td>Access route parameters</td>\r\n        <td>const { id } = useParams();</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useLocation</td>\r\n        <td>Access current location object</td>\r\n        <td>const location = useLocation();</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useMatch</td>\r\n        <td>Match current URL to a path</td>\r\n        <td>const match = useMatch(\"/path\");</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>18. State Management with Redux</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Setting up Redux store\r\nimport { createStore } from \'redux\';\r\n\r\n// Initial state\r\nconst initialState = {\r\n  count: 0,\r\n  user: null,\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\n// Action types\r\nconst INCREMENT = \'INCREMENT\';\r\nconst DECREMENT = \'DECREMENT\';\r\nconst SET_USER = \'SET_USER\';\r\nconst SET_LOADING = \'SET_LOADING\';\r\nconst SET_ERROR = \'SET_ERROR\';\r\n\r\n// Action creators\r\nexport const increment = () => ({ type: INCREMENT });\r\nexport const decrement = () => ({ type: DECREMENT });\r\nexport const setUser = (user) => ({ type: SET_USER, payload: user });\r\nexport const setLoading = (loading) => ({ type: SET_LOADING, payload: loading });\r\nexport const setError = (error) => ({ type: SET_ERROR, payload: error });\r\n\r\n// Reducer\r\nfunction counterReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case INCREMENT:\r\n      return { ...state, count: state.count + 1 };\r\n    case DECREMENT:\r\n      return { ...state, count: state.count - 1 };\r\n    case SET_USER:\r\n      return { ...state, user: action.payload };\r\n    case SET_LOADING:\r\n      return { ...state, loading: action.payload };\r\n    case SET_ERROR:\r\n      return { ...state, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Create store\r\nconst store = createStore(counterReducer);\r\n\r\n// Using Redux with React components\r\nimport { Provider, useSelector, useDispatch } from \'react-redux\';\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Provider store={store}&gt;\r\n      &lt;Counter /&gt;\r\n      &lt;UserProfile /&gt;\r\n    &lt;/Provider&gt;\r\n  );\r\n}\r\n\r\nfunction Counter() {\r\n  const count = useSelector(state => state.count);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\r\n      &lt;button onClick={() => dispatch(increment())}&gt;+&lt;/button&gt;\r\n      &lt;button onClick={() => dispatch(decrement())}&gt;-&lt;/button&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Async actions with Redux Thunk\r\nimport { createStore, applyMiddleware } from \'redux\';\r\nimport thunk from \'redux-thunk\';\r\n\r\nconst store = createStore(counterReducer, applyMiddleware(thunk));\r\n\r\n// Async action creator\r\nexport const fetchUser = (userId) => {\r\n  return async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    \r\n    try {\r\n      const response = await fetch(`/api/users/${userId}`);\r\n      const user = await response.json();\r\n      dispatch(setUser(user));\r\n      dispatch(setError(null));\r\n    } catch (error) {\r\n      dispatch(setError(error.message));\r\n    } finally {\r\n      dispatch(setLoading(false));\r\n    }\r\n  };\r\n};\r\n\r\n// Using the async action\r\nfunction UserProfile({ userId }) {\r\n  const user = useSelector(state => state.user);\r\n  const loading = useSelector(state => state.loading);\r\n  const error = useSelector(state => state.error);\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    dispatch(fetchUser(userId));\r\n  }, [dispatch, userId]);\r\n\r\n  if (loading) return &lt;div&gt;Loading...&lt;/div&gt;;\r\n  if (error) return &lt;div&gt;Error: {error}&lt;/div&gt;;\r\n  \r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h2&gt;{user.name}&lt;/h2&gt;\r\n      &lt;p&gt;{user.email}&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Combining reducers with combineReducers\r\nimport { combineReducers } from \'redux\';\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer,\r\n  user: userReducer,\r\n  products: productsReducer\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\n// Using Redux Toolkit (modern Redux)\r\nimport { configureStore, createSlice } from \'@reduxjs/toolkit\';\r\n\r\n// Create a slice\r\nconst counterSlice = createSlice({\r\n  name: \'counter\',\r\n  initialState: { count: 0 },\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.count += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.count -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.count += action.payload;\r\n    }\r\n  }\r\n});\r\n\r\n// Export actions\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// Configure store\r\nconst store = configureStore({\r\n  reducer: {\r\n    counter: counterSlice.reducer\r\n  }\r\n});\r\n\r\n// Using the slice in a component\r\nfunction Counter() {\r\n  const count = useSelector(state => state.counter.count);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h2&gt;Count: {count}&lt;/h2&gt;\r\n      &lt;button onClick={() => dispatch(increment())}&gt;+&lt;/button&gt;\r\n      &lt;button onClick={() => dispatch(decrement())}&gt;-&lt;/button&gt;\r\n      &lt;button onClick={() => dispatch(incrementByAmount(5))}&gt;Add 5&lt;/button&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Redux Concepts</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Concept</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Store</td>\r\n        <td>Holds the entire state of the application</td>\r\n        <td>const store = createStore(reducer);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Actions</td>\r\n        <td>Plain objects describing what happened</td>\r\n        <td>{ type: \'INCREMENT\' }</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Action Creators</td>\r\n        <td>Functions that create actions</td>\r\n        <td>const increment = () => ({ type: \'INCREMENT\' });</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Reducers</td>\r\n        <td>Functions that determine state changes</td>\r\n        <td>function reducer(state, action) { ... }</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Dispatch</td>\r\n        <td>Method to send actions to the store</td>\r\n        <td>store.dispatch(increment());</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Selectors</th>\r\n        <td>Functions that extract data from the store</td>\r\n        <td>const count = useSelector(state => state.count);</td>\r\n    </tr>\r\n    <tr>\r\n        <th>Middleware</th>\r\n        <td>Extends Redux with custom functionality</td>\r\n        <td>applyMiddleware(thunk, logger);</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>19. Testing React Applications</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Setting up testing environment\r\n// Install dependencies: npm install --save-dev jest @testing-library/react @testing-library/jest-dom\r\n\r\n// Simple component test\r\nimport { render, screen } from \'@testing-library/react\';\r\nimport App from \'./App\';\r\n\r\ntest(\'renders learn react link\', () => {\r\n  render(&lt;App /&gt;);\r\n  const linkElement = screen.getByText(/learn react/i);\r\n  expect(linkElement).toBeInTheDocument();\r\n});\r\n\r\n// Testing user interactions\r\nimport { render, screen, fireEvent } from \'@testing-library/react\';\r\nimport Counter from \'./Counter\';\r\n\r\ntest(\'counter increments when button is clicked\', () => {\r\n  render(&lt;Counter /&gt;);\r\n  \r\n  // Find the button\r\n  const button = screen.getByRole(\'button\', { name: /increment/i });\r\n  \r\n  // Check initial count\r\n  expect(screen.getByText(/count: 0/i)).toBeInTheDocument();\r\n  \r\n  // Click the button\r\n  fireEvent.click(button);\r\n  \r\n  // Check if count incremented\r\n  expect(screen.getByText(/count: 1/i)).toBeInTheDocument();\r\n});\r\n\r\n// Testing async operations\r\nimport { render, screen, waitFor } from \'@testing-library/react\';\r\nimport UserList from \'./UserList\';\r\n\r\n// Mock the fetch function\r\nglobal.fetch = jest.fn(() =>\r\n  Promise.resolve({\r\n    json: () => Promise.resolve([{ id: 1, name: \'John Doe\' }]),\r\n  })\r\n);\r\n\r\ntest(\'displays user data after loading\', async () => {\r\n  render(&lt;UserList /&gt;);\r\n  \r\n  // Check loading state\r\n  expect(screen.getByText(/loading/i)).toBeInTheDocument();\r\n  \r\n  // Wait for the data to load\r\n  await waitFor(() => {\r\n    expect(screen.getByText(/john doe/i)).toBeInTheDocument();\r\n  });\r\n  \r\n  // Check that loading text is gone\r\n  expect(screen.queryByText(/loading/i)).not.toBeInTheDocument();\r\n});\r\n\r\n// Testing custom hooks\r\nimport { renderHook, act } from \'@testing-library/react-hooks\';\r\nimport useCounter from \'./useCounter\';\r\n\r\ntest(\'should increment counter\', () => {\r\n  const { result } = renderHook(() => useCounter());\r\n  \r\n  // Initial value\r\n  expect(result.current.count).toBe(0);\r\n  \r\n  // Increment\r\n  act(() => {\r\n    result.current.increment();\r\n  });\r\n  \r\n  // Check updated value\r\n  expect(result.current.count).toBe(1);\r\n});\r\n\r\n// Testing context providers\r\nimport { render, screen } from \'@testing-library/react\';\r\nimport { ThemeProvider } from \'./ThemeContext\';\r\nimport ThemedButton from \'./ThemedButton\';\r\n\r\ntest(\'button uses theme from context\', () => {\r\n  render(\r\n    &lt;ThemeProvider value=\"dark\"&gt;\r\n      &lt;ThemedButton /&gt;\r\n    &lt;/ThemeProvider&gt;\r\n  );\r\n  \r\n  const button = screen.getByRole(\'button\');\r\n  expect(button).toHaveClass(\'dark-theme\');\r\n});\r\n\r\n// Mocking modules\r\njest.mock(\'./api\', () => ({\r\n  fetchUsers: jest.fn(() => Promise.resolve([{ id: 1, name: \'John\' }])),\r\n}));\r\n\r\ntest(\'displays mocked user data\', async () => {\r\n  render(&lt;UserList /&gt;);\r\n  \r\n  await waitFor(() => {\r\n    expect(screen.getByText(/john/i)).toBeInTheDocument();\r\n  });\r\n});\r\n\r\n// Snapshot testing\r\nimport { render } from \'@testing-library/react\';\r\nimport UserProfile from \'./UserProfile\';\r\n\r\ntest(\'matches snapshot\', () => {\r\n  const { container } = render(&lt;UserProfile name=\"John\" /&gt;);\r\n  expect(container).toMatchSnapshot();\r\n});\r\n\r\n// Testing event handlers\r\nimport { render, screen, fireEvent } from \'@testing-library/react\';\r\nimport LoginForm from \'./LoginForm\';\r\n\r\ntest(\'calls onSubmit with form data\', () => {\r\n  const handleSubmit = jest.fn();\r\n  render(&lt;LoginForm onSubmit={handleSubmit} /&gt;);\r\n  \r\n  // Fill in the form\r\n  fireEvent.change(screen.getByLabelText(/username/i), {\r\n    target: { value: \'john.doe\' },\r\n  });\r\n  fireEvent.change(screen.getByLabelText(/password/i), {\r\n    target: { value: \'password123\' },\r\n  });\r\n  \r\n  // Submit the form\r\n  fireEvent.click(screen.getByRole(\'button\', { name: /submit/i }));\r\n  \r\n  // Check if onSubmit was called with correct data\r\n  expect(handleSubmit).toHaveBeenCalledWith({\r\n    username: \'john.doe\',\r\n    password: \'password123\',\r\n  });\r\n});\r\n\r\n// Testing React Router\r\nimport { render, screen } from \'@testing-library/react\';\r\nimport { MemoryRouter } from \'react-router-dom\';\r\nimport App from \'./App\';\r\n\r\ntest(\'renders home page by default\', () => {\r\n  render(\r\n    &lt;MemoryRouter initialEntries={[\'/\']}&gt;\r\n      &lt;App /&gt;\r\n    &lt;/MemoryRouter&gt;\r\n  );\r\n  \r\n  expect(screen.getByText(/welcome to home page/i)).toBeInTheDocument();\r\n});\r\n\r\ntest(\'renders about page when navigating to /about\', () => {\r\n  render(\r\n    &lt;MemoryRouter initialEntries={[\'/about\']}&gt;\r\n      &lt;App /&gt;\r\n    &lt;/MemoryRouter&gt;\r\n  );\r\n  \r\n  expect(screen.getByText(/about us/i)).toBeInTheDocument();\r\n});</code></pre>\r\n</div>\r\n\r\n<h4>Testing Tools and Libraries</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Tool/Library</th>\r\n        <th>Purpose</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Jest</td>\r\n        <td>JavaScript testing framework</td>\r\n        <td>test(\'description\', () => { expect(result).toBe(expected); });</td>\r\n    </tr>\r\n    <tr>\r\n        <td>React Testing Library</td>\r\n        <td>Testing React components</td>\r\n        <td>render(&lt;Component /&gt;); screen.getByText(\'text\');</td>\r\n    </tr>\r\n    <tr>\r\n        <td>@testing-library/jest-dom</td>\r\n        <td>Custom Jest matchers for DOM</td>\r\n        <td>expect(element).toBeInTheDocument();</td>\r\n    </tr>\r\n    <tr>\r\n        <td>@testing-library/user-event</td>\r\n        <td>Simulate user interactions</td>\r\n        <td>userEvent.type(input, \'text\');</td>\r\n    </tr>\r\n    <tr>\r\n        <td>@testing-library/react-hooks</td>\r\n        <td>Testing custom hooks</td>\r\n        <td>renderHook(() => useCustomHook());</td>\r\n    </tr>\r\n    <tr>\r\n        <td>MSW (Mock Service Worker)</td>\r\n        <td>Mock API responses</td>\r\n        <td>rest.get(\'/api/users\', (req, res, ctx) => res(ctx.json([])));</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>20. Performance Optimization</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// React.memo for preventing unnecessary re-renders\r\nconst ExpensiveComponent = React.memo(function ExpensiveComponent({ data }) {\r\n  // Expensive rendering logic\r\n  return &lt;div&gt;{data.map(item => &lt;Item key={item.id} item={item} /&gt;)}&lt;/div&gt;;\r\n});\r\n\r\n// Using useMemo for expensive calculations\r\nfunction ExpensiveCalculation({ a, b }) {\r\n  const result = React.useMemo(() => {\r\n    // Expensive calculation\r\n    console.log(\'Expensive calculation executed\');\r\n    return a * b;\r\n  }, [a, b]);\r\n\r\n  return &lt;div&gt;Result: {result}&lt;/div&gt;;\r\n}\r\n\r\n// Using useCallback for memoizing functions\r\nfunction ParentComponent() {\r\n  const [count, setCount] = React.useState(0);\r\n  \r\n  // Without useCallback, this function would be recreated on every render\r\n  const handleClick = React.useCallback(() => {\r\n    setCount(c => c + 1);\r\n  }, []);\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;p&gt;Count: {count}&lt;/p&gt;\r\n      &lt;ChildComponent onClick={handleClick} /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Virtualization for long lists\r\nimport { FixedSizeList as List } from \'react-window\';\r\n\r\nfunction Row({ index, style }) {\r\n  return (\r\n    &lt;div style={style}&gt;\r\n      Row {index}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction LongList() {\r\n  return (\r\n    &lt;List\r\n      height={600}\r\n      itemCount={1000}\r\n      itemSize={35}\r\n    &gt;\r\n      {Row}\r\n    &lt;/List&gt;\r\n  );\r\n}\r\n\r\n// Code splitting with React.lazy and Suspense\r\nconst LazyComponent = React.lazy(() => import(\'./LazyComponent\'));\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;My App&lt;/h1&gt;\r\n      &lt;React.Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\r\n        &lt;LazyComponent /&gt;\r\n      &lt;/React.Suspense&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Route-based code splitting\r\nimport { BrowserRouter as Router, Routes, Route } from \'react-router-dom\';\r\n\r\nconst Home = React.lazy(() => import(\'./Home\'));\r\nconst About = React.lazy(() => import(\'./About\'));\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Router&gt;\r\n      &lt;React.Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\r\n        &lt;Routes&gt;\r\n          &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\r\n          &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\r\n        &lt;/Routes&gt;\r\n      &lt;/React.Suspense&gt;\r\n    &lt;/Router&gt;\r\n  );\r\n}\r\n\r\n// Optimizing context to prevent unnecessary re-renders\r\nimport React, { createContext, useContext, useMemo } from \'react\';\r\n\r\nconst UserContext = createContext();\r\n\r\nfunction UserProvider({ children }) {\r\n  const [user, setUser] = React.useState(null);\r\n  const [theme, setTheme] = React.useState(\'light\');\r\n  \r\n  // Split context to prevent unnecessary re-renders\r\n  const userValue = useMemo(() => ({ user, setUser }), [user]);\r\n  const themeValue = useMemo(() => ({ theme, setTheme }), [theme]);\r\n  \r\n  return (\r\n    &lt;UserContext.Provider value={userValue}&gt;\r\n      &lt;ThemeContext.Provider value={themeValue}&gt;\r\n        {children}\r\n      &lt;/ThemeContext.Provider&gt;\r\n    &lt;/UserContext.Provider&gt;\r\n  );\r\n}\r\n\r\n// Using React DevTools Profiler\r\nimport React, { Profiler } from \'react\';\r\n\r\nfunction onRenderCallback(\r\n  id, // the \"id\" prop of the Profiler tree that has just committed\r\n  phase, // either \"mount\" (if the tree just mounted) or \"update\" (if it re-rendered)\r\n  actualDuration, // time spent rendering the committed update\r\n  baseDuration, // estimated time to render the entire subtree without memoization\r\n  startTime, // when React began rendering this update\r\n  commitTime, // when React committed this update\r\n  interactions // the Set of interactions belonging to this update\r\n) {\r\n  // Log or send this data to analytics\r\n  console.log(`${id} ${phase} took ${actualDuration}ms`);\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;Profiler id=\"App\" onRender={onRenderCallback}&gt;\r\n      &lt;Navigation /&gt;\r\n      &lt;Main /&gt;\r\n    &lt;/Profiler&gt;\r\n  );\r\n}\r\n\r\n// Windowing or virtualization for large data sets\r\nimport { VariableSizeList as List } from \'react-window\';\r\n\r\nfunction Row({ index, style }) {\r\n  return (\r\n    &lt;div style={style}&gt;\r\n      Row {index}\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const rowHeights = new Array(1000)\r\n    .fill(true)\r\n    .map(() => 25 + Math.round(Math.random() * 50));\r\n\r\n  const getRowHeight = index => rowHeights[index];\r\n\r\n  return (\r\n    &lt;List\r\n      height={600}\r\n      itemCount={1000}\r\n      itemSize={getRowHeight}\r\n      width={300}\r\n    &gt;\r\n      {Row}\r\n    &lt;/List&gt;\r\n  );\r\n}\r\n\r\n// Using Web Workers for CPU-intensive tasks\r\n// worker.js\r\nself.addEventListener(\'message\', (e) => {\r\n  const result = heavyComputation(e.data);\r\n  self.postMessage(result);\r\n});\r\n\r\n// component.js\r\nfunction App() {\r\n  const [result, setResult] = React.useState(null);\r\n  const workerRef = React.useRef();\r\n\r\n  React.useEffect(() => {\r\n    workerRef.current = new Worker(\'./worker.js\');\r\n    \r\n    workerRef.current.onmessage = (e) => {\r\n      setResult(e.data);\r\n    };\r\n    \r\n    return () => {\r\n      workerRef.current.terminate();\r\n    };\r\n  }, []);\r\n\r\n  const handleCompute = () => {\r\n    workerRef.current.postMessage(largeDataSet);\r\n  };\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;button onClick={handleCompute}&gt;Compute&lt;/button&gt;\r\n      {result && &lt;div&gt;Result: {result}&lt;/div&gt;}\r\n    &lt;/div&gt;\r\n  );\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Performance Optimization Techniques</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Technique</th>\r\n        <th>When to Use</th>\r\n        <th>Implementation</th>\r\n    </tr>\r\n    <tr>\r\n        <td>React.memo</td>\r\n        <td>When components re-render with same props</td>\r\n        <td>const MemoComponent = React.memo(Component);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useMemo</td>\r\n        <td>For expensive calculations</td>\r\n        <td>const value = useMemo(() => computeExpensiveValue(a, b), [a, b]);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>useCallback</td>\r\n        <td>When passing callbacks to optimized child components</td>\r\n        <td>const callback = useCallback(() => {...}, [deps]);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Code Splitting</td>\r\n        <td>For large applications to reduce initial load time</td>\r\n        <td>const LazyComponent = React.lazy(() => import(\'./Component\'));</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Virtualization</td>\r\n        <td>For long lists or large data sets</td>\r\n        <td>Use react-window or react-virtualized</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Context Optimization</td>\r\n        <td>When context causes unnecessary re-renders</td>\r\n        <td>Split contexts or use useMemo for context values</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Image Optimization</td>\r\n        <td>For applications with many images</td>\r\n        <td>Use lazy loading, responsive images, and modern formats</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Bundle Analysis</td>\r\n        <td>To identify large dependencies</td>\r\n        <td>Use Webpack Bundle Analyzer</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>21. Server-Side Rendering with Next.js</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-jsx\">// Setting up Next.js\r\n// Install: npm install next react react-dom\r\n\r\n// Basic page structure\r\n// pages/index.js\r\nfunction HomePage() {\r\n  return &lt;div&gt;Welcome to Next.js!&lt;/div&gt;;\r\n}\r\n\r\nexport default HomePage;\r\n\r\n// getServerSideProps for server-side rendering\r\nfunction BlogPost({ post }) {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;{post.title}&lt;/h1&gt;\r\n      &lt;p&gt;{post.content}&lt;/p&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nexport async function getServerSideProps(context) {\r\n  const { id } = context.params;\r\n  \r\n  // Fetch data from API\r\n  const res = await fetch(`https://api.example.com/posts/${id}`);\r\n  const post = await res.json();\r\n  \r\n  return {\r\n    props: {\r\n      post,\r\n    },\r\n  };\r\n}\r\n\r\n// getStaticProps for static site generation\r\nfunction Blog({ posts }) {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Blog&lt;/h1&gt;\r\n      &lt;ul&gt;\r\n        {posts.map(post => (\r\n          &lt;li key={post.id}&gt;{post.title}&lt;/li&gt;\r\n        ))}\r\n      &lt;/ul&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\nexport async function getStaticProps() {\r\n  // Fetch data at build time\r\n  const res = await fetch(\'https://api.example.com/posts\');\r\n  const posts = await res.json();\r\n  \r\n  return {\r\n    props: {\r\n      posts,\r\n    },\r\n  };\r\n}\r\n\r\n// getStaticPaths for dynamic routes\r\nfunction Post({ post }) {\r\n  return &lt;div&gt;{post.title}&lt;/div&gt;;\r\n}\r\n\r\nexport async function getStaticPaths() {\r\n  // Fetch all post IDs at build time\r\n  const res = await fetch(\'https://api.example.com/posts\');\r\n  const posts = await res.json();\r\n  \r\n  // Get the paths we want to pre-render\r\n  const paths = posts.map(post => ({\r\n    params: { id: post.id.toString() },\r\n  }));\r\n  \r\n  return {\r\n    paths,\r\n    fallback: true, // false or \'blocking\'\r\n  };\r\n}\r\n\r\nexport async function getStaticProps({ params }) {\r\n  const res = await fetch(`https://api.example.com/posts/${params.id}`);\r\n  const post = await res.json();\r\n  \r\n  return {\r\n    props: {\r\n      post,\r\n    },\r\n  };\r\n}\r\n\r\n// API routes\r\n// pages/api/user.js\r\nexport default function handler(req, res) {\r\n  const { method } = req;\r\n  \r\n  switch (method) {\r\n    case \'GET\':\r\n      // Get user data\r\n      res.status(200).json({ name: \'John Doe\' });\r\n      break;\r\n    case \'POST\':\r\n      // Create user\r\n      res.status(201).json({ message: \'User created\' });\r\n      break;\r\n    default:\r\n      res.setHeader(\'Allow\', [\'GET\', \'POST\']);\r\n      res.status(405).end(`Method ${method} Not Allowed`);\r\n  }\r\n}\r\n\r\n// Dynamic imports for code splitting\r\nimport dynamic from \'next/dynamic\';\r\n\r\nconst DynamicComponent = dynamic(() => import(\'../components/hello\'));\r\n\r\nfunction HomePage() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;h1&gt;Welcome&lt;/h1&gt;\r\n      &lt;DynamicComponent /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Custom App component\r\n// pages/_app.js\r\nimport \'../styles/globals.css\';\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n  return &lt;Component {...pageProps} /&gt;;\r\n}\r\n\r\nexport default MyApp;\r\n\r\n// Custom Document component\r\n// pages/_document.js\r\nimport Document, { Html, Head, Main, NextScript } from \'next/document\';\r\n\r\nclass MyDocument extends Document {\r\n  render() {\r\n    return (\r\n      &lt;Html&gt;\r\n        &lt;Head&gt;\r\n          &lt;meta name=\"description\" content=\"Next.js SSR Example\" /&gt;\r\n        &lt;/Head&gt;\r\n        &lt;body&gt;\r\n          &lt;Main /&gt;\r\n          &lt;NextScript /&gt;\r\n        &lt;/body&gt;\r\n      &lt;/Html&gt;\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyDocument;\r\n\r\n// Image optimization\r\nimport Image from \'next/image\';\r\n\r\nfunction HomePage() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;Image\r\n        src=\"/hero.jpg\"\r\n        alt=\"Hero image\"\r\n        width={800}\r\n        height={600}\r\n        priority // For above-the-fold images\r\n      /&gt;\r\n    &lt;/div&gt;\r\n  );\r\n}\r\n\r\n// Middleware for authentication\r\n// middleware.js\r\nexport function middleware(req) {\r\n  const url = req.nextUrl;\r\n  \r\n  // If user is not authenticated, redirect to login\r\n  if (!req.cookies.authToken && url.pathname !== \'/login\') {\r\n    return NextResponse.redirect(new URL(\'/login\', req.url));\r\n  }\r\n  \r\n  return NextResponse.next();\r\n}</code></pre>\r\n</div>\r\n\r\n<h4>Next.js Rendering Strategies</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Strategy</th>\r\n        <th>When to Use</th>\r\n        <th>Implementation</th>\r\n        <th>Pros</th>\r\n        <th>Cons</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Static Site Generation (SSG)</td>\r\n        <td>Content that doesn\'t change often</td>\r\n        <td>getStaticProps</td>\r\n        <td>Fast load times, good for SEO, scalable</td>\r\n        <td>Content can become stale, requires rebuilds</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Server-Side Rendering (SSR)</td>\r\n        <td>Dynamic content that changes frequently</td>\r\n        <td>getServerSideProps</td>\r\n        <td>Always up-to-date, good for SEO</td>\r\n        <td>Slower than SSG, higher server load</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Client-Side Rendering (CSR)</td>\r\n        <td>Highly interactive content</td>\r\n        <td>Standard React components</td>\r\n        <td>Fast after initial load, highly interactive</td>\r\n        <td>Poor initial SEO, slower initial load</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Incremental Static Regeneration (ISR)</td>\r\n        <td>Content that changes periodically</td>\r\n        <td>getStaticProps with revalidate option</td>\r\n        <td>Combines benefits of SSG and SSR</td>\r\n        <td>Content can be slightly stale</td>\r\n    </tr>\r\n</table>\r\n\r\n<hr>\r\n<p>By following these lessons, you\'ll progress from React basics to advanced features like hooks, context, routing, state management, testing, performance optimization, and server-side rendering with Next.js. Keep practicing each example to build real React applications step by step.</p>\r\n\r\n<!-- Prism.js core + JSX language component -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-jsx.min.js\"></script>\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n    position: relative;\r\n    margin: 1em 0;\r\n    background: #1e1e1e;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n.code-container pre {\r\n    margin: 0;\r\n    padding: 1em;\r\n    overflow-x: auto;\r\n    font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n}\r\n.copy-btn {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background: #007acc;\r\n    border: none;\r\n    color: #fff;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n}\r\n.copy-btn:hover {\r\n    background: #005f99;\r\n}\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin: 1em 0;\r\n}\r\ntable th, table td {\r\n    padding: 8px;\r\n    text-align: left;\r\n    border: 1px solid #ddd;\r\n}\r\ntable th {\r\n    background-color: #f2f2f2;\r\n    font-weight: bold;\r\n}\r\n</style>\r\n<script>\r\nfunction copyCode(button) {\r\n    const code = button.nextElementSibling.innerText;\r\n    navigator.clipboard.writeText(code).then(() => {\r\n        button.innerText = \"Copied!\";\r\n        setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n    });\r\n}\r\n</script>', 'React Programming Lessons – Beginner to Advanced', '1757847346_React.png', 11, 1, 'published', '2025-09-14 10:08:11', '2025-09-14 10:55:46');
INSERT INTO `posts` (`id`, `title`, `content`, `excerpt`, `featured_image`, `category_id`, `author_id`, `status`, `created_at`, `updated_at`) VALUES
(12, 'MySQL Programming Lessons', '# MySQL Programming Lessons – Beginner to Advanced\r\n\r\n<p>Welcome to the MySQL programming lesson series! We\'ll learn MySQL step by step — starting from the basics and moving toward advanced concepts. Each topic includes code examples with syntax highlighting and a copy button for easy practice.</p>\r\n\r\n## MySQL Course Outline\r\n\r\n<ul>\r\n    <li>Introduction to MySQL and Relational Databases</li>\r\n    <li>Installing and Setting Up MySQL</li>\r\n    <li>Basic SQL Commands (SELECT, INSERT, UPDATE, DELETE)</li>\r\n    <li>Database and Table Management</li>\r\n    <li>Data Types and Constraints</li>\r\n    <li>Advanced SELECT Queries (WHERE, LIKE, BETWEEN)</li>\r\n    <li>Sorting and Limiting Results</li>\r\n    <li>Aggregate Functions and Grouping</li>\r\n    <li>JOINs (INNER, LEFT, RIGHT, FULL)</li>\r\n    <li>Subqueries</li>\r\n    <li>Indexes and Performance Optimization</li>\r\n    <li>Views</li>\r\n    <li>Stored Procedures</li>\r\n    <li>Triggers</li>\r\n    <li>User Management and Security</li>\r\n    <li>Backup and Recovery</li>\r\n    <li>Replication and High Availability</li>\r\n    <li>MySQL Performance Tuning</li>\r\n</ul>\r\n\r\n<!-- Prism.js stylesheet (keeps your existing dark theme) -->\r\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css\" rel=\"stylesheet\" />\r\n\r\n<h3>1. Introduction to MySQL and Relational Databases</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- What is MySQL?\r\n-- MySQL is an open-source relational database management system (RDBMS)\r\n-- It uses Structured Query Language (SQL) for managing and manipulating data\r\n\r\n-- Key Features of MySQL:\r\n-- - Open source and freely available\r\n-- - Cross-platform compatibility\r\n-- - High performance and scalability\r\n-- - Strong data security features\r\n-- - Comprehensive transaction support\r\n-- - Flexible and reliable\r\n\r\n-- Relational Database Concepts:\r\n-- Tables: Organized into rows and columns\r\n-- Rows: Individual records\r\n-- Columns: Attributes or fields\r\n-- Primary Key: Unique identifier for each row\r\n-- Foreign Key: References a primary key in another table\r\n-- Relationships: Connections between tables\r\n\r\n-- Example of a simple database schema:\r\n-- Database: e_commerce\r\n-- Tables: customers, products, orders, order_items\r\n\r\n-- Sample Table Structure:\r\nCREATE TABLE customers (\r\n    customer_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(50) NOT NULL,\r\n    last_name VARCHAR(50) NOT NULL,\r\n    email VARCHAR(100) UNIQUE NOT NULL,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);</code></pre>\r\n</div>\r\n\r\n<h4>MySQL vs. Other Database Systems</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Feature</th>\r\n        <th>MySQL</th>\r\n        <th>PostgreSQL</th>\r\n        <th>SQL Server</th>\r\n        <th>Oracle</th>\r\n    </tr>\r\n    <tr>\r\n        <td>License</td>\r\n        <td>Open Source (GPL)</td>\r\n        <td>Open Source</td>\r\n        <td>Commercial</td>\r\n        <td>Commercial</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Platform</td>\r\n        <td>Cross-platform</td>\r\n        <td>Cross-platform</td>\r\n        <td>Windows-centric</td>\r\n        <td>Cross-platform</td>\r\n    </tr>\r\n    <tr>\r\n        <td>ACID Compliance</td>\r\n        <td>Yes (with InnoDB)</td>\r\n        <td>Yes</td>\r\n        <td>Yes</td>\r\n        <td>Yes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Replication</td>\r\n        <td>Yes</td>\r\n        <td>Yes</td>\r\n        <td>Yes</td>\r\n        <td>Yes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>JSON Support</td>\r\n        <td>Yes (since 5.7)</td>\r\n        <td>Yes</td>\r\n        <td>Yes</td>\r\n        <td>Yes</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>2. Installing and Setting Up MySQL</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Installation Methods:\r\n\r\n-- 1. Using Package Managers:\r\n--    Ubuntu/Debian: sudo apt-get install mysql-server\r\n--    CentOS/RHEL: sudo yum install mysql-server\r\n--    macOS: brew install mysql\r\n\r\n-- 2. Using Official MySQL Installer:\r\n--    Download from https://dev.mysql.com/downloads/\r\n\r\n-- 3. Using Docker:\r\n--    docker run --name mysql-container -e MYSQL_ROOT_PASSWORD=password -d mysql:latest\r\n\r\n-- Basic Configuration:\r\n\r\n-- After installation, secure your MySQL installation:\r\n-- mysql_secure_installation\r\n\r\n-- This script will:\r\n-- - Set a password for root accounts\r\n-- - Remove anonymous users\r\n-- - Disallow remote root login\r\n-- - Remove test databases\r\n-- - Reload privilege tables\r\n\r\n-- Connecting to MySQL Server:\r\n-- Command line: mysql -u root -p\r\n-- GUI Tools: MySQL Workbench, phpMyAdmin, DBeaver\r\n\r\n-- Basic MySQL Commands:\r\n\r\n-- Show all databases:\r\nSHOW DATABASES;\r\n\r\n-- Create a new database:\r\nCREATE DATABASE my_database;\r\n\r\n-- Select a database to work with:\r\nUSE my_database;\r\n\r\n-- Show all tables in the current database:\r\nSHOW TABLES;\r\n\r\n-- Display MySQL server status:\r\nSTATUS;\r\n\r\n-- Display MySQL server variables:\r\nSHOW VARIABLES;\r\n\r\n-- Display MySQL server version:\r\nSELECT VERSION();\r\n\r\n-- Display current user:\r\nSELECT USER();\r\n\r\n-- Display current date and time:\r\nSELECT NOW();</code></pre>\r\n</div>\r\n\r\n<h4>MySQL Storage Engines</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Storage Engine</th>\r\n        <th>Description</th>\r\n        <th>Best For</th>\r\n        <th>Transactions</th>\r\n        <th>Foreign Keys</th>\r\n    </tr>\r\n    <tr>\r\n        <td>InnoDB</td>\r\n        <td>Default engine, ACID compliant, row-level locking</td>\r\n        <td>Transactional applications</td>\r\n        <td>Yes</td>\r\n        <td>Yes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>MyISAM</td>\r\n        <td>Table-level locking, high performance for read operations</td>\r\n        <td>Read-heavy applications</td>\r\n        <td>No</td>\r\n        <td>No</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Memory</td>\r\n        <td>Stores data in memory for fast access</td>\r\n        <td>Temporary data, lookup tables</td>\r\n        <td>No</td>\r\n        <td>No</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Archive</td>\r\n        <td>Optimized for high-speed insertion and compression</td>\r\n        <td>Archiving, logging</td>\r\n        <td>No</td>\r\n        <td>No</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CSV</td>\r\n        <td>Stores data in CSV format</td>\r\n        <td>Data exchange with spreadsheets</td>\r\n        <td>No</td>\r\n        <td>No</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>3. Basic SQL Commands (SELECT, INSERT, UPDATE, DELETE)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Let\'s create a sample table for our examples\r\nCREATE TABLE employees (\r\n    employee_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(50) NOT NULL,\r\n    last_name VARCHAR(50) NOT NULL,\r\n    email VARCHAR(100) UNIQUE NOT NULL,\r\n    department VARCHAR(50),\r\n    salary DECIMAL(10, 2),\r\n    hire_date DATE,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- INSERT: Adding new records to a table\r\n\r\n-- Insert a single row\r\nINSERT INTO employees (first_name, last_name, email, department, salary, hire_date)\r\nVALUES (\'John\', \'Doe\', \'john.doe@example.com\', \'Engineering\', 75000.00, \'2020-01-15\');\r\n\r\n-- Insert multiple rows\r\nINSERT INTO employees (first_name, last_name, email, department, salary, hire_date)\r\nVALUES \r\n    (\'Jane\', \'Smith\', \'jane.smith@example.com\', \'Marketing\', 65000.00, \'2019-05-20\'),\r\n    (\'Mike\', \'Johnson\', \'mike.johnson@example.com\', \'Engineering\', 85000.00, \'2018-11-10\'),\r\n    (\'Sarah\', \'Williams\', \'sarah.williams@example.com\', \'HR\', 60000.00, \'2021-03-05\');\r\n\r\n-- SELECT: Retrieving data from a table\r\n\r\n-- Select all columns and all rows\r\nSELECT * FROM employees;\r\n\r\n-- Select specific columns\r\nSELECT first_name, last_name, email FROM employees;\r\n\r\n-- Select with column aliases\r\nSELECT \r\n    first_name AS \'First Name\',\r\n    last_name AS \'Last Name\',\r\n    salary AS \'Annual Salary\'\r\nFROM employees;\r\n\r\n-- UPDATE: Modifying existing records\r\n\r\n-- Update a single row\r\nUPDATE employees \r\nSET salary = 80000.00 \r\nWHERE employee_id = 1;\r\n\r\n-- Update multiple columns\r\nUPDATE employees \r\nSET department = \'Management\', salary = 95000.00 \r\nWHERE employee_id = 3;\r\n\r\n-- Update multiple rows\r\nUPDATE employees \r\nSET salary = salary * 1.05 \r\nWHERE department = \'Engineering\';\r\n\r\n-- DELETE: Removing records from a table\r\n\r\n-- Delete a specific row\r\nDELETE FROM employees \r\nWHERE employee_id = 4;\r\n\r\n-- Delete multiple rows based on a condition\r\nDELETE FROM employees \r\nWHERE department = \'Temporary\';\r\n\r\n-- Delete all rows (truncate table is more efficient)\r\nDELETE FROM employees;\r\n\r\n-- TRUNCATE: Remove all rows quickly\r\nTRUNCATE TABLE employees;</code></pre>\r\n</div>\r\n\r\n<h4>Example Results</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Query</th>\r\n        <th>Result</th>\r\n    </tr>\r\n    <tr>\r\n        <td>SELECT * FROM employees;</td>\r\n        <td>\r\n            <table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\r\n                <tr>\r\n                    <th>employee_id</th>\r\n                    <th>first_name</th>\r\n                    <th>last_name</th>\r\n                    <th>email</th>\r\n                    <th>department</th>\r\n                    <th>salary</th>\r\n                    <th>hire_date</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>1</td>\r\n                    <td>John</td>\r\n                    <td>Doe</td>\r\n                    <td>john.doe@example.com</td>\r\n                    <td>Engineering</td>\r\n                    <td>75000.00</td>\r\n                    <td>2020-01-15</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>2</td>\r\n                    <td>Jane</td>\r\n                    <td>Smith</td>\r\n                    <td>jane.smith@example.com</td>\r\n                    <td>Marketing</td>\r\n                    <td>65000.00</td>\r\n                    <td>2019-05-20</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>3</td>\r\n                    <td>Mike</td>\r\n                    <td>Johnson</td>\r\n                    <td>mike.johnson@example.com</td>\r\n                    <td>Engineering</td>\r\n                    <td>85000.00</td>\r\n                    <td>2018-11-10</td>\r\n                </tr>\r\n            </table>\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td>SELECT first_name, last_name, salary FROM employees WHERE department = \'Engineering\';</td>\r\n        <td>\r\n            <table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\r\n                <tr>\r\n                    <th>first_name</th>\r\n                    <th>last_name</th>\r\n                    <th>salary</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>John</td>\r\n                    <td>Doe</td>\r\n                    <td>75000.00</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Mike</td>\r\n                    <td>Johnson</td>\r\n                    <td>85000.00</td>\r\n                </tr>\r\n            </table>\r\n        </td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>4. Database and Table Management</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Database Management\r\n\r\n-- Create a new database\r\nCREATE DATABASE company_db;\r\n\r\n-- Create a database with specific character set and collation\r\nCREATE DATABASE company_db \r\nCHARACTER SET utf8mb4 \r\nCOLLATE utf8mb4_unicode_ci;\r\n\r\n-- Show all databases\r\nSHOW DATABASES;\r\n\r\n-- Select a database to work with\r\nUSE company_db;\r\n\r\n-- Drop a database (deletes all tables and data)\r\nDROP DATABASE company_db;\r\n\r\n-- Table Management\r\n\r\n-- Create a new table\r\nCREATE TABLE departments (\r\n    department_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    department_name VARCHAR(50) NOT NULL,\r\n    location VARCHAR(100),\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Create a table with foreign key relationship\r\nCREATE TABLE employees (\r\n    employee_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(50) NOT NULL,\r\n    last_name VARCHAR(50) NOT NULL,\r\n    email VARCHAR(100) UNIQUE NOT NULL,\r\n    department_id INT,\r\n    salary DECIMAL(10, 2),\r\n    hire_date DATE,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    FOREIGN KEY (department_id) REFERENCES departments(department_id)\r\n);\r\n\r\n-- Show table structure\r\nDESCRIBE employees;\r\n-- or\r\nSHOW COLUMNS FROM employees;\r\n\r\n-- Show all tables in the current database\r\nSHOW TABLES;\r\n\r\n-- Rename a table\r\nRENAME TABLE employees TO staff;\r\n\r\n-- Add a new column to an existing table\r\nALTER TABLE staff\r\nADD COLUMN middle_name VARCHAR(50) AFTER first_name;\r\n\r\n-- Modify an existing column\r\nALTER TABLE staff\r\nMODIFY COLUMN middle_name VARCHAR(100);\r\n\r\n-- Drop a column from a table\r\nALTER TABLE staff\r\nDROP COLUMN middle_name;\r\n\r\n-- Rename a column\r\nALTER TABLE staff\r\nCHANGE COLUMN staff_name employee_name VARCHAR(100);\r\n\r\n-- Add a foreign key constraint\r\nALTER TABLE staff\r\nADD CONSTRAINT fk_department\r\nFOREIGN KEY (department_id) REFERENCES departments(department_id);\r\n\r\n-- Drop a foreign key constraint\r\nALTER TABLE staff\r\nDROP FOREIGN KEY fk_department;\r\n\r\n-- Add a primary key\r\nALTER TABLE staff\r\nADD PRIMARY KEY (employee_id);\r\n\r\n-- Drop a primary key\r\nALTER TABLE staff\r\nDROP PRIMARY KEY;\r\n\r\n-- Add a unique constraint\r\nALTER TABLE staff\r\nADD CONSTRAINT uc_email UNIQUE (email);\r\n\r\n-- Drop a unique constraint\r\nALTER TABLE staff\r\nDROP INDEX uc_email;\r\n\r\n-- Drop a table\r\nDROP TABLE staff;\r\n\r\n-- Create a temporary table\r\nCREATE TEMPORARY TABLE temp_employees AS\r\nSELECT * FROM employees WHERE department = \'Engineering\';\r\n\r\n-- Create a table with an index\r\nCREATE TABLE products (\r\n    product_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    product_name VARCHAR(100) NOT NULL,\r\n    price DECIMAL(10, 2),\r\n    category VARCHAR(50),\r\n    INDEX idx_category (category)\r\n);\r\n\r\n-- Create a table with a composite primary key\r\nCREATE TABLE order_items (\r\n    order_id INT,\r\n    product_id INT,\r\n    quantity INT,\r\n    price DECIMAL(10, 2),\r\n    PRIMARY KEY (order_id, product_id)\r\n);</code></pre>\r\n</div>\r\n\r\n<h4>MySQL Data Types</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Category</th>\r\n        <th>Data Type</th>\r\n        <th>Description</th>\r\n        <th>Storage</th>\r\n    </tr>\r\n    <tr>\r\n        <td rowspan=\"4\">Numeric</td>\r\n        <td>INT</td>\r\n        <td>Standard integer</td>\r\n        <td>4 bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DECIMAL(M,D)</td>\r\n        <td>Fixed-point number</td>\r\n        <td>Varies</td>\r\n    </tr>\r\n    <tr>\r\n        <td>FLOAT(M,D)</td>\r\n        <td>Floating-point number</td>\r\n        <td>4 bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DOUBLE(M,D)</td>\r\n        <td>Double-precision floating-point</td>\r\n        <td>8 bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td rowspan=\"3\">String</td>\r\n        <td>CHAR(M)</td>\r\n        <td>Fixed-length string</td>\r\n        <td>M bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>VARCHAR(M)</td>\r\n        <td>Variable-length string</td>\r\n        <td>L+1 bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>TEXT</td>\r\n        <td>Long text string</td>\r\n        <td>L+2 bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td rowspan=\"4\">Date/Time</td>\r\n        <td>DATE</td>\r\n        <td>Date in YYYY-MM-DD format</td>\r\n        <td>3 bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>TIME</td>\r\n        <td>Time in HH:MM:SS format</td>\r\n        <td>3 bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DATETIME</td>\r\n        <td>Date and time in YYYY-MM-DD HH:MM:SS format</td>\r\n        <td>8 bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>TIMESTAMP</td>\r\n        <td>Timestamp in YYYY-MM-DD HH:MM:SS format</td>\r\n        <td>4 bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td rowspan=\"2\">Binary</td>\r\n        <td>BINARY(M)</td>\r\n        <td>Fixed-length binary string</td>\r\n        <td>M bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>VARBINARY(M)</td>\r\n        <td>Variable-length binary string</td>\r\n        <td>L+1 bytes</td>\r\n    </tr>\r\n    <tr>\r\n        <td>JSON</td>\r\n        <td>JSON</td>\r\n        <td>JSON data type</td>\r\n        <td>Varies</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>5. Data Types and Constraints</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Working with Different Data Types\r\n\r\n-- Create a table with various data types\r\nCREATE TABLE product_inventory (\r\n    product_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    product_name VARCHAR(100) NOT NULL,\r\n    description TEXT,\r\n    price DECIMAL(10, 2) NOT NULL,\r\n    stock_quantity INT UNSIGNED DEFAULT 0,\r\n    weight FLOAT,\r\n    is_available BOOLEAN DEFAULT TRUE,\r\n    release_date DATE,\r\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\r\n    attributes JSON,\r\n    image BLOB\r\n);\r\n\r\n-- Constraints Examples\r\n\r\n-- NOT NULL Constraint\r\nCREATE TABLE customers (\r\n    customer_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(50) NOT NULL,\r\n    last_name VARCHAR(50) NOT NULL,\r\n    email VARCHAR(100) NOT NULL\r\n);\r\n\r\n-- UNIQUE Constraint\r\nCREATE TABLE users (\r\n    user_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    username VARCHAR(50) UNIQUE NOT NULL,\r\n    email VARCHAR(100) UNIQUE NOT NULL\r\n);\r\n\r\n-- PRIMARY KEY Constraint\r\nCREATE TABLE categories (\r\n    category_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    category_name VARCHAR(50) NOT NULL\r\n);\r\n\r\n-- Composite Primary Key\r\nCREATE TABLE order_items (\r\n    order_id INT,\r\n    product_id INT,\r\n    quantity INT NOT NULL,\r\n    price DECIMAL(10, 2) NOT NULL,\r\n    PRIMARY KEY (order_id, product_id)\r\n);\r\n\r\n-- FOREIGN KEY Constraint\r\nCREATE TABLE orders (\r\n    order_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    customer_id INT,\r\n    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,\r\n    total_amount DECIMAL(10, 2),\r\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\r\n);\r\n\r\n-- CHECK Constraint (MySQL 8.0+)\r\nCREATE TABLE employees (\r\n    employee_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(50) NOT NULL,\r\n    last_name VARCHAR(50) NOT NULL,\r\n    salary DECIMAL(10, 2),\r\n    CHECK (salary > 0)\r\n);\r\n\r\n-- DEFAULT Constraint\r\nCREATE TABLE products (\r\n    product_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    product_name VARCHAR(100) NOT NULL,\r\n    price DECIMAL(10, 2) DEFAULT 0.00,\r\n    in_stock BOOLEAN DEFAULT TRUE\r\n);\r\n\r\n-- ENUM Data Type\r\nCREATE TABLE customer_feedback (\r\n    feedback_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    customer_id INT,\r\n    rating ENUM(\'1\', \'2\', \'3\', \'4\', \'5\') NOT NULL,\r\n    comments TEXT,\r\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\r\n);\r\n\r\n-- SET Data Type\r\nCREATE TABLE user_permissions (\r\n    user_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    username VARCHAR(50) UNIQUE NOT NULL,\r\n    permissions SET(\'READ\', \'WRITE\', \'DELETE\', \'ADMIN\') NOT NULL\r\n);\r\n\r\n-- Working with JSON Data Type (MySQL 5.7+)\r\nCREATE TABLE product_attributes (\r\n    product_id INT PRIMARY KEY,\r\n    attributes JSON,\r\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\r\n);\r\n\r\n-- Inserting JSON data\r\nINSERT INTO product_attributes (product_id, attributes)\r\nVALUES (1, \'{\"color\": \"red\", \"size\": \"M\", \"material\": \"cotton\"}\');\r\n\r\n-- Querying JSON data\r\nSELECT \r\n    product_id,\r\n    JSON_EXTRACT(attributes, \'$.color\') AS color,\r\n    JSON_EXTRACT(attributes, \'$.size\') AS size\r\nFROM product_attributes;\r\n\r\n-- Updating JSON data\r\nUPDATE product_attributes\r\nSET attributes = JSON_SET(attributes, \'$.color\', \'blue\')\r\nWHERE product_id = 1;</code></pre>\r\n</div>\r\n\r\n<h4>MySQL Constraints</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Constraint</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>NOT NULL</td>\r\n        <td>Ensures a column cannot have NULL values</td>\r\n        <td>name VARCHAR(50) NOT NULL</td>\r\n    </tr>\r\n    <tr>\r\n        <td>UNIQUE</td>\r\n        <td>Ensures all values in a column are unique</td>\r\n        <td>email VARCHAR(100) UNIQUE</td>\r\n    </tr>\r\n    <tr>\r\n        <td>PRIMARY KEY</td>\r\n        <td>Uniquely identifies each record in a table</td>\r\n        <td>id INT PRIMARY KEY</td>\r\n    </tr>\r\n    <tr>\r\n        <td>FOREIGN KEY</td>\r\n        <td>Ensures referential integrity between tables</td>\r\n        <td>dept_id INT, FOREIGN KEY (dept_id) REFERENCES departments(id)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CHECK</td>\r\n        <td>Ensures values in a column satisfy a specific condition</td>\r\n        <td>price DECIMAL(10,2) CHECK (price > 0)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>DEFAULT</td>\r\n        <td>Sets a default value for a column</td>\r\n        <td>status VARCHAR(20) DEFAULT \'active\'</td>\r\n    </tr>\r\n    <tr>\r\n        <td>INDEX</td>\r\n        <td>Creates an index to improve query performance</td>\r\n        <td>INDEX idx_name (name)</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>6. Advanced SELECT Queries (WHERE, LIKE, BETWEEN)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- WHERE Clause: Filtering records\r\n\r\n-- Basic WHERE with numeric comparison\r\nSELECT * FROM employees \r\nWHERE salary > 70000;\r\n\r\n-- WHERE with string comparison\r\nSELECT * FROM employees \r\nWHERE department = \'Engineering\';\r\n\r\n-- WHERE with date comparison\r\nSELECT * FROM employees \r\nWHERE hire_date > \'2020-01-01\';\r\n\r\n-- WHERE with multiple conditions (AND)\r\nSELECT * FROM employees \r\nWHERE department = \'Engineering\' AND salary > 75000;\r\n\r\n-- WHERE with multiple conditions (OR)\r\nSELECT * FROM employees \r\nWHERE department = \'Engineering\' OR department = \'Marketing\';\r\n\r\n-- WHERE with combination of AND and OR\r\nSELECT * FROM employees \r\nWHERE (department = \'Engineering\' OR department = \'Marketing\') \r\nAND salary > 65000;\r\n\r\n-- WHERE with NOT\r\nSELECT * FROM employees \r\nWHERE NOT department = \'HR\';\r\n\r\n-- WHERE with IS NULL\r\nSELECT * FROM employees \r\nWHERE middle_name IS NULL;\r\n\r\n-- WHERE with IS NOT NULL\r\nSELECT * FROM employees \r\nWHERE middle_name IS NOT NULL;\r\n\r\n-- LIKE Operator: Pattern matching\r\n\r\n-- Match names starting with \'J\'\r\nSELECT * FROM employees \r\nWHERE first_name LIKE \'J%\';\r\n\r\n-- Match names ending with \'n\'\r\nSELECT * FROM employees \r\nWHERE first_name LIKE \'%n\';\r\n\r\n-- Match names containing \'oh\'\r\nSELECT * FROM employees \r\nWHERE first_name LIKE \'%oh%\';\r\n\r\n-- Match names with \'a\' as the second character\r\nSELECT * FROM employees \r\nWHERE first_name LIKE \'_a%\';\r\n\r\n-- Match names with exactly 4 characters\r\nSELECT * FROM employees \r\nWHERE first_name LIKE \'____\';\r\n\r\n-- Escape special characters\r\nSELECT * FROM products \r\nWHERE product_name LIKE \'%\\_%\' ESCAPE \'\\\';\r\n\r\n-- BETWEEN Operator: Range selection\r\n\r\n-- Select employees with salary between 60000 and 80000\r\nSELECT * FROM employees \r\nWHERE salary BETWEEN 60000 AND 80000;\r\n\r\n-- Select products with price between 10 and 50\r\nSELECT * FROM products \r\nWHERE price BETWEEN 10 AND 50;\r\n\r\n-- BETWEEN with dates\r\nSELECT * FROM employees \r\nWHERE hire_date BETWEEN \'2020-01-01\' AND \'2020-12-31\';\r\n\r\n-- NOT BETWEEN\r\nSELECT * FROM employees \r\nWHERE salary NOT BETWEEN 60000 AND 80000;\r\n\r\n-- IN Operator: Multiple value matching\r\n\r\n-- Select employees in specific departments\r\nSELECT * FROM employees \r\nWHERE department IN (\'Engineering\', \'Marketing\', \'Sales\');\r\n\r\n-- NOT IN\r\nSELECT * FROM employees \r\nWHERE department NOT IN (\'HR\', \'Finance\');\r\n\r\n-- IN with subquery\r\nSELECT * FROM employees \r\nWHERE department_id IN (\r\n    SELECT department_id FROM departments \r\n    WHERE location = \'New York\'\r\n);\r\n\r\n-- Conditional Logic with CASE\r\n\r\n-- Simple CASE expression\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary,\r\n    CASE \r\n        WHEN salary < 60000 THEN \'Low\'\r\n        WHEN salary BETWEEN 60000 AND 80000 THEN \'Medium\'\r\n        ELSE \'High\'\r\n    END AS salary_level\r\nFROM employees;\r\n\r\n-- Searched CASE expression\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    department,\r\n    salary,\r\n    CASE \r\n        WHEN department = \'Engineering\' AND salary > 80000 THEN \'Senior Engineer\'\r\n        WHEN department = \'Engineering\' THEN \'Engineer\'\r\n        WHEN department = \'Marketing\' AND salary > 70000 THEN \'Marketing Manager\'\r\n        WHEN department = \'Marketing\' THEN \'Marketing Specialist\'\r\n        ELSE \'Other\'\r\n    END AS job_level\r\nFROM employees;\r\n\r\n-- IF Function (MySQL-specific)\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    salary,\r\n    IF(salary > 70000, \'High Salary\', \'Standard Salary\') AS salary_category\r\nFROM employees;\r\n\r\n-- IFNULL Function\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    IFNULL(middle_name, \'N/A\') AS middle_name\r\nFROM employees;\r\n\r\n-- COALESCE Function (returns first non-NULL value)\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    COALESCE(middle_name, \'N/A\') AS middle_name\r\nFROM employees;</code></pre>\r\n</div>\r\n\r\n<h4>WHERE Clause Operators</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Operator</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>=</td>\r\n        <td>Equal to</td>\r\n        <td>WHERE salary = 50000</td>\r\n    </tr>\r\n    <tr>\r\n        <td>!= or &lt;&gt;</td>\r\n        <td>Not equal to</td>\r\n        <td>WHERE department != \'HR\'</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&gt;</td>\r\n        <td>Greater than</td>\r\n        <td>WHERE salary &gt; 60000</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;</td>\r\n        <td>Less than</td>\r\n        <td>WHERE hire_date &lt; \'2020-01-01\'</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&gt;=</td>\r\n        <td>Greater than or equal to</td>\r\n        <td>WHERE salary &gt;= 60000</td>\r\n    </tr>\r\n    <tr>\r\n        <td>&lt;=</td>\r\n        <td>Less than or equal to</td>\r\n        <td>WHERE hire_date &lt;= \'2020-12-31\'</td>\r\n    </tr>\r\n    <tr>\r\n        <td>BETWEEN</td>\r\n        <td>Between a range (inclusive)</td>\r\n        <td>WHERE salary BETWEEN 50000 AND 70000</td>\r\n    </tr>\r\n    <tr>\r\n        <td>IN</td>\r\n        <td>Match any value in a list</td>\r\n        <td>WHERE department IN (\'IT\', \'HR\', \'Finance\')</td>\r\n    </tr>\r\n    <tr>\r\n        <td>LIKE</td>\r\n        <td>Pattern matching with wildcards</td>\r\n        <td>WHERE first_name LIKE \'J%\'</td>\r\n    </tr>\r\n    <tr>\r\n        <td>IS NULL</td>\r\n        <td>Check for NULL values</td>\r\n        <td>WHERE middle_name IS NULL</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>7. Sorting and Limiting Results</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- ORDER BY Clause: Sorting query results\r\n\r\n-- Sort by a single column in ascending order (default)\r\nSELECT * FROM employees \r\nORDER BY last_name;\r\n\r\n-- Sort by a single column in descending order\r\nSELECT * FROM employees \r\nORDER BY salary DESC;\r\n\r\n-- Sort by multiple columns\r\nSELECT * FROM employees \r\nORDER BY department, last_name;\r\n\r\n-- Sort by multiple columns with different directions\r\nSELECT * FROM employees \r\nORDER BY department ASC, salary DESC;\r\n\r\n-- Sort by expression\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary,\r\n    salary * 1.10 AS salary_with_bonus\r\nFROM employees \r\nORDER BY salary_with_bonus DESC;\r\n\r\n-- Sort by column position (not recommended for readability)\r\nSELECT employee_id, first_name, last_name, salary \r\nFROM employees \r\nORDER BY 4 DESC; -- Sort by the 4th column (salary)\r\n\r\n-- Sort with NULLS FIRST or LAST\r\nSELECT * FROM employees \r\nORDER BY middle_name ASC NULLS LAST;\r\n\r\n-- LIMIT Clause: Restricting the number of rows returned\r\n\r\n-- Limit to 10 rows\r\nSELECT * FROM employees \r\nLIMIT 10;\r\n\r\n-- Limit with offset (for pagination)\r\n-- Get rows 11-20\r\nSELECT * FROM employees \r\nLIMIT 10 OFFSET 10;\r\n\r\n-- Alternative syntax for offset and limit\r\nSELECT * FROM employees \r\nLIMIT 10, 10; -- First 10 is offset, second is limit\r\n\r\n-- Combining ORDER BY and LIMIT\r\n-- Get the 5 highest-paid employees\r\nSELECT * FROM employees \r\nORDER BY salary DESC \r\nLIMIT 5;\r\n\r\n-- Get the 3 most recently hired employees\r\nSELECT * FROM employees \r\nORDER BY hire_date DESC \r\nLIMIT 3;\r\n\r\n-- DISTINCT: Eliminating duplicate rows\r\n\r\n-- Get unique department names\r\nSELECT DISTINCT department FROM employees;\r\n\r\n-- Get unique combinations of department and job title\r\nSELECT DISTINCT department, job_title FROM employees;\r\n\r\n-- DISTINCT with ORDER BY\r\nSELECT DISTINCT department FROM employees \r\nORDER BY department;\r\n\r\n-- DISTINCT with LIMIT\r\nSELECT DISTINCT department FROM employees \r\nLIMIT 3;\r\n\r\n-- Advanced Sorting with Functions\r\n\r\n-- Sort by the length of a name\r\nSELECT * FROM employees \r\nORDER BY LENGTH(last_name);\r\n\r\n-- Sort by day of the week\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    hire_date,\r\n    DAYNAME(hire_date) AS day_of_week\r\nFROM employees \r\nORDER BY FIELD(DAYNAME(hire_date), \'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\', \'Sunday\');\r\n\r\n-- Sort by a calculated value\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary,\r\n    (salary - 60000) AS difference_from_average\r\nFROM employees \r\nORDER BY difference_from_average DESC;\r\n\r\n-- Pagination Example\r\n-- Page 1 (first 10 records)\r\nSELECT * FROM employees \r\nORDER BY employee_id \r\nLIMIT 10;\r\n\r\n-- Page 2 (next 10 records)\r\nSELECT * FROM employees \r\nORDER BY employee_id \r\nLIMIT 10 OFFSET 10;\r\n\r\n-- Page 3 (next 10 records)\r\nSELECT * FROM employees \r\nORDER BY employee_id \r\nLIMIT 10 OFFSET 20;\r\n\r\n-- Dynamic pagination with variables\r\nSET @page_number = 2;\r\nSET @records_per_page = 10;\r\n\r\nSELECT * FROM employees \r\nORDER BY employee_id \r\nLIMIT @records_per_page OFFSET (@page_number - 1) * @records_per_page;\r\n\r\n-- Random sampling of data\r\n-- Get 5 random employees\r\nSELECT * FROM employees \r\nORDER BY RAND() \r\nLIMIT 5;\r\n\r\n-- Get a random employee\r\nSELECT * FROM employees \r\nORDER BY RAND() \r\nLIMIT 1;</code></pre>\r\n</div>\r\n\r\n<h4>Sorting and Limiting Examples</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Query</th>\r\n        <th>Result</th>\r\n    </tr>\r\n    <tr>\r\n        <td>SELECT * FROM employees ORDER BY salary DESC LIMIT 3;</td>\r\n        <td>\r\n            <table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\r\n                <tr>\r\n                    <th>employee_id</th>\r\n                    <th>first_name</th>\r\n                    <th>last_name</th>\r\n                    <th>department</th>\r\n                    <th>salary</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>3</td>\r\n                    <td>Mike</td>\r\n                    <td>Johnson</td>\r\n                    <td>Engineering</td>\r\n                    <td>85000.00</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>1</td>\r\n                    <td>John</td>\r\n                    <td>Doe</td>\r\n                    <td>Engineering</td>\r\n                    <td>75000.00</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>2</td>\r\n                    <td>Jane</td>\r\n                    <td>Smith</td>\r\n                    <td>Marketing</td>\r\n                    <td>65000.00</td>\r\n                </tr>\r\n            </table>\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td>SELECT DISTINCT department FROM employees ORDER BY department;</td>\r\n        <td>\r\n            <table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\r\n                <tr>\r\n                    <th>department</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>Engineering</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>HR</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Marketing</td>\r\n                </tr>\r\n            </table>\r\n        </td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>8. Aggregate Functions and Grouping</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Aggregate Functions\r\n\r\n-- COUNT(): Counting rows\r\n-- Count all rows\r\nSELECT COUNT(*) AS total_employees FROM employees;\r\n\r\n-- Count non-NULL values in a column\r\nSELECT COUNT(email) AS employees_with_email FROM employees;\r\n\r\n-- Count distinct values\r\nSELECT COUNT(DISTINCT department) AS unique_departments FROM employees;\r\n\r\n-- SUM(): Calculating the sum of values\r\nSELECT SUM(salary) AS total_payroll FROM employees;\r\n\r\n-- AVG(): Calculating the average value\r\nSELECT AVG(salary) AS average_salary FROM employees;\r\n\r\n-- MIN(): Finding the minimum value\r\nSELECT MIN(salary) AS lowest_salary FROM employees;\r\n\r\n-- MAX(): Finding the maximum value\r\nSELECT MAX(salary) AS highest_salary FROM employees;\r\n\r\n-- GROUP BY: Grouping rows that have the same values\r\n\r\n-- Group by department and count employees in each\r\nSELECT \r\n    department, \r\n    COUNT(*) AS employee_count\r\nFROM employees \r\nGROUP BY department;\r\n\r\n-- Group by department and calculate average salary\r\nSELECT \r\n    department, \r\n    AVG(salary) AS average_salary\r\nFROM employees \r\nGROUP BY department;\r\n\r\n-- Group by multiple columns\r\nSELECT \r\n    department, \r\n    job_title,\r\n    COUNT(*) AS employee_count,\r\n    AVG(salary) AS average_salary\r\nFROM employees \r\nGROUP BY department, job_title;\r\n\r\n-- HAVING: Filtering groups based on aggregate results\r\n\r\n-- Show departments with more than 5 employees\r\nSELECT \r\n    department, \r\n    COUNT(*) AS employee_count\r\nFROM employees \r\nGROUP BY department\r\nHAVING COUNT(*) > 5;\r\n\r\n-- Show departments with average salary above 70000\r\nSELECT \r\n    department, \r\n    AVG(salary) AS average_salary\r\nFROM employees \r\nGROUP BY department\r\nHAVING AVG(salary) > 70000;\r\n\r\n-- Combining WHERE and HAVING\r\n-- Show departments with average salary above 70000,\r\n-- but only include employees hired after 2019\r\nSELECT \r\n    department, \r\n    AVG(salary) AS average_salary,\r\n    COUNT(*) AS employee_count\r\nFROM employees \r\nWHERE hire_date > \'2019-01-01\'\r\nGROUP BY department\r\nHAVING AVG(salary) > 70000;\r\n\r\n-- Advanced Aggregate Functions\r\n\r\n-- STDDEV(): Standard deviation\r\nSELECT \r\n    department,\r\n    AVG(salary) AS average_salary,\r\n    STDDEV(salary) AS salary_stddev\r\nFROM employees \r\nGROUP BY department;\r\n\r\n-- VARIANCE(): Variance\r\nSELECT \r\n    department,\r\n    VARIANCE(salary) AS salary_variance\r\nFROM employees \r\nGROUP BY department;\r\n\r\n-- GROUP_CONCAT(): Concatenate values from a group (MySQL-specific)\r\nSELECT \r\n    department,\r\n    GROUP_CONCAT(first_name SEPARATOR \', \') AS employee_names\r\nFROM employees \r\nGROUP BY department;\r\n\r\n-- WITH ROLLUP: Generate subtotals and grand totals\r\nSELECT \r\n    department,\r\n    job_title,\r\n    COUNT(*) AS employee_count,\r\n    AVG(salary) AS average_salary\r\nFROM employees \r\nGROUP BY department, job_title WITH ROLLUP;\r\n\r\n-- WITH CUBE: Generate all possible subtotals (MySQL 8.0+)\r\nSELECT \r\n    department,\r\n    job_title,\r\n    COUNT(*) AS employee_count,\r\n    AVG(salary) AS average_salary\r\nFROM employees \r\nGROUP BY department, job_title WITH CUBE;\r\n\r\n-- Aggregate Functions with CASE\r\n\r\n-- Count employees by salary range\r\nSELECT \r\n    SUM(CASE WHEN salary < 60000 THEN 1 ELSE 0 END) AS low_salary,\r\n    SUM(CASE WHEN salary BETWEEN 60000 AND 80000 THEN 1 ELSE 0 END) AS medium_salary,\r\n    SUM(CASE WHEN salary > 80000 THEN 1 ELSE 0 END) AS high_salary\r\nFROM employees;\r\n\r\n-- Calculate percentage of total payroll by department\r\nSELECT \r\n    department,\r\n    SUM(salary) AS department_payroll,\r\n    (SUM(salary) / (SELECT SUM(salary) FROM employees)) * 100 AS payroll_percentage\r\nFROM employees \r\nGROUP BY department;\r\n\r\n-- Window Functions (MySQL 8.0+)\r\n\r\n-- Calculate running total of salaries\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary,\r\n    SUM(salary) OVER (ORDER BY employee_id) AS running_total\r\nFROM employees;\r\n\r\n-- Rank employees by salary within department\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    department,\r\n    salary,\r\n    RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS salary_rank\r\nFROM employees;</code></pre>\r\n</div>\r\n\r\n<h4>Aggregate Functions Examples</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Query</th>\r\n        <th>Result</th>\r\n    </tr>\r\n    <tr>\r\n        <td>SELECT department, COUNT(*) AS employee_count, AVG(salary) AS avg_salary FROM employees GROUP BY department;</td>\r\n        <td>\r\n            <table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\r\n                <tr>\r\n                    <th>department</th>\r\n                    <th>employee_count</th>\r\n                    <th>avg_salary</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>Engineering</td>\r\n                    <td>2</td>\r\n                    <td>80000.0000</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Marketing</td>\r\n                    <td>1</td>\r\n                    <td>65000.0000</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>HR</td>\r\n                    <td>1</td>\r\n                    <td>60000.0000</td>\r\n                </tr>\r\n            </table>\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <td>SELECT department, GROUP_CONCAT(first_name SEPARATOR \', \') AS employees FROM employees GROUP BY department;</td>\r\n        <td>\r\n            <table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\r\n                <tr>\r\n                    <th>department</th>\r\n                    <th>employees</th>\r\n                </tr>\r\n                <tr>\r\n                    <td>Engineering</td>\r\n                    <td>John,Mike</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Marketing</td>\r\n                    <td>Jane</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>HR</td>\r\n                    <td>Sarah</td>\r\n                </tr>\r\n            </table>\r\n        </td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>9. JOINs (INNER, LEFT, RIGHT, FULL)</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Creating sample tables for JOIN examples\r\nCREATE TABLE departments (\r\n    department_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    department_name VARCHAR(50) NOT NULL,\r\n    location VARCHAR(50)\r\n);\r\n\r\nINSERT INTO departments (department_name, location) VALUES\r\n(\'Engineering\', \'Building A\'),\r\n(\'Marketing\', \'Building B\'),\r\n(\'HR\', \'Building C\'),\r\n(\'Finance\', \'Building D\'),\r\n(\'Operations\', \'Building E\');\r\n\r\nCREATE TABLE employees (\r\n    employee_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(50) NOT NULL,\r\n    last_name VARCHAR(50) NOT NULL,\r\n    email VARCHAR(100) NOT NULL,\r\n    department_id INT,\r\n    salary DECIMAL(10, 2)\r\n);\r\n\r\nINSERT INTO employees (first_name, last_name, email, department_id, salary) VALUES\r\n(\'John\', \'Doe\', \'john.doe@example.com\', 1, 75000.00),\r\n(\'Jane\', \'Smith\', \'jane.smith@example.com\', 2, 65000.00),\r\n(\'Mike\', \'Johnson\', \'mike.johnson@example.com\', 1, 85000.00),\r\n(\'Sarah\', \'Williams\', \'sarah.williams@example.com\', 3, 60000.00),\r\n(\'David\', \'Brown\', \'david.brown@example.com\', NULL, 70000.00),\r\n(\'Lisa\', \'Jones\', \'lisa.jones@example.com\', 6, 80000.00);\r\n\r\n-- INNER JOIN: Returns only rows with matching values in both tables\r\n\r\n-- Basic INNER JOIN\r\nSELECT \r\n    e.employee_id,\r\n    e.first_name,\r\n    e.last_name,\r\n    d.department_name\r\nFROM employees e\r\nINNER JOIN departments d ON e.department_id = d.department_id;\r\n\r\n-- INNER JOIN with WHERE clause\r\nSELECT \r\n    e.employee_id,\r\n    e.first_name,\r\n    e.last_name,\r\n    d.department_name,\r\n    e.salary\r\nFROM employees e\r\nINNER JOIN departments d ON e.department_id = d.department_id\r\nWHERE e.salary > 70000;\r\n\r\n-- INNER JOIN with multiple tables\r\nCREATE TABLE projects (\r\n    project_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    project_name VARCHAR(100) NOT NULL,\r\n    department_id INT\r\n);\r\n\r\nINSERT INTO projects (project_name, department_id) VALUES\r\n(\'Website Redesign\', 1),\r\n(\'Mobile App\', 1),\r\n(\'Marketing Campaign\', 2),\r\n(\'HR System\', 3);\r\n\r\nCREATE TABLE employee_projects (\r\n    employee_id INT,\r\n    project_id INT,\r\n    hours_worked INT,\r\n    PRIMARY KEY (employee_id, project_id)\r\n);\r\n\r\nINSERT INTO employee_projects (employee_id, project_id, hours_worked) VALUES\r\n(1, 1, 40),\r\n(1, 2, 20),\r\n(2, 3, 35),\r\n(3, 1, 30),\r\n(3, 2, 50);\r\n\r\nSELECT \r\n    e.first_name,\r\n    e.last_name,\r\n    p.project_name,\r\n    ep.hours_worked\r\nFROM employees e\r\nINNER JOIN employee_projects ep ON e.employee_id = ep.employee_id\r\nINNER JOIN projects p ON ep.project_id = p.project_id;\r\n\r\n-- LEFT JOIN: Returns all rows from the left table and matched rows from the right table\r\n\r\n-- Basic LEFT JOIN\r\nSELECT \r\n    e.employee_id,\r\n    e.first_name,\r\n    e.last_name,\r\n    d.department_name\r\nFROM employees e\r\nLEFT JOIN departments d ON e.department_id = d.department_id;\r\n\r\n-- LEFT JOIN with WHERE to find employees without departments\r\nSELECT \r\n    e.employee_id,\r\n    e.first_name,\r\n    e.last_name\r\nFROM employees e\r\nLEFT JOIN departments d ON e.department_id = d.department_id\r\nWHERE d.department_id IS NULL;\r\n\r\n-- RIGHT JOIN: Returns all rows from the right table and matched rows from the left table\r\n\r\n-- Basic RIGHT JOIN\r\nSELECT \r\n    e.employee_id,\r\n    e.first_name,\r\n    e.last_name,\r\n    d.department_name\r\nFROM employees e\r\nRIGHT JOIN departments d ON e.department_id = d.department_id;\r\n\r\n-- RIGHT JOIN with WHERE to find departments without employees\r\nSELECT \r\n    d.department_id,\r\n    d.department_name\r\nFROM employees e\r\nRIGHT JOIN departments d ON e.department_id = d.department_id\r\nWHERE e.employee_id IS NULL;\r\n\r\n-- FULL OUTER JOIN: Returns all rows when there\'s a match in either table\r\n-- Note: MySQL doesn\'t directly support FULL OUTER JOIN, but we can simulate it\r\n\r\n-- Simulating FULL OUTER JOIN using UNION of LEFT and RIGHT JOIN\r\nSELECT \r\n    e.employee_id,\r\n    e.first_name,\r\n    e.last_name,\r\n    d.department_name\r\nFROM employees e\r\nLEFT JOIN departments d ON e.department_id = d.department_id\r\n\r\nUNION\r\n\r\nSELECT \r\n    e.employee_id,\r\n    e.first_name,\r\n    e.last_name,\r\n    d.department_name\r\nFROM employees e\r\nRIGHT JOIN departments d ON e.department_id = d.department_id;\r\n\r\n-- SELF JOIN: Joining a table to itself\r\n\r\n-- Create a table with hierarchical data\r\nCREATE TABLE employee_hierarchy (\r\n    employee_id INT PRIMARY KEY AUTO_INCREMENT,\r\n    first_name VARCHAR(50) NOT NULL,\r\n    last_name VARCHAR(50) NOT NULL,\r\n    manager_id INT,\r\n    FOREIGN KEY (manager_id) REFERENCES employee_hierarchy(employee_id)\r\n);\r\n\r\nINSERT INTO employee_hierarchy (first_name, last_name, manager_id) VALUES\r\n(\'John\', \'Smith\', NULL),  -- CEO\r\n(\'Jane\', \'Doe\', 1),       -- Reports to John\r\n(\'Mike\', \'Johnson\', 1),    -- Reports to John\r\n(\'Sarah\', \'Williams\', 2),  -- Reports to Jane\r\n(\'David\', \'Brown\', 2),     -- Reports to Jane\r\n(\'Lisa\', \'Jones\', 3);      -- Reports to Mike\r\n\r\n-- SELF JOIN to find employees and their managers\r\nSELECT \r\n    e.first_name AS employee,\r\n    m.first_name AS manager\r\nFROM employee_hierarchy e\r\nLEFT JOIN employee_hierarchy m ON e.manager_id = m.employee_id;\r\n\r\n-- CROSS JOIN: Returns the Cartesian product of tables\r\n\r\n-- Basic CROSS JOIN\r\nSELECT \r\n    e.first_name,\r\n    e.last_name,\r\n    d.department_name\r\nFROM employees e\r\nCROSS JOIN departments d;\r\n\r\n-- Practical use of CROSS JOIN (generating all possible combinations)\r\nSELECT \r\n    d1.department_name AS department1,\r\n    d2.department_name AS department2\r\nFROM departments d1\r\nCROSS JOIN departments d2\r\nWHERE d1.department_id < d2.department_id;\r\n\r\n-- JOIN with Aggregate Functions\r\n\r\n-- Count employees in each department\r\nSELECT \r\n    d.department_name,\r\n    COUNT(e.employee_id) AS employee_count\r\nFROM departments d\r\nLEFT JOIN employees e ON d.department_id = e.department_id\r\nGROUP BY d.department_id;\r\n\r\n-- Calculate average salary by department\r\nSELECT \r\n    d.department_name,\r\n    AVG(e.salary) AS average_salary\r\nFROM departments d\r\nLEFT JOIN employees e ON d.department_id = e.department_id\r\nGROUP BY d.department_name;\r\n\r\n-- Multiple JOINs with Aggregate Functions\r\n\r\n-- Find total hours worked by each employee on each project\r\nSELECT \r\n    e.first_name,\r\n    e.last_name,\r\n    p.project_name,\r\n    SUM(ep.hours_worked) AS total_hours\r\nFROM employees e\r\nINNER JOIN employee_projects ep ON e.employee_id = ep.employee_id\r\nINNER JOIN projects p ON ep.project_id = p.project_id\r\nGROUP BY e.employee_id, e.first_name, e.last_name, p.project_name\r\nORDER BY e.last_name, p.project_name;</code></pre>\r\n</div>\r\n\r\n<h4>JOIN Types Comparison</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>JOIN Type</th>\r\n        <th>Description</th>\r\n        <th>Venn Diagram</th>\r\n    </tr>\r\n    <tr>\r\n        <td>INNER JOIN</td>\r\n        <td>Returns only rows with matching values in both tables</td>\r\n        <td>Intersection of two circles</td>\r\n    </tr>\r\n    <tr>\r\n        <td>LEFT JOIN (LEFT OUTER JOIN)</td>\r\n        <td>Returns all rows from the left table and matched rows from the right table</td>\r\n        <td>Entire left circle plus intersection</td>\r\n    </tr>\r\n    <tr>\r\n        <td>RIGHT JOIN (RIGHT OUTER JOIN)</td>\r\n        <td>Returns all rows from the right table and matched rows from the left table</td>\r\n        <td>Entire right circle plus intersection</td>\r\n    </tr>\r\n    <tr>\r\n        <td>FULL OUTER JOIN</td>\r\n        <td>Returns all rows when there\'s a match in either table</td>\r\n        <td>Union of both circles</td>\r\n    </tr>\r\n    <tr>\r\n        <td>CROSS JOIN</td>\r\n        <td>Returns the Cartesian product of both tables (all possible combinations)</td>\r\n        <td>All combinations of elements from both sets</td>\r\n    </tr>\r\n    <tr>\r\n        <td>SELF JOIN</td>\r\n        <td>Joins a table to itself, typically for hierarchical data</td>\r\n        <td>N/A</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>10. Subqueries</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Subquery in SELECT clause\r\n\r\n-- Compare each employee\'s salary to the average salary\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary,\r\n    (SELECT AVG(salary) FROM employees) AS average_salary,\r\n    salary - (SELECT AVG(salary) FROM employees) AS difference_from_average\r\nFROM employees;\r\n\r\n-- Subquery in FROM clause (Derived Table)\r\n\r\n-- Find departments with average salary above company average\r\nSELECT \r\n    department_id,\r\n    department_name,\r\n    average_salary\r\nFROM (\r\n    SELECT \r\n        d.department_id,\r\n        d.department_name,\r\n        AVG(e.salary) AS average_salary\r\n    FROM departments d\r\n    LEFT JOIN employees e ON d.department_id = e.department_id\r\n    GROUP BY d.department_id, d.department_name\r\n) AS department_avg\r\nWHERE average_salary > (SELECT AVG(salary) FROM employees);\r\n\r\n-- Subquery in WHERE clause\r\n\r\n-- Find employees with salary above average\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary\r\nFROM employees\r\nWHERE salary > (SELECT AVG(salary) FROM employees);\r\n\r\n-- Subquery with IN operator\r\n-- Find employees who work on projects\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name\r\nFROM employees\r\nWHERE employee_id IN (\r\n    SELECT DISTINCT employee_id \r\n    FROM employee_projects\r\n);\r\n\r\n-- Subquery with NOT IN operator\r\n-- Find employees who don\'t work on any projects\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name\r\nFROM employees\r\nWHERE employee_id NOT IN (\r\n    SELECT DISTINCT employee_id \r\n    FROM employee_projects\r\n);\r\n\r\n-- Subquery with ANY operator\r\n-- Find employees who earn more than any employee in the HR department\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary\r\nFROM employees\r\nWHERE salary > ANY (\r\n    SELECT salary \r\n    FROM employees \r\n    WHERE department_id = (SELECT department_id FROM departments WHERE department_name = \'HR\')\r\n);\r\n\r\n-- Subquery with ALL operator\r\n-- Find employees who earn more than all employees in the HR department\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary\r\nFROM employees\r\nWHERE salary > ALL (\r\n    SELECT salary \r\n    FROM employees \r\n    WHERE department_id = (SELECT department_id FROM departments WHERE department_name = \'HR\')\r\n);\r\n\r\n-- Correlated Subquery\r\n-- Find employees who earn more than the average salary in their department\r\nSELECT \r\n    e.employee_id,\r\n    e.first_name,\r\n    e.last_name,\r\n    e.salary,\r\n    d.department_name\r\nFROM employees e\r\nJOIN departments d ON e.department_id = d.department_id\r\nWHERE e.salary > (\r\n    SELECT AVG(e2.salary) \r\n    FROM employees e2 \r\n    WHERE e2.department_id = e.department_id\r\n);\r\n\r\n-- EXISTS operator\r\n-- Find departments that have employees\r\nSELECT \r\n    d.department_id,\r\n    d.department_name\r\nFROM departments d\r\nWHERE EXISTS (\r\n    SELECT 1 \r\n    FROM employees e \r\n    WHERE e.department_id = d.department_id\r\n);\r\n\r\n-- NOT EXISTS operator\r\n-- Find departments that don\'t have any employees\r\nSELECT \r\n    d.department_id,\r\n    d.department_name\r\nFROM departments d\r\nWHERE NOT EXISTS (\r\n    SELECT 1 \r\n    FROM employees e \r\n    WHERE e.department_id = d.department_id\r\n);\r\n\r\n-- Subquery with INSERT statement\r\n-- Insert employees who earn more than 70000 into a premium_employees table\r\nCREATE TABLE premium_employees (\r\n    employee_id INT PRIMARY KEY,\r\n    first_name VARCHAR(50),\r\n    last_name VARCHAR(50),\r\n    salary DECIMAL(10, 2)\r\n);\r\n\r\nINSERT INTO premium_employees (employee_id, first_name, last_name, salary)\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary\r\nFROM employees\r\nWHERE salary > 70000;\r\n\r\n-- Subquery with UPDATE statement\r\n-- Give a 10% raise to employees who earn less than the average salary\r\nUPDATE employees\r\nSET salary = salary * 1.10\r\nWHERE salary < (SELECT AVG(salary) FROM employees);\r\n\r\n-- Subquery with DELETE statement\r\n-- Delete employees who don\'t work on any projects\r\nDELETE FROM employees\r\nWHERE NOT EXISTS (\r\n    SELECT 1 \r\n    FROM employee_projects ep \r\n    WHERE ep.employee_id = employees.employee_id\r\n);\r\n\r\n-- Nested Subqueries\r\n-- Find the highest-paid employee in each department\r\nSELECT \r\n    d.department_name,\r\n    e.first_name,\r\n    e.last_name,\r\n    e.salary\r\nFROM employees e\r\nJOIN departments d ON e.department_id = d.department_id\r\nWHERE e.salary = (\r\n    SELECT MAX(e2.salary)\r\n    FROM employees e2\r\n    WHERE e2.department_id = d.department_id\r\n);\r\n\r\n-- Subquery with GROUP BY\r\n-- Find departments where the average salary is higher than the company average\r\nSELECT \r\n    d.department_id,\r\n    d.department_name,\r\n    AVG(e.salary) AS avg_salary\r\nFROM departments d\r\nJOIN employees e ON d.department_id = e.department_id\r\nGROUP BY d.department_id, d.department_name\r\nHAVING AVG(e.salary) > (\r\n    SELECT AVG(salary) \r\n    FROM employees\r\n);</code></pre>\r\n</div>\r\n\r\n<h4>Subquery Types and Examples</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Subquery Type</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Scalar Subquery</td>\r\n        <td>Returns a single value (used in SELECT or WHERE)</td>\r\n        <td>SELECT * FROM employees WHERE salary > (SELECT AVG(salary) FROM employees)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Row Subquery</td>\r\n        <td>Returns a single row (used with comparison operators)</td>\r\n        <td>SELECT * FROM employees WHERE (salary, department_id) = (SELECT MAX(salary), department_id FROM employees WHERE department_id = 1)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Table Subquery</td>\r\n        <td>Returns multiple rows and columns (used in FROM clause)</td>\r\n        <td>SELECT * FROM (SELECT department_id, AVG(salary) AS avg_sal FROM employees GROUP BY department_id) AS dept_avg</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Correlated Subquery</td>\r\n        <td>References outer query columns (executes for each row)</td>\r\n        <td>SELECT * FROM employees e WHERE salary > (SELECT AVG(salary) FROM employees e2 WHERE e2.department_id = e.department_id)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>EXISTS/NOT EXISTS</td>\r\n        <td>Checks for existence of rows in subquery</td>\r\n        <td>SELECT * FROM departments d WHERE EXISTS (SELECT 1 FROM employees e WHERE e.department_id = d.department_id)</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>11. Indexes and Performance Optimization</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Creating Indexes\r\n\r\n-- Create a basic index on a single column\r\nCREATE INDEX idx_employee_last_name ON employees(last_name);\r\n\r\n-- Create a unique index\r\nCREATE UNIQUE INDEX idx_employee_email ON employees(email);\r\n\r\n-- Create a composite index on multiple columns\r\nCREATE INDEX idx_employee_department_salary ON employees(department_id, salary);\r\n\r\n-- Create an index with a specific name\r\nCREATE INDEX idx_emp_hire_date ON employees(hire_date);\r\n\r\n-- Viewing Indexes\r\n\r\n-- Show indexes for a specific table\r\nSHOW INDEX FROM employees;\r\n\r\n-- Show index information from the information schema\r\nSELECT \r\n    TABLE_NAME,\r\n    INDEX_NAME,\r\n    COLUMN_NAME,\r\n    SEQ_IN_INDEX,\r\n    NON_UNIQUE\r\nFROM INFORMATION_SCHEMA.STATISTICS\r\nWHERE TABLE_SCHEMA = \'your_database_name\' \r\nAND TABLE_NAME = \'employees\';\r\n\r\n-- Dropping Indexes\r\n\r\n-- Drop an index\r\nDROP INDEX idx_employee_last_name ON employees;\r\n\r\n-- Drop a primary key index\r\nALTER TABLE employees DROP PRIMARY KEY;\r\n\r\n-- Index Types\r\n\r\n-- B-Tree Index (default)\r\nCREATE INDEX idx_employee_name ON employees(last_name, first_name);\r\n\r\n-- Hash Index (only for exact matches)\r\nCREATE INDEX idx_employee_id_hash ON employees(employee_id) USING HASH;\r\n\r\n-- Full-Text Index (for text searching)\r\nCREATE FULLTEXT INDEX idx_employee_notes ON employees(notes);\r\n\r\n-- Spatial Index (for spatial data types)\r\nCREATE SPATIAL INDEX idx_location ON locations(coordinates);\r\n\r\n-- Index Optimization Strategies\r\n\r\n-- Covering Index (includes all columns needed for a query)\r\nCREATE INDEX idx_employee_covering ON employees(department_id, salary, first_name, last_name);\r\n\r\n-- Partial Index (index only a subset of data)\r\nCREATE INDEX idx_active_employees ON employees(employee_id) WHERE status = \'active\';\r\n\r\n-- Functional Index (MySQL 8.0+)\r\nCREATE INDEX idx_employee_name_upper ON employees((UPPER(last_name)));\r\n\r\n-- Analyzing Index Usage\r\n\r\n-- Explain a query to see how indexes are used\r\nEXPLAIN SELECT * FROM employees WHERE last_name = \'Smith\';\r\n\r\n-- More detailed explain format (MySQL 8.0+)\r\nEXPLAIN FORMAT=JSON SELECT * FROM employees WHERE last_name = \'Smith\';\r\n\r\n-- Analyze table to update index statistics\r\nANALYZE TABLE employees;\r\n\r\n-- Performance Optimization\r\n\r\n-- Optimize a specific table\r\nOPTIMIZE TABLE employees;\r\n\r\n-- Force index usage\r\nSELECT * FROM employees FORCE INDEX (idx_employee_last_name) WHERE last_name = \'Smith\';\r\n\r\n-- Ignore an index\r\nSELECT * FROM employees IGNORE INDEX (idx_employee_last_name) WHERE last_name = \'Smith\';\r\n\r\n-- Index Hints\r\n\r\n-- Use a specific index\r\nSELECT * FROM employees USE INDEX (idx_employee_last_name) WHERE last_name = \'Smith\';\r\n\r\n-- Use a specific index group\r\nSELECT * FROM employees USE INDEX (idx_employee_department_salary) WHERE department_id = 1 AND salary > 50000;\r\n\r\n-- Index and Query Optimization Examples\r\n\r\n-- Before optimization (slow query)\r\nSELECT * FROM employees WHERE UPPER(last_name) = \'SMITH\';\r\n\r\n-- After optimization (using functional index in MySQL 8.0+)\r\nCREATE INDEX idx_employee_name_upper ON employees((UPPER(last_name)));\r\nSELECT * FROM employees WHERE UPPER(last_name) = \'SMITH\';\r\n\r\n-- Before optimization (slow join)\r\nSELECT e.first_name, e.last_name, d.department_name\r\nFROM employees e\r\nJOIN departments d ON e.department_id = d.department_name\r\nWHERE d.location = \'New York\';\r\n\r\n-- After optimization (create index on foreign key)\r\nCREATE INDEX idx_employee_department_id ON employees(department_id);\r\n\r\n-- Before optimization (slow group by)\r\nSELECT department_id, COUNT(*) FROM employees GROUP BY department_id;\r\n\r\n-- After optimization (create index on group by column)\r\nCREATE INDEX idx_employee_department_id ON employees(department_id);\r\n\r\n-- Before optimization (slow order by)\r\nSELECT * FROM employees ORDER BY hire_date;\r\n\r\n-- After optimization (create index on order by column)\r\nCREATE INDEX idx_employee_hire_date ON employees(hire_date);\r\n\r\n-- Monitoring Index Performance\r\n\r\n-- Show index usage statistics\r\nSELECT \r\n    TABLE_NAME,\r\n    INDEX_NAME,\r\n    ROWS_READ,\r\n    ROWS_INDEXED\r\nFROM performance_schema.table_io_waits_summary_by_index_usage\r\nWHERE OBJECT_SCHEMA = \'your_database_name\'\r\nORDER BY ROWS_READ DESC;\r\n\r\n-- Show slow queries that might benefit from indexes\r\nSELECT \r\n    start_time,\r\n    query_time,\r\n    sql_text\r\nFROM mysql.slow_log\r\nWHERE sql_text NOT LIKE \'EXPLAIN%\'\r\nORDER BY query_time DESC\r\nLIMIT 10;\r\n\r\n-- Index Maintenance\r\n\r\n-- Rebuild an index (using ALTER TABLE)\r\nALTER TABLE employees ENGINE=InnoDB;\r\n\r\n-- Rebuild all indexes on a table\r\nALTER TABLE employees FORCE;\r\n\r\n-- Check for fragmented tables\r\nSELECT \r\n    TABLE_NAME,\r\n    ROUND(DATA_LENGTH/1024/1024) AS \"Size (MB)\",\r\n    ROUND(DATA_FREE/1024/1024) AS \"Free (MB)\",\r\n    ROUND((DATA_FREE/DATA_LENGTH)*100, 2) AS \"Fragmentation (%)\"\r\nFROM information_schema.TABLES\r\nWHERE TABLE_SCHEMA = \'your_database_name\'\r\nAND DATA_FREE > 0\r\nORDER BY Fragmentation DESC;\r\n\r\n-- Advanced Indexing Strategies\r\n\r\n-- Composite index for WHERE, ORDER BY, and GROUP BY\r\nCREATE INDEX idx_employee_complex ON employees(department_id, salary, last_name);\r\n\r\n-- Prefix index for long text columns\r\nCREATE INDEX idx_employee_name_prefix ON employees(last_name(20));\r\n\r\n-- Descending index (MySQL 8.0+)\r\nCREATE INDEX idx_employee_salary_desc ON employees(salary DESC);\r\n\r\n-- Invisible index (MySQL 8.0+)\r\nCREATE INDEX idx_test ON employees(email) INVISIBLE;\r\n\r\n-- Make an invisible index visible\r\nALTER TABLE employees ALTER INDEX idx_test VISIBLE;\r\n\r\n-- Generated column index (MySQL 5.7+)\r\nALTER TABLE employees\r\nADD COLUMN full_name VARCHAR(101) GENERATED ALWAYS AS (CONCAT(first_name, \' \', last_name)) STORED;\r\n\r\nCREATE INDEX idx_employee_full_name ON employees(full_name);</code></pre>\r\n</div>\r\n\r\n<h4>Index Types and Use Cases</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Index Type</th>\r\n        <th>Description</th>\r\n        <th>Best For</th>\r\n    </tr>\r\n    <tr>\r\n        <td>B-Tree</td>\r\n        <td>Default index type that maintains data in sorted order</td>\r\n        <td>Equality and range queries, most common use cases</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Hash</td>\r\n        <td>Uses a hash function to map values to locations</td>\r\n        <td>Equality queries only, not range queries</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Full-Text</td>\r\n        <td>Specialized index for text searching</td>\r\n        <td>Text columns with LIKE \'%word%\' queries</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Spatial</td>\r\n        <td>Index for spatial data types</td>\r\n        <td>Geographic data, spatial queries</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Composite</td>\r\n        <td>Index on multiple columns</td>\r\n        <td>Queries that filter or sort on multiple columns</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Partial</td>\r\n        <td>Index on a subset of data</td>\r\n        <td>Large tables with frequently accessed subsets</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Functional</td>\r\n        <td>Index on the result of a function</td>\r\n        <td>Queries with functions on columns (MySQL 8.0+)</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>12. Views</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Creating Views\r\n\r\n-- Simple view\r\nCREATE VIEW employee_view AS\r\nSELECT employee_id, first_name, last_name, email, department_id\r\nFROM employees;\r\n\r\n-- View with JOIN\r\nCREATE VIEW employee_department_view AS\r\nSELECT \r\n    e.employee_id,\r\n    e.first_name,\r\n    e.last_name,\r\n    e.email,\r\n    d.department_name,\r\n    d.location\r\nFROM employees e\r\nJOIN departments d ON e.department_id = d.department_id;\r\n\r\n-- View with aggregate functions\r\nCREATE VIEW department_summary_view AS\r\nSELECT \r\n    d.department_id,\r\n    d.department_name,\r\n    COUNT(e.employee_id) AS employee_count,\r\n    AVG(e.salary) AS average_salary,\r\n    MIN(e.salary) AS min_salary,\r\n    MAX(e.salary) AS max_salary\r\nFROM departments d\r\nLEFT JOIN employees e ON d.department_id = e.department_id\r\nGROUP BY d.department_id, d.department_name;\r\n\r\n-- View with subquery\r\nCREATE VIEW high_salary_employees AS\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary,\r\n    department_id\r\nFROM employees\r\nWHERE salary > (\r\n    SELECT AVG(salary) * 1.5 \r\n    FROM employees\r\n);\r\n\r\n-- View with calculated columns\r\nCREATE VIEW employee_annual_salary AS\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    salary,\r\n    salary * 12 AS annual_salary,\r\n    salary * 12 * 0.3 AS bonus_estimate\r\nFROM employees;\r\n\r\n-- Using Views\r\n\r\n-- Query a view like a table\r\nSELECT * FROM employee_view;\r\n\r\n-- Filter view results\r\nSELECT * FROM employee_department_view \r\nWHERE department_name = \'Engineering\';\r\n\r\n-- Join views with other tables\r\nSELECT \r\n    ev.employee_id,\r\n    ev.first_name,\r\n    ev.last_name,\r\n    p.project_name\r\nFROM employee_view ev\r\nJOIN employee_projects ep ON ev.employee_id = ep.employee_id\r\nJOIN projects p ON ep.project_id = p.project_id;\r\n\r\n-- Modifying Views\r\n\r\n-- Update a simple view\r\nUPDATE employee_view\r\nSET email = \'new.email@example.com\'\r\nWHERE employee_id = 1;\r\n\r\n-- Insert through a simple view\r\nINSERT INTO employee_view (first_name, last_name, email, department_id)\r\nVALUES (\'Robert\', \'Taylor\', \'robert.taylor@example.com\', 1);\r\n\r\n-- Delete through a simple view\r\nDELETE FROM employee_view\r\nWHERE employee_id = 6;\r\n\r\n-- Altering Views\r\n\r\n-- Replace an existing view (MySQL syntax)\r\nCREATE OR REPLACE VIEW employee_department_view AS\r\nSELECT \r\n    e.employee_id,\r\n    e.first_name,\r\n    e.last_name,\r\n    e.email,\r\n    d.department_name,\r\n    d.location,\r\n    e.salary\r\nFROM employees e\r\nJOIN departments d ON e.department_id = d.department_id;\r\n\r\n-- Drop a view\r\nDROP VIEW IF EXISTS employee_view;\r\n\r\n-- Complex Views with CHECK OPTION\r\n\r\n-- Create a view with CHECK OPTION to restrict inserts/updates\r\nCREATE VIEW engineering_employees AS\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    email,\r\n    salary\r\nFROM employees\r\nWHERE department_id = 1\r\nWITH CHECK OPTION;\r\n\r\n-- Attempt to update a row that would make it disappear from the view\r\n-- This will fail because of CHECK OPTION\r\nUPDATE engineering_employees\r\nSET department_id = 2\r\nWHERE employee_id = 1;\r\n\r\n-- Updatable vs. Non-Updatable Views\r\n\r\n-- Updatable view criteria:\r\n-- 1. Contains only one table in the FROM clause\r\n-- 2. Does not contain GROUP BY, HAVING, or aggregate functions\r\n-- 3. Does not contain DISTINCT, UNION, or UNION ALL\r\n-- 4. Does not contain certain subqueries in the SELECT list\r\n\r\n-- Example of a non-updatable view (contains aggregate functions)\r\nCREATE VIEW department_salary_view AS\r\nSELECT \r\n    department_id,\r\n    AVG(salary) AS avg_salary\r\nFROM employees\r\nGROUP BY department_id;\r\n\r\n-- Attempting to update this view will fail\r\nUPDATE department_salary_view\r\nSET avg_salary = 75000\r\nWHERE department_id = 1;\r\n\r\n-- Materialized Views (Simulation in MySQL)\r\n\r\n-- MySQL doesn\'t have native materialized views, but we can simulate them\r\n-- Create a table to store the materialized view results\r\nCREATE TABLE mv_department_summary (\r\n    department_id INT PRIMARY KEY,\r\n    department_name VARCHAR(50),\r\n    employee_count INT,\r\n    average_salary DECIMAL(10, 2),\r\n    last_updated TIMESTAMP\r\n);\r\n\r\n-- Create a stored procedure to refresh the materialized view\r\nDELIMITER //\r\nCREATE PROCEDURE refresh_mv_department_summary()\r\nBEGIN\r\n    -- Clear the materialized view table\r\n    TRUNCATE TABLE mv_department_summary;\r\n    \r\n    -- Insert fresh data\r\n    INSERT INTO mv_department_summary\r\n    SELECT \r\n        d.department_id,\r\n        d.department_name,\r\n        COUNT(e.employee_id) AS employee_count,\r\n        AVG(e.salary) AS average_salary,\r\n        NOW() AS last_updated\r\n    FROM departments d\r\n    LEFT JOIN employees e ON d.department_id = e.department_id\r\n    GROUP BY d.department_id, d.department_name;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Refresh the materialized view\r\nCALL refresh_mv_department_summary();\r\n\r\n-- Query the materialized view\r\nSELECT * FROM mv_department_summary;\r\n\r\n-- View Information\r\n\r\n-- Show view definition\r\nSHOW CREATE VIEW employee_department_view;\r\n\r\n-- List all views in a database\r\nSELECT \r\n    TABLE_NAME,\r\n    VIEW_DEFINITION\r\nFROM INFORMATION_SCHEMA.VIEWS\r\nWHERE TABLE_SCHEMA = \'your_database_name\';\r\n\r\n-- Advanced View Examples\r\n\r\n-- Recursive view (MySQL 8.0+ with Common Table Expressions)\r\nWITH RECURSIVE employee_hierarchy AS (\r\n    -- Base case: top-level employees (no manager)\r\n    SELECT \r\n        employee_id,\r\n        first_name,\r\n        last_name,\r\n        manager_id,\r\n        1 AS level\r\n    FROM employee_hierarchy_table\r\n    WHERE manager_id IS NULL\r\n    \r\n    UNION ALL\r\n    \r\n    -- Recursive case: employees with managers\r\n    SELECT \r\n        e.employee_id,\r\n        e.first_name,\r\n        e.last_name,\r\n        e.manager_id,\r\n        eh.level + 1\r\n    FROM employee_hierarchy_table e\r\n    JOIN employee_hierarchy eh ON e.manager_id = eh.employee_id\r\n)\r\nSELECT * FROM employee_hierarchy;\r\n\r\n-- View with window functions (MySQL 8.0+)\r\nCREATE VIEW employee_ranking AS\r\nSELECT \r\n    employee_id,\r\n    first_name,\r\n    last_name,\r\n    department_id,\r\n    salary,\r\n    RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank\r\nFROM employees;</code></pre>\r\n</div>\r\n\r\n<h4>View Types and Characteristics</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>View Type</th>\r\n        <th>Description</th>\r\n        <th>Updatable</th>\r\n        <th>Characteristics</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Simple View</td>\r\n        <td>Based on a single table with no aggregations or joins</td>\r\n        <td>Yes</td>\r\n        <td>Can be updated, inserted, and deleted</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Complex View</td>\r\n        <td>Contains joins, aggregations, or subqueries</td>\r\n        <td>No</td>\r\n        <td>Read-only, cannot be directly modified</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Materialized View</td>\r\n        <td>Physical copy of the query result stored on disk</td>\r\n        <td>No</td>\r\n        <td>Improves performance, needs refreshing</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Indexed View</td>\r\n        <td>View with a unique clustered index (SQL Server)</td>\r\n        <td>Yes</td>\r\n        <td>Improves query performance, uses storage</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Partitioned View</td>\r\n        <td>Combines data from multiple tables (horizontal partitioning)</td>\r\n        <td>Varies</td>\r\n        <td>Improves manageability of large datasets</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>13. Stored Procedures</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Creating a Basic Stored Procedure\r\n\r\nDELIMITER //\r\n\r\nCREATE PROCEDURE GetAllEmployees()\r\nBEGIN\r\n    SELECT * FROM employees;\r\nEND //\r\n\r\nDELIMITER ;\r\n\r\n-- Calling the stored procedure\r\nCALL GetAllEmployees();\r\n\r\n-- Stored Procedure with Parameters\r\n\r\nDELIMITER //\r\nCREATE PROCEDURE GetEmployeesByDepartment(IN dept_id INT)\r\nBEGIN\r\n    SELECT * FROM employees WHERE department_id = dept_id;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Calling with a parameter\r\nCALL GetEmployeesByDepartment(1);\r\n\r\n-- Stored Procedure with Multiple Parameters\r\n\r\nDELIMITER //\r\nCREATE PROCEDURE AddEmployee(\r\n    IN emp_first_name VARCHAR(50),\r\n    IN emp_last_name VARCHAR(50),\r\n    IN emp_email VARCHAR(100),\r\n    IN emp_department_id INT,\r\n    IN emp_salary DECIMAL(10, 2)\r\n)\r\nBEGIN\r\n    INSERT INTO employees (first_name, last_name, email, department_id, salary)\r\n    VALUES (emp_first_name, emp_last_name, emp_email, emp_department_id, emp_salary);\r\n    \r\n    SELECT LAST_INSERT_ID() AS new_employee_id;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Calling with multiple parameters\r\nCALL AddEmployee(\'Robert\', \'Taylor\', \'robert.taylor@example.com\', 1, 75000.00);\r\n\r\n-- Stored Procedure with OUT Parameters\r\n\r\nDELIMITER //\r\nCREATE PROCEDURE GetEmployeeCountByDepartment(\r\n    IN dept_id INT,\r\n    OUT emp_count INT\r\n)\r\nBEGIN\r\n    SELECT COUNT(*) INTO emp_count\r\n    FROM employees\r\n    WHERE department_id = dept_id;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Calling with OUT parameter\r\nCALL GetEmployeeCountByDepartment(1, @count);\r\nSELECT @count AS employee_count;\r\n\r\n-- Stored Procedure with INOUT Parameters\r\n\r\nDELIMITER //\r\nCREATE PROCEDURE IncrementSalary(\r\n    INOUT emp_salary DECIMAL(10, 2),\r\n    IN increment_percent DECIMAL(5, 2)\r\n)\r\nBEGIN\r\n    SET emp_salary = emp_salary * (1 + increment_percent / 100);\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Calling with INOUT parameter\r\nSET @salary = 50000.00;\r\nCALL IncrementSalary(@salary, 10.00);\r\nSELECT @salary AS new_salary;\r\n\r\n-- Stored Procedure with Conditional Logic\r\n\r\nDELIMITER //\r\nCREATE PROCEDURE AdjustSalary(\r\n    IN emp_id INT,\r\n    IN adjustment DECIMAL(10, 2)\r\n)\r\nBEGIN\r\n    DECLARE current_salary DECIMAL(10, 2);\r\n    \r\n    -- Get current salary\r\n    SELECT salary INTO current_salary\r\n    FROM employees\r\n    WHERE employee_id = emp_id;\r\n    \r\n    -- Check if employee exists\r\n    IF current_salary IS NULL THEN\r\n        SELECT \'Employee not found\' AS result;\r\n    ELSE\r\n        -- Apply adjustment\r\n        UPDATE employees\r\n        SET salary = salary + adjustment\r\n        WHERE employee_id = emp_id;\r\n        \r\n        SELECT CONCAT(\'Salary adjusted by \', adjustment) AS result;\r\n    END IF;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Calling with conditional logic\r\nCALL AdjustSalary(1, 5000.00);\r\n\r\n-- Stored Procedure with Loops\r\n\r\nDELIMITER //\r\nCREATE PROCEDURE GiveDepartmentRaise(\r\n    IN dept_id INT,\r\n    IN raise_percent DECIMAL(5, 2)\r\n)\r\nBEGIN\r\n    DECLARE done INT DEFAULT FALSE;\r\n    DECLARE emp_id INT;\r\n    DECLARE emp_cursor CURSOR FOR \r\n        SELECT employee_id FROM employees WHERE department_id = dept_id;\r\n    \r\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;\r\n    \r\n    OPEN emp_cursor;\r\n    \r\n    read_loop: LOOP\r\n        FETCH emp_cursor INTO emp_id;\r\n        IF done THEN\r\n            LEAVE read_loop;\r\n        END IF;\r\n        \r\n        -- Update each employee\'s salary\r\n        UPDATE employees\r\n        SET salary = salary * (1 + raise_percent / 100)\r\n        WHERE employee_id = emp_id;\r\n    END LOOP;\r\n    \r\n    CLOSE emp_cursor;\r\n    \r\n    SELECT CONCAT(\'Gave \', raise_percent, \'% raise to department \', dept_id) AS result;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Calling with loop\r\nCALL GiveDepartmentRaise(1, 5.00);\r\n\r\n-- Stored Procedure with Error Handling\r\n\r\nDELIMITER //\r\nCREATE PROCEDURE SafeDeleteEmployee(\r\n    IN emp_id INT\r\n)\r\nBEGIN\r\n    DECLARE EXIT HANDLER FOR SQLEXCEPTION\r\n    BEGIN\r\n        ROLLBACK;\r\n        SELECT \'Error deleting employee\' AS result;\r\n    END;\r\n    \r\n    START TRANSACTION;\r\n    \r\n    -- Delete from employee_projects first (foreign key constraint)\r\n    DELETE FROM employee_projects WHERE employee_id = emp_id;\r\n    \r\n    -- Then delete the employee\r\n    DELETE FROM employees WHERE employee_id = emp_id;\r\n    \r\n    COMMIT;\r\n    \r\n    SELECT \'Employee deleted successfully\' AS result;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Calling with error handling\r\nCALL SafeDeleteEmployee(6);\r\n\r\n-- Stored Procedure with Dynamic SQL\r\n\r\nDELIMITER //\r\nCREATE PROCEDURE DynamicSearch(\r\n    IN search_column VARCHAR(50),\r\n    IN search_value VARCHAR(100)\r\n)\r\nBEGIN\r\n    SET @sql = CONCAT(\'SELECT * FROM employees WHERE \', search_column, \' = \'\'\', search_value, \'\'\'\');\r\n    \r\n    PREPARE stmt FROM @sql;\r\n    EXECUTE stmt;\r\n    DEALLOCATE PREPARE stmt;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Calling with dynamic SQL\r\nCALL DynamicSearch(\'last_name\', \'Smith\');\r\n\r\n-- Modifying Stored Procedures\r\n\r\n-- Drop a stored procedure\r\nDROP PROCEDURE IF EXISTS GetAllEmployees;\r\n\r\n-- Alter a stored procedure (MySQL doesn\'t support ALTER PROCEDURE directly)\r\n-- You need to drop and recreate it with the new definition\r\n\r\n-- Stored Procedure Information\r\n\r\n-- Show stored procedure definition\r\nSHOW CREATE PROCEDURE GetEmployeesByDepartment;\r\n\r\n-- List all stored procedures in a database\r\nSELECT \r\n    ROUTINE_NAME,\r\n    ROUTINE_TYPE\r\nFROM INFORMATION_SCHEMA.ROUTINES\r\nWHERE ROUTINE_SCHEMA = \'your_database_name\'\r\nAND ROUTINE_TYPE = \'PROCEDURE\';\r\n\r\n-- Advanced Stored Procedure Examples\r\n\r\n-- Stored Procedure with Temporary Tables\r\nDELIMITER //\r\nCREATE PROCEDURE GenerateDepartmentReport()\r\nBEGIN\r\n    -- Create a temporary table for the report\r\n    CREATE TEMPORARY TABLE temp_department_report (\r\n        department_id INT,\r\n        department_name VARCHAR(50),\r\n        employee_count INT,\r\n        average_salary DECIMAL(10, 2),\r\n        total_payroll DECIMAL(10, 2)\r\n    );\r\n    \r\n    -- Populate the temporary table\r\n    INSERT INTO temp_department_report\r\n    SELECT \r\n        d.department_id,\r\n        d.department_name,\r\n        COUNT(e.employee_id) AS employee_count,\r\n        AVG(e.salary) AS average_salary,\r\n        SUM(e.salary) AS total_payroll\r\n    FROM departments d\r\n    LEFT JOIN employees e ON d.department_id = e.department_id\r\n    GROUP BY d.department_id, d.department_name;\r\n    \r\n    -- Return the report\r\n    SELECT * FROM temp_department_report ORDER BY department_name;\r\n    \r\n    -- The temporary table will be automatically dropped when the session ends\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Calling the report procedure\r\nCALL GenerateDepartmentReport();\r\n\r\n-- Stored Procedure with Cursors for Complex Processing\r\nDELIMITER //\r\nCREATE PROCEDURE ProcessEmployeeSalaries()\r\nBEGIN\r\n    DECLARE done INT DEFAULT FALSE;\r\n    DECLARE emp_id INT;\r\n    DECLARE emp_salary DECIMAL(10, 2);\r\n    DECLARE new_salary DECIMAL(10, 2);\r\n    \r\n    -- Cursor for all employees\r\n    DECLARE emp_cursor CURSOR FOR \r\n        SELECT employee_id, salary FROM employees;\r\n    \r\n    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;\r\n    \r\n    -- Create a temporary table to store results\r\n    CREATE TEMPORARY TABLE temp_salary_updates (\r\n        employee_id INT,\r\n        old_salary DECIMAL(10, 2),\r\n        new_salary DECIMAL(10, 2),\r\n        update_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n    );\r\n    \r\n    OPEN emp_cursor;\r\n    \r\n    salary_loop: LOOP\r\n        FETCH emp_cursor INTO emp_id, emp_salary;\r\n        IF done THEN\r\n            LEAVE salary_loop;\r\n        END IF;\r\n        \r\n        -- Calculate new salary based on business rules\r\n        IF emp_salary < 50000 THEN\r\n            SET new_salary = emp_salary * 1.10; -- 10% raise\r\n        ELSEIF emp_salary BETWEEN 50000 AND 75000 THEN\r\n            SET new_salary = emp_salary * 1.05; -- 5% raise\r\n        ELSE\r\n            SET new_salary = emp_salary * 1.03; -- 3% raise\r\n        END IF;\r\n        \r\n        -- Update the employee\'s salary\r\n        UPDATE employees\r\n        SET salary = new_salary\r\n        WHERE employee_id = emp_id;\r\n        \r\n        -- Log the change\r\n        INSERT INTO temp_salary_updates (employee_id, old_salary, new_salary)\r\n        VALUES (emp_id, emp_salary, new_salary);\r\n    END LOOP;\r\n    \r\n    CLOSE emp_cursor;\r\n    \r\n    -- Return the log of changes\r\n    SELECT * FROM temp_salary_updates;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Calling the salary processing procedure\r\nCALL ProcessEmployeeSalaries();</code></pre>\r\n</div>\r\n\r\n<h4>Stored Procedure Components</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Component</th>\r\n        <th>Description</th>\r\n        <th>Example</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Parameters</td>\r\n        <td>Input, output, or input-output values</td>\r\n        <td>IN dept_id INT, OUT emp_count INT</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Variables</td>\r\n        <td>Local variables for storing intermediate results</td>\r\n        <td>DECLARE current_salary DECIMAL(10,2);</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Conditional Logic</td>\r\n        <td>IF-THEN-ELSE statements for decision making</td>\r\n        <td>IF salary > 50000 THEN SET level = \'High\'; END IF;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Loops</td>\r\n        <td>Iterative processing with WHILE, REPEAT, or LOOP</td>\r\n        <td>WHILE counter < 10 DO ... END WHILE;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Cursors</td>\r\n        <td>For row-by-row processing of query results</td>\r\n        <td>DECLARE emp_cursor CURSOR FOR SELECT * FROM employees;</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Error Handling</td>\r\n        <td>Handlers for exceptions and errors</td>\r\n        <td>DECLARE CONTINUE HANDLER FOR SQLEXCEPTION ...</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Dynamic SQL</td>\r\n        <td>Constructing and executing SQL statements at runtime</td>\r\n        <td>PREPARE stmt FROM @sql; EXECUTE stmt;</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>14. Triggers</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Creating a Basic Trigger\r\n\r\n-- Create a table to log employee changes\r\nCREATE TABLE employee_audit (\r\n    audit_id INT AUTO_INCREMENT PRIMARY KEY,\r\n    employee_id INT,\r\n    action_type VARCHAR(10),\r\n    action_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    old_salary DECIMAL(10, 2),\r\n    new_salary DECIMAL(10, 2),\r\n    changed_by VARCHAR(50)\r\n);\r\n\r\n-- BEFORE INSERT Trigger\r\nDELIMITER //\r\nCREATE TRIGGER before_employee_insert\r\nBEFORE INSERT ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    -- Set the hire_date to current date if not provided\r\n    IF NEW.hire_date IS NULL THEN\r\n        SET NEW.hire_date = CURDATE();\r\n    END IF;\r\n    \r\n    -- Validate salary is positive\r\n    IF NEW.salary <= 0 THEN\r\n        SIGNAL SQLSTATE \'45000\' \r\n        SET MESSAGE_TEXT = \'Salary must be positive\';\r\n    END IF;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- AFTER INSERT Trigger\r\nDELIMITER //\r\nCREATE TRIGGER after_employee_insert\r\nAFTER INSERT ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    -- Log the new employee creation\r\n    INSERT INTO employee_audit (employee_id, action_type, new_salary)\r\n    VALUES (NEW.employee_id, \'INSERT\', NEW.salary);\r\nEND //\r\nDELIMITER ;\r\n\r\n-- BEFORE UPDATE Trigger\r\nDELIMITER //\r\nCREATE TRIGGER before_employee_update\r\nBEFORE UPDATE ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    -- Check if salary is being decreased\r\n    IF NEW.salary < OLD.salary THEN\r\n        -- Log the salary decrease\r\n        INSERT INTO employee_audit (employee_id, action_type, old_salary, new_salary)\r\n        VALUES (NEW.employee_id, \'UPDATE\', OLD.salary, NEW.salary);\r\n    END IF;\r\n    \r\n    -- Prevent changing employee_id\r\n    IF NEW.employee_id <> OLD.employee_id THEN\r\n        SIGNAL SQLSTATE \'45000\' \r\n        SET MESSAGE_TEXT = \'Cannot change employee_id\';\r\n    END IF;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- AFTER UPDATE Trigger\r\nDELIMITER //\r\nCREATE TRIGGER after_employee_update\r\nAFTER UPDATE ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    -- Log any department changes\r\n    IF NEW.department_id <> OLD.department_id THEN\r\n        INSERT INTO employee_audit (employee_id, action_type)\r\n        VALUES (NEW.employee_id, \'DEPT_CHANGE\');\r\n    END IF;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- BEFORE DELETE Trigger\r\nDELIMITER //\r\nCREATE TRIGGER before_employee_delete\r\nBEFORE DELETE ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    -- Check if employee has projects\r\n    DECLARE project_count INT;\r\n    \r\n    SELECT COUNT(*) INTO project_count\r\n    FROM employee_projects\r\n    WHERE employee_id = OLD.employee_id;\r\n    \r\n    IF project_count > 0 THEN\r\n        SIGNAL SQLSTATE \'45000\' \r\n        SET MESSAGE_TEXT = \'Cannot delete employee with active projects\';\r\n    END IF;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- AFTER DELETE Trigger\r\nDELIMITER //\r\nCREATE TRIGGER after_employee_delete\r\nAFTER DELETE ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    -- Log the employee deletion\r\n    INSERT INTO employee_audit (employee_id, action_type)\r\n    VALUES (OLD.employee_id, \'DELETE\');\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Testing the Triggers\r\n\r\n-- Insert a new employee (will trigger before_employee_insert and after_employee_insert)\r\nINSERT INTO employees (first_name, last_name, email, department_id, salary)\r\nVALUES (\'Jennifer\', \'Adams\', \'jennifer.adams@example.com\', 2, 65000.00);\r\n\r\n-- Update an employee\'s salary (will trigger before_employee_update and after_employee_update)\r\nUPDATE employees\r\nSET salary = 70000.00\r\nWHERE employee_id = 7;\r\n\r\n-- Try to delete an employee with projects (will be prevented by before_employee_delete)\r\nDELETE FROM employees\r\nWHERE employee_id = 1;\r\n\r\n-- Delete an employee without projects (will trigger before_employee_delete and after_employee_delete)\r\nDELETE FROM employees\r\nWHERE employee_id = 7;\r\n\r\n-- Complex Trigger Example: Maintaining a Summary Table\r\n\r\n-- Create a department summary table\r\nCREATE TABLE department_summary (\r\n    department_id INT PRIMARY KEY,\r\n    employee_count INT DEFAULT 0,\r\n    total_salary DECIMAL(12, 2) DEFAULT 0,\r\n    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    FOREIGN KEY (department_id) REFERENCES departments(department_id)\r\n);\r\n\r\n-- Initialize the summary table\r\nINSERT INTO department_summary (department_id)\r\nSELECT department_id FROM departments;\r\n\r\n-- Trigger to update summary when employee is inserted\r\nDELIMITER //\r\nCREATE TRIGGER after_employee_insert_summary\r\nAFTER INSERT ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    -- Update the department summary\r\n    UPDATE department_summary\r\n    SET \r\n        employee_count = employee_count + 1,\r\n        total_salary = total_salary + NEW.salary,\r\n        last_updated = NOW()\r\n    WHERE department_id = NEW.department_id;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Trigger to update summary when employee is updated\r\nDELIMITER //\r\nCREATE TRIGGER after_employee_update_summary\r\nAFTER UPDATE ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    -- If department changed\r\n    IF NEW.department_id <> OLD.department_id THEN\r\n        -- Decrement old department\r\n        UPDATE department_summary\r\n        SET \r\n            employee_count = employee_count - 1,\r\n            total_salary = total_salary - OLD.salary,\r\n            last_updated = NOW()\r\n        WHERE department_id = OLD.department_id;\r\n        \r\n        -- Increment new department\r\n        UPDATE department_summary\r\n        SET \r\n            employee_count = employee_count + 1,\r\n            total_salary = total_salary + NEW.salary,\r\n            last_updated = NOW()\r\n        WHERE department_id = NEW.department_id;\r\n    -- If only salary changed\r\n    ELSEIF NEW.salary <> OLD.salary THEN\r\n        UPDATE department_summary\r\n        SET \r\n            total_salary = total_salary + (NEW.salary - OLD.salary),\r\n            last_updated = NOW()\r\n        WHERE department_id = NEW.department_id;\r\n    END IF;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Trigger to update summary when employee is deleted\r\nDELIMITER //\r\nCREATE TRIGGER after_employee_delete_summary\r\nAFTER DELETE ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    -- Update the department summary\r\n    UPDATE department_summary\r\n    SET \r\n        employee_count = employee_count - 1,\r\n        total_salary = total_salary - OLD.salary,\r\n        last_updated = NOW()\r\n    WHERE department_id = OLD.department_id;\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Testing the summary triggers\r\n-- Insert a new employee\r\nINSERT INTO employees (first_name, last_name, email, department_id, salary)\r\nVALUES (\'Michael\', \'Clark\', \'michael.clark@example.com\', 1, 80000.00);\r\n\r\n-- Check the summary table\r\nSELECT * FROM department_summary;\r\n\r\n-- Update employee\'s department\r\nUPDATE employees\r\nSET department_id = 2\r\nWHERE employee_id = 8;\r\n\r\n-- Check the summary table again\r\nSELECT * FROM department_summary;\r\n\r\n-- Managing Triggers\r\n\r\n-- Show triggers for a specific table\r\nSHOW TRIGGERS LIKE \'employees\';\r\n\r\n-- Show all triggers in a database\r\nSELECT \r\n    TRIGGER_NAME,\r\n    EVENT_MANIPULATION,\r\n    EVENT_OBJECT_TABLE,\r\n    ACTION_TIMING,\r\n    ACTION_STATEMENT\r\nFROM INFORMATION_SCHEMA.TRIGGERS\r\nWHERE TRIGGER_SCHEMA = \'your_database_name\';\r\n\r\n-- Drop a trigger\r\nDROP TRIGGER IF EXISTS before_employee_insert;\r\n\r\n-- Advanced Trigger Example: Audit Trail with User Information\r\n\r\n-- Add a column to track who made changes\r\nALTER TABLE employee_audit\r\nADD COLUMN changed_by VARCHAR(50);\r\n\r\n-- Create a function to get current user (MySQL doesn\'t have a built-in way to get the application user)\r\nDELIMITER //\r\nCREATE FUNCTION get_current_user() \r\nRETURNS VARCHAR(50)\r\nDETERMINISTIC\r\nBEGIN\r\n    RETURN SUBSTRING_INDEX(USER(), \'@\', 1);\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Update triggers to include user information\r\nDELIMITER //\r\nCREATE TRIGGER after_employee_insert_user\r\nAFTER INSERT ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    INSERT INTO employee_audit (employee_id, action_type, new_salary, changed_by)\r\n    VALUES (NEW.employee_id, \'INSERT\', NEW.salary, get_current_user());\r\nEND //\r\nDELIMITER ;\r\n\r\n-- Trigger with Conditional Logic\r\nDELIMITER //\r\nCREATE TRIGGER validate_employee_update\r\nBEFORE UPDATE ON employees\r\nFOR EACH ROW\r\nBEGIN\r\n    -- Prevent salary decrease by more than 10%\r\n    IF NEW.salary < OLD.salary * 0.9 THEN\r\n        SIGNAL SQLSTATE \'45000\' \r\n        SET MESSAGE_TEXT = \'Salary cannot be decreased by more than 10%\';\r\n    END IF;\r\n    \r\n    -- Prevent changing department for managers\r\n    IF EXISTS (\r\n        SELECT 1 FROM employee_hierarchy \r\n        WHERE employee_id = NEW.employee_id \r\n        AND manager_id IS NULL\r\n    ) AND NEW.department_id <> OLD.department_id THEN\r\n        SIGNAL SQLSTATE \'45000\' \r\n        SET MESSAGE_TEXT = \'Cannot change department for managers\';\r\n    END IF;\r\nEND //\r\nDELIMITER ;</code></pre>\r\n</div>\r\n\r\n<h4>Trigger Types and Timing</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Trigger Type</th>\r\n        <th>Timing</th>\r\n        <th>Description</th>\r\n        <th>Use Case</th>\r\n    </tr>\r\n    <tr>\r\n        <td>BEFORE INSERT</td>\r\n        <td>Before the row is inserted</td>\r\n        <td>Can modify values before insertion or validate data</td>\r\n        <td>Data validation, default values</td>\r\n    </tr>\r\n    <tr>\r\n        <td>AFTER INSERT</td>\r\n        <td>After the row is inserted</td>\r\n        <td>Cannot modify values, but can perform other actions</td>\r\n        <td>Audit logging, updating summary tables</td>\r\n    </tr>\r\n    <tr>\r\n        <td>BEFORE UPDATE</td>\r\n        <td>Before the row is updated</td>\r\n        <td>Can modify new values or validate changes</td>\r\n        <td>Data validation, business rules</td>\r\n    </tr>\r\n    <tr>\r\n        <td>AFTER UPDATE</td>\r\n        <td>After the row is updated</td>\r\n        <td>Cannot modify values, but can perform other actions</td>\r\n        <td>Audit logging, updating related data</td>\r\n    </tr>\r\n    <tr>\r\n        <td>BEFORE DELETE</td>\r\n        <td>Before the row is deleted</td>\r\n        <td>Can prevent deletion or perform cleanup</td>\r\n        <td>Referential integrity checks</td>\r\n    </tr>\r\n    <tr>\r\n        <td>AFTER DELETE</td>\r\n        <td>After the row is deleted</td>\r\n        <td>Cannot prevent deletion, but can perform other actions</td>\r\n        <td>Audit logging, updating summary tables</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>15. User Management and Security</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Creating Users\r\n\r\n-- Create a new user\r\nCREATE USER \'app_user\'@\'localhost\' IDENTIFIED BY \'password123\';\r\n\r\n-- Create a user that can connect from any host\r\nCREATE USER \'remote_user\'@\'%\' IDENTIFIED BY \'secure_password\';\r\n\r\n-- Create a user with password expiration policy\r\nCREATE USER \'temp_user\'@\'localhost\' \r\nIDENTIFIED BY \'temp_password\'\r\nPASSWORD EXPIRE INTERVAL 90 DAY;\r\n\r\n-- Viewing Users\r\n\r\n-- List all users\r\nSELECT host, user FROM mysql.user;\r\n\r\n-- Show privileges for a specific user\r\nSHOW GRANTS FOR \'app_user\'@\'localhost\';\r\n\r\n-- Show current user\r\nSELECT CURRENT_USER();\r\n\r\n-- Managing Passwords\r\n\r\n-- Change a user\'s password\r\nALTER USER \'app_user\'@\'localhost\' IDENTIFIED BY \'new_password\';\r\n\r\n-- Force password change on next login\r\nALTER USER \'app_user\'@\'localhost\' \r\nIDENTIFIED BY \'new_password\'\r\nPASSWORD EXPIRE;\r\n\r\n-- Set password expiration policy\r\nALTER USER \'app_user\'@\'localhost\' \r\nPASSWORD EXPIRE INTERVAL 180 DAY;\r\n\r\n-- Lock and unlock accounts\r\nALTER USER \'app_user\'@\'localhost\' ACCOUNT LOCK;\r\nALTER USER \'app_user\'@\'localhost\' ACCOUNT UNLOCK;\r\n\r\n-- Granting Privileges\r\n\r\n-- Grant all privileges on a specific database\r\nGRANT ALL PRIVILEGES ON company_db.* TO \'app_user\'@\'localhost\';\r\n\r\n-- Grant specific privileges on a table\r\nGRANT SELECT, INSERT, UPDATE ON company_db.employees TO \'app_user\'@\'localhost\';\r\n\r\n-- Grant privileges on specific columns\r\nGRANT SELECT (employee_id, first_name, last_name), \r\nUPDATE (last_name) ON company_db.employees TO \'app_user\'@\'localhost\';\r\n\r\n-- Grant ability to grant privileges to others\r\nGRANT SELECT ON company_db.departments TO \'app_user\'@\'localhost\' WITH GRANT OPTION;\r\n\r\n-- Grant administrative privileges\r\nGRANT CREATE, DROP, ALTER, INDEX ON company_db.* TO \'admin_user\'@\'localhost\';\r\n\r\n-- Revoking Privileges\r\n\r\n-- Revoke specific privileges\r\nREVOKE INSERT, UPDATE ON company_db.employees FROM \'app_user\'@\'localhost\';\r\n\r\n-- Revoke all privileges on a database\r\nREVOKE ALL PRIVILEGES ON company_db.* FROM \'app_user\'@\'localhost\';\r\n\r\n-- Revoke GRANT OPTION\r\nREVOKE GRANT OPTION ON company_db.departments FROM \'app_user\'@\'localhost\';\r\n\r\n-- Roles (MySQL 8.0+)\r\n\r\n-- Create a role\r\nCREATE ROLE \'app_read\', \'app_write\', \'app_admin\';\r\n\r\n-- Grant privileges to roles\r\nGRANT SELECT ON company_db.* TO \'app_read\';\r\nGRANT INSERT, UPDATE, DELETE ON company_db.* TO \'app_write\';\r\nGRANT ALL PRIVILEGES ON company_db.* TO \'app_admin\';\r\n\r\n-- Grant roles to users\r\nGRANT \'app_read\' TO \'app_user\'@\'localhost\';\r\nGRANT \'app_write\' TO \'app_user\'@\'localhost\';\r\n\r\n-- Set default role for a user\r\nSET DEFAULT ROLE ALL TO \'app_user\'@\'localhost\';\r\n\r\n-- Activate roles\r\nSET ROLE \'app_admin\';\r\n\r\n-- View role grants\r\nSHOW GRANTS FOR \'app_read\'@\'%\';\r\n\r\n-- Security Best Practices\r\n\r\n-- Use principle of least privilege\r\nGRANT SELECT, INSERT, UPDATE ON company_db.employees TO \'app_user\'@\'localhost\';\r\n-- Instead of\r\nGRANT ALL PRIVILEGES ON company_db.* TO \'app_user\'@\'localhost\';\r\n\r\n-- Require SSL for connections\r\nCREATE USER \'secure_user\'@\'%\' \r\nIDENTIFIED BY \'very_secure_password\'\r\nREQUIRE SSL;\r\n\r\n-- Require X509 certificate\r\nCREATE USER \'cert_user\'@\'%\' \r\nIDENTIFIED BY \'password\'\r\nREQUIRE X509;\r\n\r\n-- Limit connection attempts\r\nCREATE USER \'limited_user\'@\'%\' \r\nIDENTIFIED BY \'password\'\r\nWITH MAX_CONNECTIONS_PER_HOUR 10;\r\n\r\n-- Resource limits\r\nCREATE USER \'resource_limited\'@\'%\' \r\nIDENTIFIED BY \'password\'\r\nWITH \r\n    MAX_QUERIES_PER_HOUR 1000\r\n    MAX_UPDATES_PER_HOUR 100\r\n    MAX_CONNECTIONS_PER_HOUR 10\r\n    MAX_USER_CONNECTIONS 5;\r\n\r\n-- Password Validation (MySQL 8.0+)\r\n\r\n-- Install password validation component\r\nINSTALL COMPONENT \'file://component_validate_password\';\r\n\r\n-- Show password validation settings\r\nSHOW VARIABLES LIKE \'validate_password%\';\r\n\r\n-- Set password validation policy\r\nSET GLOBAL validate_password.policy = \'MEDIUM\';\r\nSET GLOBAL validate_password.length = 12;\r\n\r\n-- Create user with password validation\r\nCREATE USER \'secure_user\'@\'localhost\' \r\nIDENTIFIED BY \'Str0ngP@ssw0rd!\';\r\n\r\n-- Password History (MySQL 8.0+)\r\n\r\n-- Set password history\r\nALTER USER \'app_user\'@\'localhost\' \r\nPASSWORD HISTORY 5;\r\n\r\n-- Prevent password reuse\r\nALTER USER \'app_user\'@\'localhost\' \r\nPASSWORD REUSE INTERVAL 365 DAY;\r\n\r\n-- Account Locking (MySQL 8.0+)\r\n\r\n-- Set failed login attempts\r\nALTER USER \'app_user\'@\'localhost\' \r\nFAILED_LOGIN_ATTEMPTS 3\r\nPASSWORD_LOCK_TIME 1 DAY;\r\n\r\n-- Unlock a locked account\r\nALTER USER \'app_user\'@\'localhost\' ACCOUNT UNLOCK;\r\n\r\n-- Auditing and Monitoring\r\n\r\n-- Enable general query log\r\nSET GLOBAL general_log = \'ON\';\r\nSET GLOBAL log_output = \'TABLE\';\r\n\r\n-- View recent queries\r\nSELECT event_time, user_host, argument \r\nFROM mysql.general_log \r\nORDER BY event_time DESC \r\nLIMIT 10;\r\n\r\n-- Enable slow query log\r\nSET GLOBAL slow_query_log = \'ON\';\r\nSET GLOBAL long_query_time = 2;\r\nSET GLOBAL log_queries_not_using_indexes = \'ON\';\r\n\r\n-- View slow queries\r\nSELECT start_time, query_time, sql_text \r\nFROM mysql.slow_log \r\nORDER BY query_time DESC \r\nLIMIT 10;\r\n\r\n-- MySQL Enterprise Audit (if available)\r\n-- Install audit plugin\r\nINSTALL PLUGIN audit_log SONAME \'audit_log.so\';\r\n\r\n-- Set audit policy\r\nSET GLOBAL audit_log_format = \'JSON\';\r\nSET GLOBAL audit_log_policy = \'ALL\';\r\n\r\n-- View audit log\r\nSELECT * FROM mysql.audit_log;</code></pre>\r\n</div>\r\n\r\n<h4>MySQL Privilege Levels</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Privilege Level</th>\r\n        <th>Description</th>\r\n        <th>Example Privileges</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Global</td>\r\n        <td>Applies to all databases on the server</td>\r\n        <td>CREATE USER, FILE, PROCESS, RELOAD, SHUTDOWN, SUPER</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Database</td>\r\n        <td>Applies to all objects in a specific database</td>\r\n        <td>CREATE, DROP, ALTER, INDEX, CREATE TEMPORARY TABLES</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Table</td>\r\n        <td>Applies to a specific table</td>\r\n        <td>SELECT, INSERT, UPDATE, DELETE, CREATE VIEW</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Column</td>\r\n        <td>Applies to specific columns in a table</td>\r\n        <td>SELECT (col1, col2), UPDATE (col3)</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Routine</td>\r\n        <td>Applies to stored procedures and functions</td>\r\n        <td>EXECUTE, ALTER ROUTINE</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Proxy</td>\r\n        <td>Allows one user to be a proxy for another</td>\r\n        <td>PROXY</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>16. Backup and Recovery</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Logical Backup with mysqldump\r\n\r\n-- Backup a single database\r\nmysqldump -u root -p company_db > company_db_backup.sql\r\n\r\n-- Backup multiple databases\r\nmysqldump -u root -p --databases company_db hr_db > multi_db_backup.sql\r\n\r\n-- Backup all databases\r\nmysqldump -u root -p --all-databases > all_databases_backup.sql\r\n\r\n-- Backup specific tables\r\nmysqldump -u root -p company_db employees departments > tables_backup.sql\r\n\r\n-- Backup with stored procedures and triggers\r\nmysqldump -u root -p --routines --triggers company_db > company_db_complete.sql\r\n\r\n-- Backup with events\r\nmysqldump -u root -p --events company_db > company_db_with_events.sql\r\n\r\n-- Compress the backup directly\r\nmysqldump -u root -p company_db | gzip > company_db_backup.sql.gz\r\n\r\n-- Exclude specific tables\r\nmysqldump -u root -p --ignore-table=company_db.log_table company_db > company_db_backup.sql\r\n\r\n-- Backup with consistent snapshot (for InnoDB)\r\nmysqldump -u root -p --single-transaction --routines --triggers company_db > company_db_consistent.sql\r\n\r\n-- Physical Backup with mysqlbackup (MySQL Enterprise)\r\n\r\n-- Full backup\r\nmysqlbackup --user=root --password --backup-dir=/path/to/backup backup\r\n\r\n-- Incremental backup\r\nmysqlbackup --user=root --password --incremental --incremental-base=dir:/path/to/full_backup --backup-dir=/path/to/inc_backup backup\r\n\r\n-- Restore from Logical Backup\r\n\r\n-- Restore a single database\r\nmysql -u root -p company_db < company_db_backup.sql\r\n\r\n-- Restore all databases\r\nmysql -u root -p < all_databases_backup.sql\r\n\r\n-- Restore specific tables\r\nmysql -u root -p company_db < tables_backup.sql\r\n\r\n-- Restore from compressed backup\r\ngunzip < company_db_backup.sql.gz | mysql -u root -p company_db\r\n\r\n-- Point-in-Time Recovery with Binary Logs\r\n\r\n-- Enable binary logging\r\nSET GLOBAL log_bin = ON;\r\nSET GLOBAL binlog_format = \'ROW\';\r\nSET GLOBAL log_bin_index = ON;\r\n\r\n-- Show binary log files\r\nSHOW BINARY LOGS;\r\n\r\n-- Show current binary log\r\nSHOW MASTER STATUS;\r\n\r\n-- Backup binary logs\r\nmysqlbinlog --read-from-remote-server --host=localhost --raw --stop-never binlog.000001\r\n\r\n-- Restore to a specific point in time\r\n-- First restore from full backup\r\nmysql -u root -p < company_db_backup.sql\r\n\r\n-- Then apply binary logs up to the specific time\r\nmysqlbinlog --start-datetime=\"2023-05-01 00:00:00\" --stop-datetime=\"2023-05-02 12:00:00\" binlog.000001 | mysql -u root -p\r\n\r\n-- InnoDB Recovery\r\n\r\n-- Force InnoDB recovery\r\n-- Add to my.cnf/my.ini under [mysqld]\r\ninnodb_force_recovery = 1\r\n\r\n-- Start MySQL and dump databases\r\nmysqldump -u root -p --all-databases > recovery_backup.sql\r\n\r\n-- Remove innodb_force_recovery and restart MySQL\r\n-- Restore from the backup\r\nmysql -u root -p < recovery_backup.sql\r\n\r\n-- Table-Level Recovery\r\n\r\n-- Recover a single table from a full backup\r\n-- Extract the table from the full backup\r\nsed -n \'/^-- Table structure for table `employees`/,/^-- Table structure for table `/p\' company_db_backup.sql > employees_table.sql\r\n\r\n-- Restore the table\r\nmysql -u root -p company_db < employees_table.sql\r\n\r\n-- Using MySQL Enterprise Backup for Point-in-Time Recovery\r\n\r\n-- Full backup\r\nmysqlbackup --user=root --password --backup-dir=/backups/full backup\r\n\r\n-- Incremental backup\r\nmysqlbackup --user=root --password --incremental --incremental-base=dir:/backups/full --backup-dir=/backups/inc1 backup\r\n\r\n-- Restore to a specific point in time\r\nmysqlbackup --backup-dir=/backups/full copy-back\r\nmysqlbackup --incremental-backup-dir=/backups/inc1 copy-back\r\nmysqlbackup --incremental-backup-dir=/backups/inc2 copy-back\r\n\r\n-- Start MySQL\r\nmysqld_safe --user=mysql &\r\n\r\n-- Cloud Backup Solutions\r\n\r\n-- AWS RDS Backup\r\n-- Automated backups are enabled by default\r\n-- Create manual snapshot\r\nCALL mysql.rds_show_status();\r\nCALL mysql.rds_set_configuration(\'binlog retention hours\', 24);\r\n\r\n-- Google Cloud SQL Backup\r\n-- gcloud sql backups create --instance=INSTANCE_NAME --description=\"Manual backup\"\r\n\r\n-- Azure Database for MySQL Backup\r\n-- Automated backups are enabled by default\r\n-- Restore to point in time using Azure portal or CLI\r\n\r\n-- Backup Verification\r\n\r\n-- Check backup file integrity\r\nmysql -u root -p -e \"SET FOREIGN_KEY_CHECKS=0;\" < company_db_backup.sql\r\n\r\n-- Check table count after restore\r\nSELECT COUNT(*) FROM information_schema.tables \r\nWHERE table_schema = \'company_db\';\r\n\r\n-- Check row counts for key tables\r\nSELECT \r\n    table_name, \r\n    table_rows \r\nFROM information_schema.tables \r\nWHERE table_schema = \'company_db\'\r\nORDER BY table_name;\r\n\r\n-- Backup Script Example\r\n\r\n#!/bin/bash\r\n# MySQL Backup Script\r\n\r\nDATE=$(date +%Y%m%d_%H%M%S)\r\nBACKUP_DIR=\"/path/to/backups\"\r\nMYSQL_USER=\"root\"\r\nMYSQL_PASSWORD=\"password\"\r\nMYSQL_HOST=\"localhost\"\r\nDATABASES=\"company_db hr_db finance_db\"\r\n\r\n# Create backup directory if it doesn\'t exist\r\nmkdir -p $BACKUP_DIR\r\n\r\n# Backup each database\r\nfor DB in $DATABASES\r\ndo\r\n    mysqldump --user=$MYSQL_USER --password=$MYSQL_PASSWORD --host=$MYSQL_HOST \\\r\n    --single-transaction --routines --triggers $DB | \\\r\n    gzip > $BACKUP_DIR/${DB}_${DATE}.sql.gz\r\ndone\r\n\r\n# Backup all databases\r\nmysqldump --user=$MYSQL_USER --password=$MYSQL_PASSWORD --host=$MYSQL_HOST \\\r\n--all-databases --single-transaction --routines --triggers | \\\r\ngzip > $BACKUP_DIR/all_databases_${DATE}.sql.gz\r\n\r\n# Keep only last 30 days of backups\r\nfind $BACKUP_DIR -name \"*.gz\" -type f -mtime +30 -delete\r\n\r\n# Log backup completion\r\necho \"Backup completed on $(date)\" >> $BACKUP_DIR/backup_log.txt</code></pre>\r\n</div>\r\n\r\n<h4>Backup Methods Comparison</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Method</th>\r\n        <th>Pros</th>\r\n        <th>Cons</th>\r\n        <th>Best For</th>\r\n    </tr>\r\n    <tr>\r\n        <td>mysqldump</td>\r\n        <td>Easy to use, portable, human-readable</td>\r\n        <td>Slow for large databases, requires locking</td>\r\n        <td>Small to medium databases, development environments</td>\r\n    </tr>\r\n    <tr>\r\n        <td>MySQL Enterprise Backup</td>\r\n        <td>Hot backup, fast, consistent, point-in-time recovery</td>\r\n        <td>Commercial product, complex setup</td>\r\n        <td>Large production databases, mission-critical systems</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Percona XtraBackup</td>\r\n        <td>Hot backup for InnoDB, open-source, fast</td>\r\n        <td>Complex setup, requires additional tools</td>\r\n        <td>Large InnoDB databases, high-availability systems</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Binary Log</td>\r\n        <td>Point-in-time recovery, minimal overhead</td>\r\n        <td>Not a complete backup solution alone</td>\r\n        <td>Complementing full backups for point-in-time recovery</td>\r\n    </tr>\r\n    <tr>\r\n        <td>File System Backup</td>\r\n        <td>Fast for large databases</td>\r\n        <td>Requires database shutdown, not portable</td>\r\n        <td>Large databases with minimal downtime requirements</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Cloud Provider Tools</td>\r\n        <td>Integrated with cloud services, automated</td>\r\n        <td>Vendor lock-in, limited customization</td>\r\n        <td>Databases hosted on cloud platforms</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>17. Replication and High Availability</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Setting Up Master-Slave Replication\r\n\r\n-- On the Master Server:\r\n\r\n-- Configure my.cnf/my.ini\r\n[mysqld]\r\nserver-id = 1\r\nlog-bin = mysql-bin\r\nbinlog_format = ROW\r\nbinlog-do-db = company_db\r\nexpire_logs_days = 10\r\n\r\n-- Restart MySQL\r\n\r\n-- Create a replication user\r\nCREATE USER \'replicator\'@\'%\' IDENTIFIED BY \'replication_password\';\r\nGRANT REPLICATION SLAVE ON *.* TO \'replicator\'@\'%\';\r\nFLUSH PRIVILEGES;\r\n\r\n-- Get master status\r\nSHOW MASTER STATUS;\r\n-- Note the File and Position values\r\n\r\n-- On the Slave Server:\r\n\r\n-- Configure my.cnf/my.ini\r\n[mysqld]\r\nserver-id = 2\r\nrelay-log = mysql-relay-bin\r\nread-only = 1\r\n\r\n-- Restart MySQL\r\n\r\n-- Configure slave to connect to master\r\nCHANGE MASTER TO\r\n    MASTER_HOST = \'master_host_ip\',\r\n    MASTER_USER = \'replicator\',\r\n    MASTER_PASSWORD = \'replication_password\',\r\n    MASTER_LOG_FILE = \'mysql-bin.000001\',\r\n    MASTER_LOG_POS = 154;\r\n\r\n-- Start replication\r\nSTART SLAVE;\r\n\r\n-- Check slave status\r\nSHOW SLAVE STATUS\\G\r\n-- Look for \"Slave_IO_Running: Yes\" and \"Slave_SQL_Running: Yes\"\r\n\r\n-- Setting Up Master-Master Replication\r\n\r\n-- On Server 1:\r\n\r\n-- Configure my.cnf/my.ini\r\n[mysqld]\r\nserver-id = 1\r\nlog-bin = mysql-bin\r\nbinlog_format = ROW\r\nauto-increment-offset = 1\r\nauto-increment-increment = 2\r\nexpire_logs_days = 10\r\n\r\n-- Restart MySQL\r\n\r\n-- Create replication user\r\nCREATE USER \'replicator\'@\'%\' IDENTIFIED BY \'replication_password\';\r\nGRANT REPLICATION SLAVE ON *.* TO \'replicator\'@\'%\';\r\nFLUSH PRIVILEGES;\r\n\r\n-- Get master status\r\nSHOW MASTER STATUS;\r\n\r\n-- On Server 2:\r\n\r\n-- Configure my.cnf/my.ini\r\n[mysqld]\r\nserver-id = 2\r\nlog-bin = mysql-bin\r\nbinlog_format = ROW\r\nauto-increment-offset = 2\r\nauto-increment-increment = 2\r\nexpire_logs_days = 10\r\n\r\n-- Restart MySQL\r\n\r\n-- Create replication user\r\nCREATE USER \'replicator\'@\'%\' IDENTIFIED BY \'replication_password\';\r\nGRANT REPLICATION SLAVE ON *.* TO \'replicator\'@\'%\';\r\nFLUSH PRIVILEGES;\r\n\r\n-- Configure Server 2 to replicate from Server 1\r\nCHANGE MASTER TO\r\n    MASTER_HOST = \'server1_ip\',\r\n    MASTER_USER = \'replicator\',\r\n    MASTER_PASSWORD = \'replication_password\',\r\n    MASTER_LOG_FILE = \'mysql-bin.000001\',\r\n    MASTER_LOG_POS = 154;\r\n\r\n-- Start replication\r\nSTART SLAVE;\r\n\r\n-- On Server 1, configure to replicate from Server 2\r\nCHANGE MASTER TO\r\n    MASTER_HOST = \'server2_ip\',\r\n    MASTER_USER = \'replicator\',\r\n    MASTER_PASSWORD = \'replication_password\',\r\n    MASTER_LOG_FILE = \'mysql-bin.000001\',\r\n    MASTER_LOG_POS = 154;\r\n\r\n-- Start replication\r\nSTART SLAVE;\r\n\r\n-- Setting Up Group Replication (MySQL 8.0+)\r\n\r\n-- On all servers:\r\n\r\n-- Configure my.cnf/my.ini\r\n[mysqld]\r\nserver-id = 1  # Unique for each server\r\ngtid_mode = ON\r\nenforce_gtid_consistency = ON\r\nbinlog_format = ROW\r\n\r\n# Group Replication settings\r\nplugin-load = group_replication.so\r\ngroup_replication_group_name = \"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa\"\r\ngroup_replication_start_on_boot = off\r\ngroup_replication_local_address = \"server1_ip:33061\"\r\ngroup_replication_group_seeds = \"server1_ip:33061,server2_ip:33061,server3_ip:33061\"\r\ngroup_replication_bootstrap_group = off\r\n\r\n-- Restart MySQL\r\n\r\n-- On the first server only:\r\n\r\n-- Create replication user\r\nSET SQL_LOG_BIN=0;\r\nCREATE USER \'repl\'@\'%\' IDENTIFIED BY \'password\';\r\nGRANT REPLICATION SLAVE ON *.* TO \'repl\'@\'%\';\r\nFLUSH PRIVILEGES;\r\nSET SQL_LOG_BIN=1;\r\n\r\n-- Bootstrap the group\r\nSET GLOBAL group_replication_bootstrap_group = ON;\r\nSTART GROUP_REPLICATION;\r\nSET GLOBAL group_replication_bootstrap_group = OFF;\r\n\r\n-- On the other servers:\r\n\r\n-- Start Group Replication\r\nSTART GROUP_REPLICATION;\r\n\r\n-- Check Group Replication status\r\nSELECT * FROM performance_schema.replication_group_members;\r\n\r\n-- Managing Replication\r\n\r\n-- Stop slave\r\nSTOP SLAVE;\r\n\r\n-- Start slave\r\nSTART SLAVE;\r\n\r\n-- Reset slave configuration\r\nRESET SLAVE;\r\n\r\n-- Skip a problematic statement on slave\r\nSTOP SLAVE;\r\nSET GLOBAL sql_slave_skip_counter = 1;\r\nSTART SLAVE;\r\n\r\n-- Check for replication errors\r\nSHOW SLAVE STATUS\\G\r\n-- Look for \"Last_Error\" field\r\n\r\n-- Monitor replication lag\r\nSHOW SLAVE STATUS\\G\r\n-- Look for \"Seconds_Behind_Master\" field\r\n\r\n-- Reset master (deletes all binary logs)\r\nRESET MASTER;\r\n\r\n-- Purge old binary logs\r\nPURGE BINARY LOGS TO \'mysql-bin.000010\';\r\n\r\n-- Purge binary logs before a specific date\r\nPURGE BINARY LOGS BEFORE \'2023-05-01 00:00:00\';\r\n\r\n-- Setting Up Semi-Synchronous Replication\r\n\r\n-- On the Master:\r\n\r\n-- Install plugin\r\nINSTALL PLUGIN rpl_semi_sync_master SONAME \'semisync_master.so\';\r\n\r\n-- Enable semi-sync replication\r\nSET GLOBAL rpl_semi_sync_master_enabled = 1;\r\nSET GLOBAL rpl_semi_sync_master_timeout = 10000; -- 10 seconds\r\n\r\n-- Make changes persistent\r\nSET PERSIST rpl_semi_sync_master_enabled = 1;\r\nSET PERSIST rpl_semi_sync_master_timeout = 10000;\r\n\r\n-- On the Slave:\r\n\r\n-- Install plugin\r\nINSTALL PLUGIN rpl_semi_sync_slave SONAME \'semisync_slave.so\';\r\n\r\n-- Enable semi-sync replication\r\nSET GLOBAL rpl_semi_sync_slave_enabled = 1;\r\n\r\n-- Make changes persistent\r\nSET PERSIST rpl_semi_sync_slave_enabled = 1;\r\n\r\n-- Restart slave IO thread\r\nSTOP SLAVE IO_THREAD;\r\nSTART SLAVE IO_THREAD;\r\n\r\n-- Monitor semi-sync status\r\n-- On master\r\nSHOW STATUS LIKE \'Rpl_semi_sync%\';\r\n\r\n-- On slave\r\nSHOW STATUS LIKE \'Rpl_semi_sync%\';\r\n\r\n-- Setting Up Delayed Replication\r\n\r\n-- Configure slave with delay\r\nCHANGE MASTER TO\r\n    MASTER_HOST = \'master_host_ip\',\r\n    MASTER_USER = \'replicator\',\r\n    MASTER_PASSWORD = \'replication_password\',\r\n    MASTER_LOG_FILE = \'mysql-bin.000001\',\r\n    MASTER_LOG_POS = 154,\r\n    MASTER_DELAY = 3600; -- 1 hour delay\r\n\r\n-- Start slave\r\nSTART SLAVE;\r\n\r\n-- Check for delayed status\r\nSHOW SLAVE STATUS\\G\r\n-- Look for \"SQL_Delay\" and \"SQL_Remaining_Delay\"\r\n\r\n-- Failover and Switchover\r\n\r\n-- Promote slave to master during failover\r\nSTOP SLAVE;\r\nRESET MASTER;\r\n-- Update application to point to new master\r\n\r\n-- Demote master to slave after recovery\r\n-- On the old master:\r\nRESET MASTER;\r\nCHANGE MASTER TO\r\n    MASTER_HOST = \'new_master_ip\',\r\n    MASTER_USER = \'replicator\',\r\n    MASTER_PASSWORD = \'replication_password\',\r\n    MASTER_LOG_FILE = \'mysql-bin.000001\',\r\n    MASTER_LOG_POS = 154;\r\nSTART SLAVE;\r\n\r\n-- Using MySQL Router for High Availability\r\n\r\n-- Install MySQL Router\r\n-- Configure bootstrap for InnoDB Cluster\r\nmysqlrouter --bootstrap localhost:3306 --directory /path/to/router/config\r\n\r\n-- Start MySQL Router\r\nmysqlrouter --config /path/to/router/config/mysqlrouter.conf\r\n\r\n-- Connect through MySQL Router\r\nmysql -u app_user -p -h localhost -P 6446 --protocol=tcp\r\n\r\n-- Monitoring Replication\r\n\r\n-- Check master status\r\nSHOW MASTER STATUS;\r\n\r\n-- Check slave status\r\nSHOW SLAVE STATUS\\G;\r\n\r\n-- Check binary log events\r\nSHOW BINLOG EVENTS IN \'mysql-bin.000001\';\r\n\r\n-- Check relay log events\r\nSHOW RELAYLOG EVENTS IN \'mysql-relay-bin.000001\';\r\n\r\n-- Monitor replication with Performance Schema (MySQL 8.0+)\r\nSELECT * FROM performance_schema.replication_connection_status;\r\nSELECT * FROM performance_schema.replication_applier_status;</code></pre>\r\n</div>\r\n\r\n<h4>Replication Topologies</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Topology</th>\r\n        <th>Description</th>\r\n        <th>Pros</th>\r\n        <th>Cons</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Master-Slave</td>\r\n        <td>One master server replicates to one or more slave servers</td>\r\n        <td>Simple to set up, good for read scaling</td>\r\n        <td>Single point of failure at master, manual failover</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Master-Master</td>\r\n        <td>Two or more servers act as both master and slave to each other</td>\r\n        <td>High availability, write scaling possible</td>\r\n        <td>Conflict resolution complexity, potential data inconsistency</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Ring Replication</td>\r\n        <td>Each server replicates to the next server in a ring</td>\r\n        <td>No single point of failure</td>\r\n        <td>Complex to manage, replication lag can compound</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Star Replication</td>\r\n        <td>Central master replicates to multiple slaves, slaves may replicate to other slaves</td>\r\n        <td>Hierarchical organization, good for distributed systems</td>\r\n        <td>Complex to manage, single point of failure at top level</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Group Replication</td>\r\n        <td>Multiple servers form a group with built-in fault detection and recovery</td>\r\n        <td>Automatic failover, data consistency, distributed system</td>\r\n        <td>Requires at least 3 servers, higher overhead</td>\r\n    </tr>\r\n</table>\r\n\r\n<h3>18. MySQL Performance Tuning</h3>\r\n<div class=\"code-container\">\r\n    <button class=\"copy-btn\" onclick=\"copyCode(this)\">Copy</button>\r\n<pre><code class=\"language-sql\">-- Server Configuration Tuning\r\n\r\n-- Show current server variables\r\nSHOW VARIABLES;\r\n\r\n-- Show status variables\r\nSHOW STATUS;\r\n\r\n-- Show InnoDB status\r\nSHOW ENGINE INNODB STATUS;\r\n\r\n-- Key Configuration Parameters\r\n\r\n-- InnoDB Buffer Pool Size (most important for InnoDB)\r\n-- Set to 70-80% of available RAM on a dedicated server\r\nSET GLOBAL innodb_buffer_pool_size = 4G;\r\nSET PERSIST innodb_buffer_pool_size = 4G;\r\n\r\n-- InnoDB Log File Size\r\n-- Larger logs improve performance by reducing flush frequency\r\n-- Set to 512M-2G for write-intensive workloads\r\nSET GLOBAL innodb_log_file_size = 512M;\r\nSET PERSIST innodb_log_file_size = 512M;\r\n\r\n-- InnoDB Flush Method\r\n-- O_DIRECT is generally best for avoiding double buffering\r\nSET GLOBAL innodb_flush_method = O_DIRECT;\r\nSET PERSIST innodb_flush_method = O_DIRECT;\r\n\r\n-- InnoDB I/O Capacity\r\n-- Set to match the I/O capacity of your system\r\nSET GLOBAL innodb_io_capacity = 2000;\r\nSET PERSIST innodb_io_capacity = 2000;\r\n\r\n-- InnoDB Thread Concurrency\r\n-- Set to 0 for unlimited threads (generally recommended)\r\nSET GLOBAL innodb_thread_concurrency = 0;\r\nSET PERSIST innodb_thread_concurrency = 0;\r\n\r\n-- Query Cache (deprecated in MySQL 8.0)\r\n-- In MySQL 5.7, disable for performance\r\nSET GLOBAL query_cache_type = 0;\r\nSET GLOBAL query_cache_size = 0;\r\n\r\n-- Connection Handling\r\n-- Increase max_connections if needed\r\nSET GLOBAL max_connections = 200;\r\nSET PERSIST max_connections = 200;\r\n\r\n-- Thread cache size\r\nSET GLOBAL thread_cache_size = 16;\r\nSET PERSIST thread_cache_size = 16;\r\n\r\n-- Table Open Cache\r\nSET GLOBAL table_open_cache = 4000;\r\nSET PERSIST table_open_cache = 4000;\r\n\r\n-- Query Optimization\r\n\r\n-- Identify slow queries\r\nSELECT \r\n    start_time,\r\n    query_time,\r\n    lock_time,\r\n    rows_sent,\r\n    rows_examined,\r\n    sql_text\r\nFROM mysql.slow_log\r\nORDER BY query_time DESC\r\nLIMIT 10;\r\n\r\n-- Explain a query to see execution plan\r\nEXPLAIN SELECT * FROM employees WHERE department_id = 1;\r\n\r\n-- More detailed explain format (MySQL 8.0+)\r\nEXPLAIN FORMAT=JSON SELECT * FROM employees WHERE department_id = 1;\r\n\r\n-- Analyze a table to update statistics\r\nANALYZE TABLE employees;\r\n\r\n-- Optimize a table to reclaim space and defragment\r\nOPTIMIZE TABLE employees;\r\n\r\n-- Check for missing indexes\r\nSELECT \r\n    t.TABLE_SCHEMA,\r\n    t.TABLE_NAME,\r\n    s.INDEX_NAME,\r\n    s.COLUMN_NAME,\r\n    s.SEQ_IN_INDEX,\r\n    s.CARDINALITY,\r\n    t.TABLE_ROWS\r\nFROM INFORMATION_SCHEMA.STATISTICS s\r\nINNER JOIN INFORMATION_SCHEMA.TABLES t ON s.TABLE_SCHEMA = t.TABLE_SCHEMA AND s.TABLE_NAME = t.TABLE_NAME\r\nWHERE s.TABLE_SCHEMA NOT IN (\'mysql\', \'information_schema\', \'performance_schema\')\r\nAND s.INDEX_NAME NOT IN (\'PRIMARY\')\r\nORDER BY t.TABLE_SCHEMA, t.TABLE_NAME, s.INDEX_NAME, s.SEQ_IN_INDEX;\r\n\r\n-- Identify unused indexes\r\nSELECT \r\n    OBJECT_SCHEMA,\r\n    OBJECT_NAME,\r\n    INDEX_NAME\r\nFROM performance_schema.table_io_waits_summary_by_index_usage\r\nWHERE INDEX_NAME IS NOT NULL\r\nAND COUNT_STAR = 0\r\nAND OBJECT_SCHEMA NOT IN (\'mysql\', \'information_schema\', \'performance_schema\')\r\nORDER BY OBJECT_SCHEMA, OBJECT_NAME;\r\n\r\n-- Schema Optimization\r\n\r\n-- Normalize tables to reduce redundancy\r\n-- Example: Instead of storing department name in employee table,\r\n-- create a separate departments table and reference it with a foreign key\r\n\r\n-- Use appropriate data types\r\n-- Use INT instead of VARCHAR for IDs\r\n-- Use DATE/DATETIME instead of VARCHAR for dates\r\n-- Use the smallest numeric type that can hold your values\r\n\r\n-- Partition large tables\r\n-- Example: Range partitioning by date\r\nCREATE TABLE sales (\r\n    id INT NOT NULL AUTO_INCREMENT,\r\n    sale_date DATE NOT NULL,\r\n    customer_id INT NOT NULL,\r\n    amount DECIMAL(10,2) NOT NULL,\r\n    PRIMARY KEY (id, sale_date)\r\n)\r\nPARTITION BY RANGE (TO_DAYS(sale_date)) (\r\n    PARTITION p0 VALUES LESS THAN (TO_DAYS(\'2022-01-01\')),\r\n    PARTITION p1 VALUES LESS THAN (TO_DAYS(\'2023-01-01\')),\r\n    PARTITION p2 VALUES LESS THAN (TO_DAYS(\'2024-01-01\')),\r\n    PARTITION pmax VALUES LESS THAN MAXVALUE\r\n);\r\n\r\n-- Example: Hash partitioning for even distribution\r\nCREATE TABLE large_table (\r\n    id INT NOT NULL AUTO_INCREMENT,\r\n    data VARCHAR(255) NOT NULL,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    PRIMARY KEY (id)\r\n)\r\nPARTITION BY HASH(id)\r\nPARTITIONS 4;\r\n\r\n-- Application Optimization\r\n\r\n-- Use connection pooling\r\n-- Configure your application to reuse connections rather than creating new ones\r\n\r\n-- Use prepared statements\r\n-- Reduces parsing overhead and prevents SQL injection\r\n\r\n-- Batch operations instead of individual statements\r\n-- Insert multiple rows with a single INSERT statement\r\nINSERT INTO employees (first_name, last_name, email, department_id, salary)\r\nVALUES \r\n    (\'John\', \'Doe\', \'john.doe@example.com\', 1, 75000.00),\r\n    (\'Jane\', \'Smith\', \'jane.smith@example.com\', 2, 65000.00),\r\n    (\'Mike\', \'Johnson\', \'mike.johnson@example.com\', 1, 85000.00);\r\n\r\n-- Use transactions for related operations\r\nSTART TRANSACTION;\r\nINSERT INTO orders (customer_id, order_date, total_amount)\r\nVALUES (123, NOW(), 150.00);\r\n\r\nSET @order_id = LAST_INSERT_ID();\r\n\r\nINSERT INTO order_items (order_id, product_id, quantity, price)\r\nVALUES \r\n    (@order_id, 1, 2, 50.00),\r\n    (@order_id, 2, 1, 50.00);\r\nCOMMIT;\r\n\r\n-- Monitoring and Profiling\r\n\r\n-- Enable query profiling\r\nSET profiling = 1;\r\n\r\n-- Run your query\r\nSELECT * FROM employees WHERE department_id = 1;\r\n\r\n-- Show profile\r\nSHOW PROFILE;\r\n\r\n-- Show detailed profile\r\nSHOW PROFILE FOR QUERY 1;\r\n\r\n-- Use Performance Schema for monitoring\r\n-- Enable performance schema\r\nUPDATE performance_schema.setup_instruments \r\nSET ENABLED = \'YES\', TIMED = \'YES\';\r\n\r\n-- Check top queries by execution time\r\nSELECT \r\n    DIGEST_TEXT,\r\n    COUNT_STAR,\r\n    SUM_ROWS_SENT,\r\n    SUM_ROWS_EXAMINED,\r\n    SUM_TIMER_WAIT/1000000000 AS total_seconds\r\nFROM performance_schema.events_statements_summary_by_digest\r\nORDER BY SUM_TIMER_WAIT DESC\r\nLIMIT 10;\r\n\r\n-- Check top I/O operations\r\nSELECT \r\n    OBJECT_NAME,\r\n    COUNT_READ,\r\n    COUNT_FETCH,\r\n    SUM_TIMER_READ/1000000000 AS read_seconds\r\nFROM performance_schema.table_io_waits_summary_by_table\r\nORDER BY SUM_TIMER_READ DESC\r\nLIMIT 10;\r\n\r\n-- MySQL Enterprise Monitor\r\n-- Provides advanced monitoring and tuning recommendations\r\n\r\n-- Percona Monitoring and Management (PMM)\r\n-- Open-source monitoring and management platform for MySQL\r\n\r\n-- Advanced Optimization Techniques\r\n\r\n-- Use covering indexes to avoid table access\r\nCREATE INDEX idx_employee_department_salary_name ON employees(department_id, salary, first_name, last_name);\r\n\r\n-- Use index hints to force the optimizer to use a specific index\r\nSELECT * FROM employees FORCE INDEX (idx_employee_department_salary_name)\r\nWHERE department_id = 1;\r\n\r\n-- Use query hints to control execution plan\r\nSELECT * FROM employees USE INDEX (idx_employee_department_salary_name)\r\nWHERE department_id = 1;\r\n\r\n-- Optimize JOIN operations\r\n-- Ensure JOIN columns are indexed\r\n-- Use STRAIGHT_JOIN to force join order\r\nSELECT STRAIGHT_JOIN e.first_name, e.last_name, d.department_name\r\nFROM employees e\r\nJOIN departments d ON e.department_id = d.department_id\r\nWHERE e.salary > 70000;\r\n\r\n-- Use subquery optimization techniques\r\n-- Rewrite correlated subqueries as JOINs when possible\r\n-- Before (correlated subquery)\r\nSELECT e.first_name, e.last_name, e.salary\r\nFROM employees e\r\nWHERE e.salary > (\r\n    SELECT AVG(salary) \r\n    FROM employees e2 \r\n    WHERE e2.department_id = e.department_id\r\n);\r\n\r\n-- After (JOIN with derived table)\r\nSELECT e.first_name, e.last_name, e.salary\r\nFROM employees e\r\nJOIN (\r\n    SELECT department_id, AVG(salary) AS avg_salary\r\n    FROM employees\r\n    GROUP BY department_id\r\n) AS dept_avg ON e.department_id = dept_avg.department_id\r\nWHERE e.salary > dept_avg.avg_salary;\r\n\r\n-- Use window functions (MySQL 8.0+) instead of self-joins\r\n-- Before (self-join)\r\nSELECT e1.first_name, e1.last_name, e1.salary,\r\nCOUNT(e2.employee_id) AS colleagues_with_higher_salary\r\nFROM employees e1\r\nLEFT JOIN employees e2 ON e1.department_id = e2.department_id AND e2.salary > e1.salary\r\nGROUP BY e1.employee_id, e1.first_name, e1.last_name, e1.salary;\r\n\r\n-- After (window function)\r\nSELECT \r\n    first_name, \r\n    last_name, \r\n    salary,\r\n    COUNT(*) OVER (PARTITION BY department_id ORDER BY salary DESC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) - 1 AS colleagues_with_higher_salary\r\nFROM employees;</code></pre>\r\n</div>\r\n\r\n<h4>MySQL Performance Tuning Checklist</h4>\r\n<table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\r\n    <tr>\r\n        <th>Area</th>\r\n        <th>Check</th>\r\n        <th>Recommendation</th>\r\n    </tr>\r\n    <tr>\r\n        <td>Memory</td>\r\n        <td>InnoDB Buffer Pool Size</td>\r\n        <td>Set to 70-80% of available RAM on dedicated server</td>\r\n    </tr>\r\n    <tr>\r\n        <td>I/O</td>\r\n        <td>InnoDB Log File Size</td>\r\n        <td>Set to 512M-2G for write-intensive workloads</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Connections</td>\r\n        <td>Max Connections</td>\r\n        <td>Set based on application needs, monitor Threads_connected</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Queries</td>\r\n        <td>Slow Query Log</td>\r\n        <td>Enable and review regularly for optimization opportunities</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Indexes</td>\r\n        <td>Missing Indexes</td>\r\n        <td>Identify and add indexes for frequently queried columns</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Indexes</td>\r\n        <td>Unused Indexes</td>\r\n        <td>Identify and remove to reduce write overhead</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Schema</td>\r\n        <td>Table Normalization</td>\r\n        <td>Ensure proper normalization to reduce redundancy</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Schema</td>\r\n        <td>Data Types</td>\r\n        <td>Use appropriate data types to minimize storage</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Application</td>\r\n        <td>Connection Pooling</td>\r\n        <td>Implement to reduce connection overhead</td>\r\n    </tr>\r\n    <tr>\r\n        <td>Application</td>\r\n        <td>Query Batching</td>\r\n        <td>Batch operations to reduce network round trips</td>\r\n    </tr>\r\n</table>\r\n\r\n<hr>\r\n<p>By following these lessons, you\'ll progress from MySQL basics to advanced features like replication, performance tuning, security, and high availability. Keep practicing each example to build real database applications step by step.</p>\r\n\r\n<!-- Prism.js core + SQL language component -->\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js\"></script>\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-sql.min.js\"></script>\r\n<style>\r\n/* Scoped styles to avoid impacting your global site */\r\n.code-container {\r\n    position: relative;\r\n    margin: 1em 0;\r\n    background: #1e1e1e;\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n.code-container pre {\r\n    margin: 0;\r\n    padding: 1em;\r\n    overflow-x: auto;\r\n    font-family: \'Fira Code\', ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n}\r\n.copy-btn {\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 8px;\r\n    background: #007acc;\r\n    border: none;\r\n    color: #fff;\r\n    padding: 4px 8px;\r\n    border-radius: 4px;\r\n    cursor: pointer;\r\n    font-size: 12px;\r\n}\r\n.copy-btn:hover {\r\n    background: #005f99;\r\n}\r\ntable {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin: 1em 0;\r\n}\r\ntable th, table td {\r\n    padding: 8px;\r\n    text-align: left;\r\n    border: 1px solid #ddd;\r\n}\r\ntable th {\r\n    background-color: #f2f2f2;\r\n    font-weight: bold;\r\n}\r\n</style>\r\n<script>\r\nfunction copyCode(button) {\r\n    const code = button.nextElementSibling.innerText;\r\n    navigator.clipboard.writeText(code).then(() => {\r\n        button.innerText = \"Copied!\";\r\n        setTimeout(() => { button.innerText = \"Copy\"; }, 2000);\r\n    });\r\n}\r\n</script>', 'MySQL Programming Lessons – Beginner to Advanced', '1757847189_MySQL.png', 12, 1, 'published', '2025-09-14 10:18:50', '2025-09-14 10:53:09');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(50) NOT NULL,
  `password` varchar(255) NOT NULL,
  `email` varchar(100) NOT NULL,
  `first_name` varchar(50) NOT NULL,
  `last_name` varchar(50) NOT NULL,
  `role` enum('admin','author') NOT NULL DEFAULT 'author',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `username`, `password`, `email`, `first_name`, `last_name`, `role`, `created_at`) VALUES
(1, 'admin', '$1$XOQZOqn2$uvhM7MBEhQSpxeFiVaAc70', 'admin@gmail.com', 'admin', 'user', 'admin', '2025-09-13 10:11:38');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `name` (`name`);

--
-- Indexes for table `comments`
--
ALTER TABLE `comments`
  ADD PRIMARY KEY (`id`),
  ADD KEY `post_id` (`post_id`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `category_id` (`category_id`),
  ADD KEY `author_id` (`author_id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `username` (`username`),
  ADD UNIQUE KEY `email` (`email`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT for table `comments`
--
ALTER TABLE `comments`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `comments`
--
ALTER TABLE `comments`
  ADD CONSTRAINT `comments_ibfk_1` FOREIGN KEY (`post_id`) REFERENCES `posts` (`id`) ON DELETE CASCADE;

--
-- Constraints for table `posts`
--
ALTER TABLE `posts`
  ADD CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`category_id`) REFERENCES `categories` (`id`) ON DELETE SET NULL,
  ADD CONSTRAINT `posts_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `users` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
